<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>whistlestop</title>
  
  <subtitle>Never start something you&#39;re not willing to finish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="blog.whistlestop.ml/"/>
  <updated>2018-05-26T05:33:26.358Z</updated>
  <id>blog.whistlestop.ml/</id>
  
  <author>
    <name>eustoma</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sqlalchemy_C10_Reflection with SQLAlchemy ORM and Automap</title>
    <link href="blog.whistlestop.ml/2018/05/25/sqlalchemy-C10-Reflection-with-SQLAlchemy-ORM-and-Automap/"/>
    <id>blog.whistlestop.ml/2018/05/25/sqlalchemy-C10-Reflection-with-SQLAlchemy-ORM-and-Automap/</id>
    <published>2018-05-26T05:33:02.000Z</published>
    <updated>2018-05-26T05:33:26.358Z</updated>
    
    <content type="html"><![CDATA[<p>Reflection lets you populate a SQLAlchemy object from an existing database; reflection works on <strong>tables</strong>, <strong>views</strong>, <strong>indexes</strong>, and <strong>foreign keys</strong>. But what if you want to reflect a database <strong>schema</strong> into ORM-style classes? Fortunately, the handy SQLAlchemy extension automap lets you do just that.<br><a id="more"></a> </p><h2 id="Reflecting-a-Database-with-Automap"><a href="#Reflecting-a-Database-with-Automap" class="headerlink" title="Reflecting a Database with Automap"></a>Reflecting a Database with Automap</h2><p>In order to reflect a database, instead of using the <strong>declarative_base</strong> we’ve been using with the ORM so far, we’re going to use the <strong>automap_base</strong>. Let’s start by creating a <strong>Base</strong> object to work with.</p><p><strong>_Creating a Base object with automap_base_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy.ext.automap <span class="keyword">import</span> automap_base</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Base= automap_base()</span><br></pre></td></tr></table></figure><p>Next, we need an engine connected to the database that we want to reflect.</p><p><strong><em>Initializaing an engine for the Chinook database</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line">engine= create_engine(<span class="string">'sqlite:///Chinook_Sqlite.sqlite'</span>)</span><br></pre></td></tr></table></figure><p>With the Base and engine setup, we have everything we need to reflect the database. Using the prepare method on the Base object we created will scan everything available on the <strong>engine</strong> we just created, and reflect everything it can.</p><p><code>&gt;&gt;&gt; Base.prepare(engine, reflect= True)</code></p><p>That one line of code is all you need to reflect the entire database! This reflection has created ORM objects for each table that is accessible under the class property of the automap <strong>Base</strong>.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Base.classes.keys()</span><br><span class="line">[<span class="string">'Album'</span>,</span><br><span class="line"><span class="string">'Customer'</span>,</span><br><span class="line"><span class="string">'Playlist'</span>,</span><br><span class="line"><span class="string">'Artist'</span>,</span><br><span class="line"><span class="string">'Track'</span>,</span><br><span class="line"><span class="string">'Employee'</span>,</span><br><span class="line"><span class="string">'MediaType'</span>,</span><br><span class="line"><span class="string">'InvoiceLine'</span>,</span><br><span class="line"><span class="string">'Invoice'</span>,</span><br><span class="line"><span class="string">'Genre'</span>]</span><br></pre></td></tr></table></figure></p><p><strong><em>create some objects to reference the Artist and Album tables:</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Artist= Base.classes.Artist</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Album= Base.classes.Album</span><br></pre></td></tr></table></figure><p><strong><em>Using the Artist table</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> Session</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session= Session(engine)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> artist <span class="keyword">in</span> session.query(Artist).limit(<span class="number">10</span>):</span><br><span class="line"><span class="meta">... </span>   print(artist.ArtistId, artist.Name)</span><br><span class="line">(<span class="number">1</span>, <span class="string">u'AC/DC'</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">u'Accept'</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">u'Aerosmith'</span>)</span><br><span class="line">(<span class="number">4</span>, <span class="string">u'Alanis Morissette'</span>)</span><br><span class="line">(<span class="number">5</span>, <span class="string">u'Alice In Chains'</span>)</span><br><span class="line">(<span class="number">6</span>, <span class="string">u'Ant\xf4nio Carlos Jobim'</span>)</span><br><span class="line">(<span class="number">7</span>, <span class="string">u'Apocalyptica'</span>)</span><br><span class="line">(<span class="number">8</span>, <span class="string">u'Audioslave'</span>)</span><br><span class="line">(<span class="number">9</span>, <span class="string">u'BackBeat'</span>)</span><br><span class="line">(<span class="number">10</span>, <span class="string">u'Billy Cobham'</span>)</span><br></pre></td></tr></table></figure></p><h2 id="Reflected-Relationships"><a href="#Reflected-Relationships" class="headerlink" title="Reflected Relationships"></a>Reflected Relationships</h2><p>Automap can automatically reflect and establish many-to-one, one-to-many, and many-to-many relationships. When automap creates a relationship, it creates a &lt;<strong>related_object&gt;_collection</strong> property on the object.</p><p><strong><em>Using the relationship between Artist and Album to print related data</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>artist= session.query(Artist).first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> album <span class="keyword">in</span> artist.album_collection:</span><br><span class="line"><span class="meta">... </span>   print(<span class="string">'&#123;&#125;- &#123;&#125;'</span>.format(artist.Name, album.Title))</span><br><span class="line">AC/DC - For Those About To Rock We Salute You</span><br><span class="line">AC/DC - Let There Be Rock</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Reflection lets you populate a SQLAlchemy object from an existing database; reflection works on &lt;strong&gt;tables&lt;/strong&gt;, &lt;strong&gt;views&lt;/strong&gt;, &lt;strong&gt;indexes&lt;/strong&gt;, and &lt;strong&gt;foreign keys&lt;/strong&gt;. But what if you want to reflect a database &lt;strong&gt;schema&lt;/strong&gt; into ORM-style classes? Fortunately, the handy SQLAlchemy extension automap lets you do just that.&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
      <category term="sqlalchemy" scheme="blog.whistlestop.ml/tags/sqlalchemy/"/>
    
  </entry>
  
  <entry>
    <title>sqlalchemy_C08_Understanding the Session and Exceptions</title>
    <link href="blog.whistlestop.ml/2018/05/25/sqlalchemy-C08-Understanding-the-Session-and-Exceptions/"/>
    <id>blog.whistlestop.ml/2018/05/25/sqlalchemy-C08-Understanding-the-Session-and-Exceptions/</id>
    <published>2018-05-26T05:31:36.000Z</published>
    <updated>2018-05-26T05:32:07.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-SQLAlchemy-Session"><a href="#The-SQLAlchemy-Session" class="headerlink" title="The SQLAlchemy Session"></a>The SQLAlchemy Session</h2><p>Understanding the session states can be useful for troubleshooting exceptions and handling unexpected behaviors. There are four possible states for data object instances:</p><p>Transient</p><pre><code>The instance is not in session, and is not in the database.</code></pre><p>Pending</p><pre><code>The instance has been added to the session with add(), but hasn’t been flushed or committed.</code></pre><p>Persistent</p><pre><code>The object in session has a corresponding record in the database.</code></pre><p>Detached</p><pre><code>The instance is no longer connected to the session, but has a record in the database.</code></pre><a id="more"></a> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.add(cc_cookie)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> state <span class="keyword">in</span> [<span class="string">'transient'</span>, <span class="string">'pending'</span>,<span class="string">'persistent'</span>,<span class="string">'detached'</span>]:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'&#123;:&gt;10&#125;: &#123;&#125;'</span>.format(state, getattr(insp, state)))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"> transient: <span class="keyword">False</span></span><br><span class="line">   pending: <span class="keyword">True</span></span><br><span class="line">persistent: <span class="keyword">False</span></span><br><span class="line">  detached: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cc_cookie=Cookie(<span class="string">'chocolate chip'</span>,<span class="string">'http://'</span>,<span class="string">'CC01'</span>,<span class="number">12</span>,<span class="number">0.50</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span>  sqlalchemy <span class="keyword">import</span> inspect</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>insp= inspect(cc_cookie)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> state <span class="keyword">in</span> [<span class="string">'transient'</span>, <span class="string">'pending'</span>,<span class="string">'persistent'</span>,<span class="string">'detached'</span>]:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'&#123;:&gt;10&#125;: &#123;&#125;'</span>.format(state, getattr(insp, state)))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"> transient: <span class="keyword">True</span></span><br><span class="line">   pending: <span class="keyword">False</span></span><br><span class="line">persistent: <span class="keyword">False</span></span><br><span class="line">  detached: <span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.commit()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> state <span class="keyword">in</span> [<span class="string">'transient'</span>, <span class="string">'pending'</span>,<span class="string">'persistent'</span>,<span class="string">'detached'</span>]:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'&#123;:&gt;10&#125;: &#123;&#125;'</span>.format(state, getattr(insp, state)))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"> transient: <span class="keyword">False</span></span><br><span class="line">   pending: <span class="keyword">False</span></span><br><span class="line">persistent: <span class="keyword">True</span></span><br><span class="line">  detached: <span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.expunge(cc_cookie)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> state <span class="keyword">in</span> [<span class="string">'transient'</span>, <span class="string">'pending'</span>,<span class="string">'persistent'</span>,<span class="string">'detached'</span>]:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'&#123;:&gt;10&#125;: &#123;&#125;'</span>.format(state, getattr(insp, state)))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"> transient: <span class="keyword">False</span></span><br><span class="line">   pending: <span class="keyword">False</span></span><br><span class="line">persistent: <span class="keyword">False</span></span><br><span class="line">  detached: <span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.add(cc_cookie)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cc_cookie.cookie_name= <span class="string">'Change cholocate chip'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>insp.modified</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> attr, attr_state <span class="keyword">in</span> insp.attrs.items():</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> attr_state.history.has_changes():</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'&#123;&#125;: &#123;&#125;'</span>.format(attr, attr_state.value))</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'History: &#123;&#125;\n'</span>.format(attr_state.history))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">cookie_name: Change cholocate chip</span><br><span class="line">History: History(added=[<span class="string">'Change cholocate chip'</span>], unchanged=(), deleted=())</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><h3 id="MultipleResultsFound-Exception"><a href="#MultipleResultsFound-Exception" class="headerlink" title="MultipleResultsFound Exception"></a>MultipleResultsFound Exception</h3><p>This exception occurs when we use the <strong>.one()</strong> query method, but get more than one result back.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>results=session.query(Cookie).one()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"C:\FluentPython\env\lib\site-packages\sqlalchemy\orm\query.py"</span>, line <span class="number">2884</span>, <span class="keyword">in</span> one</span><br><span class="line">    ret = self.one_or_none()</span><br><span class="line">  File <span class="string">"C:\FluentPython\env\lib\site-packages\sqlalchemy\orm\query.py"</span>, line <span class="number">2863</span>, <span class="keyword">in</span> one_or_none</span><br><span class="line">    <span class="string">"Multiple rows were found for one_or_none()"</span>)</span><br><span class="line">sqlalchemy.orm.exc.MultipleResultsFound: Multiple rows were found <span class="keyword">for</span> one_or_none()</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"C:\FluentPython\env\lib\site-packages\sqlalchemy\orm\query.py"</span>, line <span class="number">2887</span>, <span class="keyword">in</span> one</span><br><span class="line">    <span class="string">"Multiple rows were found for one()"</span>)</span><br><span class="line">sqlalchemy.orm.exc.MultipleResultsFound: Multiple rows were found <span class="keyword">for</span> one()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span>  sqlalchemy.orm.exc <span class="keyword">import</span> MultipleResultsFound</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    results= session.query(Cookie).one()</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> MultipleResultsFound <span class="keyword">as</span> error:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'too many cookies...'</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">too many cookies...</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="DetachedInstanceError"><a href="#DetachedInstanceError" class="headerlink" title="DetachedInstanceError"></a>DetachedInstanceError</h3><p>This exception occurs when we attempt to access an attribute on an instance that needs to be loaded from the database, but the instance we are using is not currently attached to the database. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>cookiemon = User(<span class="string">'cookiemon'</span>, <span class="string">'mon@cookie.com'</span>, <span class="string">'111-111-1111'</span>, <span class="string">'password'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.add(cookiemon)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o1=Order()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o1.user= cookiemon</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.add(o1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cc= session.query(Cookie).filter(Cookie.cookie_name==<span class="string">'Change chocolate chip'</span>).one()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"C:\FluentPython\env\lib\site-packages\sqlalchemy\orm\query.py"</span>, line <span class="number">2890</span>, <span class="keyword">in</span> one</span><br><span class="line">    <span class="keyword">raise</span> orm_exc.NoResultFound(<span class="string">"No row was found for one()"</span>)</span><br><span class="line">sqlalchemy.orm.exc.NoResultFound: No row was found <span class="keyword">for</span> one()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cc= session.query(Cookie).filter(Cookie.cookie_name==<span class="string">'Change cholocate chip'</span>).one()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cc</span><br><span class="line">Cookie(cookie_name=<span class="string">'Change cholocate chip'</span>, cookie_recipe_url=<span class="string">'http://'</span>, cookie_sku=<span class="string">'CC01'</span>, quantity=<span class="number">12</span>, unit_cost=<span class="number">0.50</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>line1= LineItem(order= o1, cookie= cc, quantity= <span class="number">2</span>, extended_cost= <span class="number">1.00</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.add(line1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.commit()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>order= session.query(Order).first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.expunge(order)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>order.line_items</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"C:\FluentPython\env\lib\site-packages\sqlalchemy\orm\attributes.py"</span>, line <span class="number">242</span>, <span class="keyword">in</span> __get__</span><br><span class="line">    <span class="keyword">return</span> self.impl.get(instance_state(instance), dict_)</span><br><span class="line">  File <span class="string">"C:\FluentPython\env\lib\site-packages\sqlalchemy\orm\attributes.py"</span>, line <span class="number">599</span>, <span class="keyword">in</span> get</span><br><span class="line">    value = self.callable_(state, passive)</span><br><span class="line">  File <span class="string">"C:\FluentPython\env\lib\site-packages\sqlalchemy\orm\strategies.py"</span>, line <span class="number">596</span>, <span class="keyword">in</span> _load_for_state</span><br><span class="line">    (orm_util.state_str(state), self.key)</span><br><span class="line">sqlalchemy.orm.exc.DetachedInstanceError: Parent instance &lt;Order at <span class="number">0x665f3b0</span>&gt; <span class="keyword">is</span> <span class="keyword">not</span> bound to a Session; lazy load operation of attribute <span class="string">'line_items'</span> cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">cookiemon = User(<span class="string">'cookiemon'</span>, <span class="string">'mon@cookie.com'</span>, <span class="string">'111-111-1111'</span>, <span class="string">'password'</span>) </span><br><span class="line">cc = Cookie(<span class="string">'chocolate chip'</span>, <span class="string">'http://some.aweso.me/cookie/recipe.html'</span>, </span><br><span class="line">            <span class="string">'CC01'</span>, <span class="number">12</span>, <span class="number">0.50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dcc = Cookie(<span class="string">'dark chocolate chip'</span>, </span><br><span class="line">             <span class="string">'http://some.aweso.me/cookie/recipe_dark.html'</span>,</span><br><span class="line">             <span class="string">'CC02'</span>, <span class="number">1</span>, <span class="number">0.75</span>)</span><br><span class="line"></span><br><span class="line">session.add(cookiemon)</span><br><span class="line">session.add(cc)</span><br><span class="line">session.add(dcc)</span><br><span class="line"></span><br><span class="line">o1 = Order()</span><br><span class="line">o1.user = cookiemon</span><br><span class="line">session.add(o1)</span><br><span class="line"></span><br><span class="line">line1 = LineItem(order=o1, cookie=cc, quantity=<span class="number">9</span>, extended_cost=<span class="number">4.50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session.add(line1)</span><br><span class="line">session.commit() </span><br><span class="line">o2 = Order()</span><br><span class="line">o2.user = cookiemon</span><br><span class="line">session.add(o2)</span><br><span class="line"></span><br><span class="line">line1 = LineItem(order=o2, cookie=cc, quantity=<span class="number">2</span>, extended_cost=<span class="number">1.50</span>)</span><br><span class="line">line2 = LineItem(order=o2, cookie=dcc, quantity=<span class="number">9</span>, extended_cost=<span class="number">6.75</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session.add(line1)</span><br><span class="line">session.add(line2)</span><br><span class="line">session.commit() </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ship_it</span><span class="params">(order_id)</span>:</span></span><br><span class="line">    order = session.query(Order).get(order_id)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> order.line_items:</span><br><span class="line">        li.cookie.quantity = li.cookie.quantity - li.quantity </span><br><span class="line">        session.add(li.cookie)</span><br><span class="line">    order.shipped = <span class="keyword">True</span> </span><br><span class="line">    session.add(order)</span><br><span class="line">    session.commit()</span><br><span class="line">    print(<span class="string">'shipped order ID: &#123;&#125;'</span>.format(order_id))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.exc <span class="keyword">import</span> IntegrityError </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ship_it</span><span class="params">(order_id)</span>:</span></span><br><span class="line">    order = session.query(Order).get(order_id)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> order.line_items:</span><br><span class="line">        li.cookie.quantity = li.cookie.quantity - li.quantity</span><br><span class="line">        session.add(li.cookie)</span><br><span class="line">    order.shipped = <span class="keyword">True</span></span><br><span class="line">    session.add(order)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        session.commit()</span><br><span class="line">        print(<span class="string">'shipped order ID: &#123;&#125;'</span>.format(order_id))</span><br><span class="line">    <span class="keyword">except</span> IntegrityError <span class="keyword">as</span> error: </span><br><span class="line">        print(<span class="string">'ERROR: &#123;!s&#125;'</span>.format(error.orig))</span><br><span class="line">        session.rollback()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;The-SQLAlchemy-Session&quot;&gt;&lt;a href=&quot;#The-SQLAlchemy-Session&quot; class=&quot;headerlink&quot; title=&quot;The SQLAlchemy Session&quot;&gt;&lt;/a&gt;The SQLAlchemy Session&lt;/h2&gt;&lt;p&gt;Understanding the session states can be useful for troubleshooting exceptions and handling unexpected behaviors. There are four possible states for data object instances:&lt;/p&gt;
&lt;p&gt;Transient&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The instance is not in session, and is not in the database.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Pending&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The instance has been added to the session with add(), but hasn’t been flushed or committed.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Persistent&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The object in session has a corresponding record in the database.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Detached&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The instance is no longer connected to the session, but has a record in the database.
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
      <category term="sqlalchemy" scheme="blog.whistlestop.ml/tags/sqlalchemy/"/>
    
  </entry>
  
  <entry>
    <title>sqlalchemy_C06_Defining Schema with SQLAlchemy ORM_02</title>
    <link href="blog.whistlestop.ml/2018/05/25/sqlalchemy-C06-Defining-Schema-with-SQLAlchemy-ORM-02/"/>
    <id>blog.whistlestop.ml/2018/05/25/sqlalchemy-C06-Defining-Schema-with-SQLAlchemy-ORM-02/</id>
    <published>2018-05-26T05:30:30.000Z</published>
    <updated>2018-05-26T05:31:14.571Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-Session"><a href="#The-Session" class="headerlink" title="The Session"></a>The Session</h2><a id="more"></a> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>engine= create_engine(<span class="string">'sqlite:///:memory:'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Session= sessionmaker(bind= engine)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session =Session()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>engine = create_engine(<span class="string">'sqlite:///:memory:'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Session = sessionmaker(bind=engine)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session = Session()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, Numeric, String, DateTime, ForeignKey, Boolean</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> relationship, backref</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Base= declarative_base()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Cookie</span><span class="params">(Base)</span>:</span></span><br><span class="line"><span class="meta">... </span>    __tablename__= <span class="string">'cookies'</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>    cookie_id = Column(Integer(), primary_key=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">... </span>    cookie_name = Column(String(<span class="number">50</span>), index=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">... </span>    cookie_recipe_url = Column(String(<span class="number">255</span>))</span><br><span class="line"><span class="meta">... </span>    cookie_sku = Column(String(<span class="number">55</span>))</span><br><span class="line"><span class="meta">... </span>    quantity = Column(Integer())</span><br><span class="line"><span class="meta">... </span>    unit_cost = Column(Numeric(<span class="number">12</span>, <span class="number">2</span>))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">"Cookie(cookie_name='&#123;self.cookie_name&#125;', "</span> \</span><br><span class="line"><span class="meta">... </span>                       <span class="string">"cookie_recipe_url='&#123;self.cookie_recipe_url&#125;', "</span> \</span><br><span class="line"><span class="meta">... </span>                       <span class="string">"cookie_sku='&#123;self.cookie_sku&#125;', "</span> \</span><br><span class="line"><span class="meta">... </span>                       <span class="string">"quantity=&#123;self.quantity&#125;, "</span> \</span><br><span class="line"><span class="meta">... </span>                       <span class="string">"unit_cost=&#123;self.unit_cost&#125;)"</span>.format(self=self)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span><br><span class="line"><span class="meta">... </span>    __tablename__ = <span class="string">'users'</span></span><br><span class="line"><span class="meta">... </span>    </span><br><span class="line"><span class="meta">... </span>    user_id = Column(Integer(), primary_key=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">... </span>    username = Column(String(<span class="number">15</span>), nullable=<span class="keyword">False</span>, unique=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">... </span>    email_address = Column(String(<span class="number">255</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line"><span class="meta">... </span>    phone = Column(String(<span class="number">20</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line"><span class="meta">... </span>    password = Column(String(<span class="number">25</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line"><span class="meta">... </span>    created_on = Column(DateTime(), default=datetime.now)</span><br><span class="line"><span class="meta">... </span>    updated_on = Column(DateTime(), default=datetime.now, onupdate=datetime.now)</span><br><span class="line"><span class="meta">... </span>    </span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">"User(username='&#123;self.username&#125;', "</span> \</span><br><span class="line"><span class="meta">... </span>                     <span class="string">"email_address='&#123;self.email_address&#125;', "</span> \</span><br><span class="line"><span class="meta">... </span>                     <span class="string">"phone='&#123;self.phone&#125;', "</span> \</span><br><span class="line"><span class="meta">... </span>                     <span class="string">"password='&#123;self.password&#125;')"</span>.format(self=self)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Order</span><span class="params">(Base)</span>:</span></span><br><span class="line"><span class="meta">... </span>    __tablename__ = <span class="string">'orders'</span></span><br><span class="line"><span class="meta">... </span>    order_id = Column(Integer(), primary_key=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">... </span>    user_id = Column(Integer(), ForeignKey(<span class="string">'users.user_id'</span>))</span><br><span class="line"><span class="meta">... </span>    shipped = Column(Boolean(), default=<span class="keyword">False</span>)</span><br><span class="line"><span class="meta">... </span>    </span><br><span class="line"><span class="meta">... </span>    user =  relationship(<span class="string">"User"</span>, backref=backref(<span class="string">'orders'</span>, order_by=order_id))</span><br><span class="line"><span class="meta">... </span>    </span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">"Order(user_id=&#123;self.user_id&#125;, "</span> \</span><br><span class="line"><span class="meta">... </span>                      <span class="string">"shipped=&#123;self.shipped&#125;)"</span>.format(self=self)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span><span class="params">(Base)</span>:</span></span><br><span class="line"><span class="meta">... </span>    __tablename__ = <span class="string">'line_items'</span></span><br><span class="line"><span class="meta">... </span>    line_item_id = Column(Integer(), primary_key=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">... </span>    order_id = Column(Integer(), ForeignKey(<span class="string">'orders.order_id'</span>))</span><br><span class="line"><span class="meta">... </span>    cookie_id = Column(Integer(), ForeignKey(<span class="string">'cookies.cookie_id'</span>))</span><br><span class="line"><span class="meta">... </span>    quantity = Column(Integer())</span><br><span class="line"><span class="meta">... </span>    extended_cost = Column(Numeric(<span class="number">12</span>, <span class="number">2</span>))</span><br><span class="line"><span class="meta">... </span>    </span><br><span class="line"><span class="meta">... </span>    order = relationship(<span class="string">"Order"</span>, backref=backref(<span class="string">'line_items'</span>, order_by=line_item_id))</span><br><span class="line"><span class="meta">... </span>    cookie = relationship(<span class="string">"Cookie"</span>, uselist=<span class="keyword">False</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">"LineItems(order_id=&#123;self.order_id&#125;, "</span> \</span><br><span class="line"><span class="meta">... </span>                          <span class="string">"cookie_id=&#123;self.cookie_id&#125;, "</span> \</span><br><span class="line"><span class="meta">... </span>                          <span class="string">"quantity=&#123;self.quantity&#125;, "</span> \</span><br><span class="line"><span class="meta">... </span>                          <span class="string">"extended_cost=&#123;self.extended_cost&#125;)"</span>.format(</span><br><span class="line"><span class="meta">... </span>                    self=self)    </span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Base.metadata.create_all(engine)</span><br></pre></td></tr></table></figure><h2 id="Inserting-Data"><a href="#Inserting-Data" class="headerlink" title="Inserting Data"></a>Inserting Data</h2><p><strong><em>Inserting a single object</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cc_cookie = Cookie(cookie_name=<span class="string">'chocolate chip'</span>, </span><br><span class="line">                   cookie_recipe_url=<span class="string">'http://some.aweso.me/cookie/recipe.html'</span>,</span><br><span class="line">                   cookie_sku=<span class="string">'CC01'</span>,</span><br><span class="line">                   quantity=<span class="number">12</span>,</span><br><span class="line">                   unit_cost=<span class="number">0.50</span>)</span><br><span class="line">session.add(cc_cookie) </span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure><p>When <strong>commit()</strong> is called on the session, the cookie is actually inserted into the database. It also updates <strong>cc_cookie</strong> with the primary key of the record in the database. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(cc_cookie.cookie_id)</span><br><span class="line">C:\FluentPython\env\lib\site-packages\sqlalchemy\sql\sqltypes.py:<span class="number">603</span>: SAWarning: Dialect sqlite+pysqlite does *<span class="keyword">not</span>* support Decimal objects natively, <span class="keyword">and</span> SQLAlchemy must convert <span class="keyword">from</span> floating point - rounding errors <span class="keyword">and</span> other issues may occur. Please consider storing Decimal numbers <span class="keyword">as</span> strings <span class="keyword">or</span> integers on this platform <span class="keyword">for</span> lossless storage.</span><br><span class="line">  <span class="string">'storage.'</span> % (dialect.name, dialect.driver))</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>When we create the instance of the <strong>Cookie</strong> class and then add it to the session, nothing is sent to the database. It’s not until we call <strong>commit()</strong> on the session that anything is sent to the database.</p><p><strong><em>Multiple inserts</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dcc = Cookie(cookie_name=<span class="string">'dark chocolate chip'</span>,</span><br><span class="line">             cookie_recipe_url=<span class="string">'http://some.aweso.me/cookie/recipe_dark.html'</span>,</span><br><span class="line">             cookie_sku=<span class="string">'CC02'</span>,</span><br><span class="line">             quantity=<span class="number">1</span>,</span><br><span class="line">             unit_cost=<span class="number">0.75</span>)</span><br><span class="line">mol = Cookie(cookie_name=<span class="string">'molasses'</span>,</span><br><span class="line">             cookie_recipe_url=<span class="string">'http://some.aweso.me/cookie/recipe_molasses.html'</span>,</span><br><span class="line">             cookie_sku=<span class="string">'MOL01'</span>,</span><br><span class="line">             quantity=<span class="number">1</span>,</span><br><span class="line">             unit_cost=<span class="number">0.80</span>)</span><br><span class="line">session.add(dcc) </span><br><span class="line">session.add(mol) </span><br><span class="line">session.flush() </span><br><span class="line">print(dcc.cookie_id)</span><br><span class="line">print(mol.cookie_id)</span><br></pre></td></tr></table></figure><p>we used the <strong>flush()</strong> method on the session instead of <strong>commit()</strong>.A flush is like a commit; however, it doesn’t perform a database commit and end the transaction. Because of this, the <strong>dcc</strong> and <strong>mol</strong> instances are still connected to the session, and can be used to perform additional database tasks without triggering additional database queries. We also issue the <strong>session.flush()</strong> statement one time, even though we added multiple records into the database. This actually results in two insert statements being sent to the database inside a single transaction.</p><p>The second method of inserting multiple records into the database is great when you want to insert data into the table and you don’t need to perform additional work on that data.</p><p><strong><em>Bulk inserting multiple records</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">c1 = Cookie(cookie_name=<span class="string">'peanut butter'</span>,</span><br><span class="line">            cookie_recipe_url=<span class="string">'http://some.aweso.me/cookie/peanut.html'</span>,</span><br><span class="line">            cookie_sku=<span class="string">'PB01'</span>,</span><br><span class="line">            quantity=<span class="number">24</span>,</span><br><span class="line">            unit_cost=<span class="number">0.25</span>)</span><br><span class="line">c2 = Cookie(cookie_name=<span class="string">'oatmeal raisin'</span>,</span><br><span class="line">            cookie_recipe_url=<span class="string">'http://some.okay.me/cookie/raisin.html'</span>,</span><br><span class="line">            cookie_sku=<span class="string">'EWW01'</span>,</span><br><span class="line">            quantity=<span class="number">100</span>,</span><br><span class="line">            unit_cost=<span class="number">1.00</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.bulk_save_objects([c1,c2])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.commit()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c1.cookie_id</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><strong>c1</strong> object isn’t associated with the session, and can’t refresh its <strong>cookie_id</strong> for printing.</p><p>The method demonstrated is substantially faster than performing multiple individual adds and inserts.This speed does come at the expense of some features we get in the normal add and commit, such as:</p><ul><li>Relationship settings and actions are not respected or triggered.</li><li>The objects are not connected to the session.</li><li>Fetching primary keys is not done by default.</li><li>No events will be triggered.</li></ul><p>If you are inserting multiple records and don’t need access to relationships or the inserted primary key, use <strong>bulk_save_objects</strong> or its related methods. This is especially true if you are ingesting data from an external data source such as a CSV or a large JSON document with nested arrays.</p><h2 id="Querying-Data"><a href="#Querying-Data" class="headerlink" title="Querying Data"></a>Querying Data</h2><p><strong><em>Get all the cookies</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>cookies= session.query(Cookie).all()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> cookie <span class="keyword">in</span> cookies: print(cookie)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">Cookie(cookie_name=<span class="string">'chocolate chip'</span>, cookie_recipe_url=<span class="string">'http://some.aweso.me/cookie/recipe.html'</span>, cookie_sku=<span class="string">'CC01'</span>, quantity=<span class="number">12</span>, unit_cost=<span class="number">0.50</span>)</span><br><span class="line">Cookie(cookie_name=<span class="string">'peanut butter'</span>, cookie_recipe_url=<span class="string">'http://some.aweso.me/cookie/peanut.html'</span>, cookie_sku=<span class="string">'PB01'</span>, quantity=<span class="number">24</span>, unit_cost=<span class="number">0.25</span>)</span><br><span class="line">Cookie(cookie_name=<span class="string">'oatmeal raisin'</span>, cookie_recipe_url=<span class="string">'http://some.okay.me/cookie/raisin.html'</span>, cookie_sku=<span class="string">'EWW01'</span>, quantity=<span class="number">100</span>, unit_cost=<span class="number">1.00</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>These objects are connected to the session, which means we can change them or delete them and persist that change to the database.</p><p>In addition to using the query as an iterable or calling the <strong>all()</strong> method, there are many other ways of accessing the data. You can use the following methods to fetch results:</p><p><strong>first()</strong><br>    Returns the first record object if there is one.</p><p><strong>one()</strong><br>    Queries all the rows, and raises an exception if anything other than a single result is returned.</p><p><strong>scalar()</strong><br>    Returns the first element of the first result, None if there is no result, or an error if there is more than one result.</p><h3 id="Controlling-the-Columns-in-the-Query"><a href="#Controlling-the-Columns-in-the-Query" class="headerlink" title="Controlling the Columns in the Query"></a>Controlling the Columns in the Query</h3><p>To limit the fields that are returned from a query, we need to pass in the columns we want in the <strong>query()</strong> method constructor separated by columns.</p><p><strong>_Select only cookie_name_</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.query(Cookie.cookie_id, Cookie.cookie_name).first()</span><br><span class="line">(<span class="number">1</span>, <span class="string">'chocolate chip'</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><h3 id="Ordering"><a href="#Ordering" class="headerlink" title="Ordering"></a>Ordering</h3><p>However, if we want the list to be returned in a particular order, we can chain an order_by() statement to our select.</p><p><strong><em>Order by quantity ascending</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> cookie <span class="keyword">in</span> session.query(Cookie).order_by(Cookie.quantity):</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'&#123;:3&#125; - &#123;&#125;'</span>.format(cookie.quantity, cookie.cookie_name))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"> <span class="number">12</span> - chocolate chip</span><br><span class="line"> <span class="number">24</span> - peanut butter</span><br><span class="line"><span class="number">100</span> - oatmeal raisin</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>If you want to sort in reverse or descending order, use the <strong>desc()</strong> statement. The <strong>desc()</strong> function wraps the specific column you want to sort in a descending manner.</p><p><strong><em>Order by quantity descending</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> desc</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> cookie <span class="keyword">in</span> session.query(Cookie).order_by(desc(Cookie.quantity)):</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'&#123;:3&#125; - &#123;&#125;'</span>.format(cookie.quantity, cookie.cookie_name))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">100</span> - oatmeal raisin</span><br><span class="line"> <span class="number">24</span> - peanut butter</span><br><span class="line"> <span class="number">12</span> - chocolate chip</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>The <strong>desc()</strong> function can also be used as a method on a column object, such as <strong>Cookie.quantity.desc()</strong>. However, that can be a bit more confusing to read in long statements.</p><h3 id="Limiting"><a href="#Limiting" class="headerlink" title="Limiting"></a>Limiting</h3><p>In prior examples, we used the <strong>first()</strong> method to get just a single row back. While our <strong>query()</strong> gave us the one row we asked for, the actual query ran over and accessed all the results, not just the single record. If we want to limit the query, we can use array slice notation to actually issue a limit statement as part of our query.</p><p><strong><em>Two fewest cookie inventories</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>query= session.query(Cookie).order_by(Cookie.quantity)[:<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print([result.cookie_name <span class="keyword">for</span> result <span class="keyword">in</span> query])</span><br><span class="line">[<span class="string">'chocolate chip'</span>, <span class="string">'peanut butter'</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>In addition to using the array slice notation, it is also possible to use the <strong>limit()</strong> statement.</p><p><strong><em>Two fewest cookie inventories with limit</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">query = session.query(Cookie).order_by(Cookie.quantity).limit(<span class="number">2</span>)</span><br><span class="line">print([result.cookie_name <span class="keyword">for</span> result <span class="keyword">in</span> query])</span><br></pre></td></tr></table></figure></p><h3 id="Built-In-SQL-Functions-and-Labels"><a href="#Built-In-SQL-Functions-and-Labels" class="headerlink" title="Built-In SQL Functions and Labels"></a>Built-In SQL Functions and Labels</h3><p>SQLAlchemy can also leverage SQL functions found in the backend database. Two very commonly used database functions are <strong>SUM()</strong> and <strong>COUNT()</strong>. To use these functions, we need to import the <strong>sqlalchemy.func</strong> module generator that makes them available. These functions are wrapped around the column(s) on which they are operating.</p><p><strong><em>Summing our cookies</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> func</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>inv_count= session.query(func.sum(Cookie.quantity)).scalar()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>inv_count</span><br><span class="line"><span class="number">136</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>Notice the use of <strong>scalar</strong>, which will return only the leftmost column in the first record.</p><p><strong><em>Counting our inventory records</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>rec_count= session.query(func.count(Cookie.cookie_name)).first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rec_count</span><br><span class="line">(<span class="number">3</span>,)</span><br></pre></td></tr></table></figure><p>Using functions such as <strong>count()</strong> and <strong>sum()</strong> will end up returning tuples or results with column names like <strong>count_1</strong>. These types of returns are often not what we want. Also, if we have several counts in a query we’d have to know the occurrence number in the statement, and incorporate that into the column name, so the fourth count() function would be <strong>count_4</strong>. This simply is not as explicit and clear as we should be in our naming, especially when surrounded with other Python code.</p><p><strong><em>Renaming our count column</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>rec_count= session.query(func.count(Cookie.cookie_name).label(<span class="string">'inventory_count'</span>)).first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rec_count.keys()</span><br><span class="line">[<span class="string">'inventory_count'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rec_count.inventory_count</span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="Filtering"><a href="#Filtering" class="headerlink" title="Filtering"></a>Filtering</h3><p>Filtering queries is done by appending <strong>filter()</strong> statements to our query. A typical <strong>filter()</strong> clause has a column, an operator, and a value or column. It is possible to chain multiple <strong>filters()</strong> clauses together or comma separate multiple <strong>ClauseElement</strong> expressions in a single filter, and they will act like ANDs in traditional SQL statements.</p><p><strong><em>Filtering by cookie name with filter</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>record = session.query(Cookie).filter(Cookie.cookie_name==<span class="string">'chocolate chip'</span>).first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(record)</span><br><span class="line">Cookie(cookie_name=<span class="string">'chocolate chip'</span>, cookie_recipe_url=<span class="string">'http://some.aweso.me/cookie/recipe.html'</span>, cookie_sku=<span class="string">'CC01'</span>, quantity=<span class="number">12</span>, unit_cost=<span class="number">0.50</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>There is also a <strong>filter_by()</strong> method that works similarly to the <strong>filter()</strong> method except instead of explicity providing the class as part of the filter expression it uses attribute keyword expressions from the primary entity of the query or the last entity that was joined to the statement. It also uses a keyword assignment instead of a <strong>Boolean</strong>.</p><p><strong>_Filtering by cookie name with filter_by_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>record= session.query(Cookie).filter_by(cookie_name=<span class="string">'chocolate chip'</span>).first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(record)</span><br><span class="line">Cookie(cookie_name=<span class="string">'chocolate chip'</span>, cookie_recipe_url=<span class="string">'http://some.aweso.me/cookie/recipe.html'</span>, cookie_sku=<span class="string">'CC01'</span>, quantity=<span class="number">12</span>, unit_cost=<span class="number">0.50</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p> <strong><em>Finding names with “chocolate” in them</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>query= session.query(Cookie).filter(Cookie.cookie_name.like(<span class="string">'%chocolate%'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> record <span class="keyword">in</span> query:</span><br><span class="line"><span class="meta">... </span>    print(record.cookie_name)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">chocolate chip</span><br><span class="line">dark chocolate chip</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>we are using the <strong>Cookie.cookie_name</strong> column inside of a filter statement as a type of <strong>ClauseElement</strong> to filter our results, and we are taking advantage of the <strong>like()</strong> method that is available on <strong>ClauseElements</strong>. There are many other methods available.</p><p>If we don’t use one of the <strong>ClauseElement</strong> methods, then we will have an operator in our filter clauses. </p><h3 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h3><p><strong><em>String concatenation with +</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>results= session.query(Cookie.cookie_name, <span class="string">'SKU-'</span>+Cookie.cookie_sku).all()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> row <span class="keyword">in</span> results:print(row)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">(<span class="string">'chocolate chip'</span>, <span class="string">'SKU-CC01'</span>)</span><br><span class="line">(<span class="string">'dark chocolate chip'</span>, <span class="string">'SKU-CC02'</span>)</span><br><span class="line">(<span class="string">'molasses'</span>, <span class="string">'SKU-MOL01'</span>)</span><br><span class="line">(<span class="string">'peanut butter'</span>, <span class="string">'SKU-PB01'</span>)</span><br><span class="line">(<span class="string">'oatmeal raisin'</span>, <span class="string">'SKU-EWW01'</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><strong><em>Inventory value by cookie</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> cast</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>query= session.query(Cookie.cookie_name, cast(</span><br><span class="line"><span class="meta">... </span>    (Cookie.quantity * Cookie.unit_cost),Numeric(<span class="number">12</span>,<span class="number">2</span>)</span><br><span class="line"><span class="meta">... </span>    ).label(<span class="string">'inv_cost'</span>) <span class="comment">#  using the label() function to rename the column</span></span><br><span class="line"><span class="meta">... </span>                     )</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> result <span class="keyword">in</span> query:print(<span class="string">'&#123;&#125;- &#123;&#125;'</span>.format(result.cookie_name, result.inv_cost))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">chocolate chip- <span class="number">6.00</span></span><br><span class="line">dark chocolate chip- <span class="number">0.75</span></span><br><span class="line">molasses- <span class="number">0.80</span></span><br><span class="line">peanut butter- <span class="number">6.00</span></span><br><span class="line">oatmeal raisin- <span class="number">100.00</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><strong>cast</strong> is a function that allows us to convert types. In this case, we will be getting back results such as 6.0000000000, so by casting it, we can make it look like currency. It is also possible to accomplish the same task in Python with <strong>print(‘{} -{:.2f}’.format(row.cookie_name, row.inv_cost)</strong>).</p><p>If we need to combine where statements, we can use a couple of different methods. One of those methods is known as Boolean operators.</p><h3 id="Boolean-Operators"><a href="#Boolean-Operators" class="headerlink" title="Boolean Operators"></a>Boolean Operators</h3><p>when you write <strong>A &lt; B &amp; C &lt; D</strong>, what you are actually writing is <strong>A &lt; (B&amp;C) &lt; D</strong>, when you probably intended to get <strong>(A &lt; B) &amp;(C &lt; D)</strong>.</p><p>Often we want to chain multiple where clauses together in inclusive and exclusionary manners; this should be done via conjunctions.</p><h3 id="Conjunctions"><a href="#Conjunctions" class="headerlink" title="Conjunctions"></a>Conjunctions</h3><p>While it is possible to chain multiple <strong>filter()</strong> clauses together, it’s often more readable and functional to use conjunctions to accomplish the desired effect. I also prefer to use conjunctions instead of Boolean operators, as conjunctions will make your code more expressive. The conjunctions in SQLAlchemy are <strong>and_()</strong>, <strong>or_()</strong>, and <strong>not_()</strong>. They have underscores to separate them from the built-in keywords.</p><p><strong><em>Using the or() conjunction</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>query= session.query(Cookie).filter(</span><br><span class="line"><span class="meta">... </span>    Cookie.quantity &gt; <span class="number">23</span>,</span><br><span class="line"><span class="meta">... </span>    Cookie.unit_cost &lt; <span class="number">0.4</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> and_, or_, not_</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>query = session.query(Cookie).filter(</span><br><span class="line"><span class="meta">... </span>    or_(</span><br><span class="line"><span class="meta">... </span>        Cookie.quantity.between(<span class="number">10</span>, <span class="number">50</span>),</span><br><span class="line"><span class="meta">... </span>        Cookie.cookie_name.contains(<span class="string">'chip'</span>)</span><br><span class="line"><span class="meta">... </span>        )</span><br><span class="line"><span class="meta">... </span>    )</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> result <span class="keyword">in</span> query: print(result.cookie_name)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">chocolate chip</span><br><span class="line">dark chocolate chip</span><br><span class="line">peanut butter</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="Updating-Data"><a href="#Updating-Data" class="headerlink" title="Updating Data"></a>Updating Data</h3><p> <strong><em>Updating data via object</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>query=session.query(Cookie)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cc_cookie= query.filter(Cookie.cookie_name==<span class="string">'chocolate chip'</span>).first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cc_cookie.quantity = cc_cookie.quantity + <span class="number">120</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.commit()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(cc_cookie.quantity)</span><br><span class="line"><span class="number">132</span></span><br></pre></td></tr></table></figure><p> <strong><em>Updating data in place</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>query= session.query(Cookie)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>query=query.filter(Cookie.cookie_name==<span class="string">'chocolate chip'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>query.update(&#123;Cookie.quantity: Cookie.quantity - <span class="number">20</span>&#125;)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cc_cookie= query.first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(cc_cookie.quantity)</span><br><span class="line"><span class="number">112</span></span><br></pre></td></tr></table></figure><p>The <strong>update()</strong> method causes the record to be updated outside of the session, and returns the number of rows updated.</p><h3 id="Deleting-Data"><a href="#Deleting-Data" class="headerlink" title="Deleting Data"></a>Deleting Data</h3><p>To create a delete statement, you can use either the <strong>delete()</strong> function or the <strong>delete()</strong> method on the table from which you are deleting data. Unlike <strong>insert()</strong> and <strong>update()</strong>, <strong>delete()</strong> takes no values parameter, only an optional <strong>where</strong> clause (omitting the <strong>where</strong> clause will delete all rows from the table).</p><p> <strong><em>Deleting data</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>query= session.query(Cookie)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>query= query.filter(Cookie.cookie_name==<span class="string">'dark chocolate chip'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dcc_cookie=query.one()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.delete(dcc_cookie)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.commit()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dcc_cookie= query.first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(dcc_cookie)</span><br><span class="line"><span class="keyword">None</span></span><br></pre></td></tr></table></figure><p><strong><em>It is also possible to delete data in place without having the object</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>query= session.query(Cookie)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>query= query.filter(Cookie.cookie_name==<span class="string">'molasses'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>query.delete()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mol_cookie= query.first()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(mol_cookie)</span><br><span class="line"><span class="keyword">None</span></span><br></pre></td></tr></table></figure><p><strong><em>Adding related objects</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>cookiemon = User(username=<span class="string">'cookiemon'</span>,</span><br><span class="line"><span class="meta">... </span> email_address=<span class="string">'mon@cookie.com'</span>,</span><br><span class="line"><span class="meta">... </span> phone=<span class="string">'111-111-1111'</span>,</span><br><span class="line"><span class="meta">... </span> password=<span class="string">'password'</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cakeeater = User(username=<span class="string">'cakeeater'</span>,</span><br><span class="line"><span class="meta">... </span> email_address=<span class="string">'cakeeater@cake.com'</span>,</span><br><span class="line"><span class="meta">... </span> phone=<span class="string">'222-222-2222'</span>,</span><br><span class="line"><span class="meta">... </span> password=<span class="string">'password'</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pieperson = User(username=<span class="string">'pieperson'</span>,</span><br><span class="line"><span class="meta">... </span> email_address=<span class="string">'person@pie.com'</span>,</span><br><span class="line"><span class="meta">... </span> phone=<span class="string">'333-333-3333'</span>,</span><br><span class="line"><span class="meta">... </span> password=<span class="string">'password'</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.add(cookiemon)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.add(cakeeater)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.add(pieperson)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.commit()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o1=Order()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o1.user= cookiemon</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.add(o1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cc= session.query(Cookie).filter(Cookie.cookie_name==<span class="string">'chocolate chip'</span>).one()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>line1= LineItem(cookie= cc, quantity= <span class="number">2</span>, extended_cost= <span class="number">1.00</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pb= session.query(Cookie    ).filter(Cookie.cookie_name==<span class="string">'peanut butter'</span>).one()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>line2= LineItem(quantity= <span class="number">12</span>, extended_cost= <span class="number">3.00</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>line2.cookie= pb</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>line2.order = o1</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o1.line_items.append(line1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o1.line_items.append(line2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.commit()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o2=Order()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o2.user= cakeeater</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cc= session.query(Cookie).filter(Cookie.cookie_name==<span class="string">'chocolate chip'</span>).one()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>line1= LineItem(cookie=cc, quantity= <span class="number">24</span>, extended_cost=<span class="number">12.00</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>oat= session.query(Cookie).filter(Cookie.cookie_name==<span class="string">'oatmeal raisin'</span>).one()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>line2= LineItem(cookie=oat, quantity= <span class="number">6</span>, extended_cost=<span class="number">6.00</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o2.line_items.append(line1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>o2.line_items.append(line2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.add(o2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>session.commit()</span><br></pre></td></tr></table></figure><h3 id="Joins"><a href="#Joins" class="headerlink" title="Joins"></a>Joins</h3><p>let’s use the <strong>join()</strong> and <strong>outerjoin()</strong> methods to take a look at how to query related data. For example, to fulfill the order placed by the <strong>cookiemon</strong> user, we need to determine how many of each cookie type were ordered. This requires you to use a total of three joins to get all the way down to the name of the cookies.</p><p><strong><em>Using join to select from multiple tables</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> Cookie.cookie_name, LineItem.quantity,</span><br><span class="line"> LineItem.extended_cost)</span><br><span class="line">query = query.join(User).join(LineItem).join(Cookie)</span><br><span class="line">results = query.filter(User.username == <span class="string">'cookiemon'</span>).all()</span><br><span class="line">print(results)</span><br><span class="line">[</span><br><span class="line"> (<span class="string">u'1'</span>, <span class="string">u'cookiemon'</span>, <span class="string">u'111-111-1111'</span>, <span class="string">u'chocolate chip'</span>, <span class="number">2</span>, Decimal(<span class="string">'1.00'</span>))</span><br><span class="line"> (<span class="string">u'1'</span>, <span class="string">u'cookiemon'</span>, <span class="string">u'111-111-1111'</span>, <span class="string">u'peanut butter'</span>, <span class="number">12</span>, Decimal(<span class="string">'3.00'</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p> <strong><em>Using outerjoin to select from multiple tables</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> func</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>query=session.query(User.username, func.count(Order.order_id))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>query=query.outerjoin(Order).group_by(User.username)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(query)</span><br><span class="line">SELECT users.username AS users_username, count(orders.order_id) AS count_1 </span><br><span class="line">FROM users LEFT OUTER JOIN orders ON users.user_id = orders.user_id GROUP BY users.username</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> row <span class="keyword">in</span> query: print(row)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">(<span class="string">'cakeeater'</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">'cookiemon'</span>, <span class="number">0</span>)</span><br><span class="line">(<span class="string">'pieperson'</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>However, what if we have a self-referential table like a table of managers and their reports? The ORM allows us to establish a relationship that points to the same table; however, we need to specify an option called <strong>remote_side</strong> to make the relationship a many to one:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Employee</span><span class="params">(Base)</span>:</span></span><br><span class="line"><span class="meta">... </span>    __tablename__=<span class="string">'employees'</span></span><br><span class="line"><span class="meta">... </span>    id= Column(Integer(), primary_key= <span class="keyword">True</span>)</span><br><span class="line"><span class="meta">... </span>    manager_id= Column(Integer(), ForeignKey(<span class="string">'employees.id'</span>))</span><br><span class="line"><span class="meta">... </span>    name= Column(String(<span class="number">255</span>), nullable= <span class="keyword">False</span>)</span><br><span class="line"><span class="meta">... </span>    manager= relationship(<span class="string">'Employee'</span>,backref=backref(<span class="string">'reports'</span>), remote_side=[id])</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Establishes a relationship back to the same table, specifies the <strong>remote_side</strong>, and makes the relationship a many to one.</p><p><strong><em>add an employee and another employee that reports to her:</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">marsha = Employee(name=<span class="string">'Marsha'</span>)</span><br><span class="line">fred = Employee(name=<span class="string">'Fred'</span>)</span><br><span class="line">marsha.reports.append(fred)</span><br><span class="line">session.add(marsha)</span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure><p><strong><em>print the employees that report to Marsha, we would do so by accessing the reports property as follows:</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> report <span class="keyword">in</span> marsha.reports:</span><br><span class="line">    print(report.name)</span><br></pre></td></tr></table></figure><h3 id="Grouping"><a href="#Grouping" class="headerlink" title="Grouping"></a>Grouping</h3><p>When using grouping, you need one or more columns to group on and one or more<br>columns that it makes sense to aggregate with counts, sums, etc., as you would in<br>normal SQL.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">query = session.query(User.username, func.count(Order.order_id))</span><br><span class="line">query = query.outerjoin(Order).group_by(User.username)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> query:</span><br><span class="line"> print(row)</span><br></pre></td></tr></table></figure><h3 id="Chaining"><a href="#Chaining" class="headerlink" title="Chaining"></a>Chaining</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_orders_by_customer</span><span class="params">(cust_name)</span>:</span></span><br><span class="line">    query = session.query(Order.order_id, User.username, User.phone,</span><br><span class="line">    Cookie.cookie_name, LineItem.quantity,</span><br><span class="line">    LineItem.extended_cost)</span><br><span class="line">    query = query.join(User).join(LineItem).join(Cookie)</span><br><span class="line">    results = query.filter(User.username == cust_name).all()</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line">get_orders_by_customer(<span class="string">'cakeeater'</span>)</span><br><span class="line">[(<span class="string">u'2'</span>, <span class="string">u'cakeeater'</span>, <span class="string">u'222-222-2222'</span>, <span class="string">u'chocolate chip'</span>, <span class="number">24</span>, Decimal(<span class="string">'12.00'</span>)),</span><br><span class="line">(<span class="string">u'2'</span>, <span class="string">u'cakeeater'</span>, <span class="string">u'222-222-2222'</span>, <span class="string">u'oatmeal raisin'</span>, <span class="number">6</span>, Decimal(<span class="string">'6.00'</span>))]</span><br></pre></td></tr></table></figure><p><strong><em>Conditional chaining</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">get_orders_by_customer</span><span class="params">(cust_name, shipped= None, details= False)</span>:</span></span><br><span class="line"><span class="meta">... </span>    query= session.query(Order.order_id, User.username, User.phone)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>    query= query.join(User)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> details:</span><br><span class="line"><span class="meta">... </span>        query= query.add_columns(Cookie.cookie_name,LineItem.quantity,</span><br><span class="line"><span class="meta">... </span>                                 LineItem.extended_cost</span><br><span class="line"><span class="meta">... </span>                                 )</span><br><span class="line"><span class="meta">... </span>        query=query.join(LineItem).join(Cookie)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> shipped <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line"><span class="meta">... </span>        query= query.where(Order.shipped == shipped)</span><br><span class="line"><span class="meta">... </span>    results= query.filter(User.username== cust_name).all()</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> results</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>query= session.query(Order.order_id, User.username, User.phone)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>query= query.join(User)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(query)</span><br><span class="line">SELECT orders.order_id AS orders_order_id, users.username AS users_username, users.phone AS users_phone </span><br><span class="line">FROM orders JOIN users ON users.user_id = orders.user_id</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>query=query.join(LineItem).join(Cookie)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(query)</span><br><span class="line">SELECT orders.order_id AS orders_order_id, users.username AS users_username, users.phone AS users_phone </span><br><span class="line">FROM orders JOIN users ON users.user_id = orders.user_id JOIN line_items ON orders.order_id = line_items.order_id JOIN cookies ON cookies.cookie_id = line_items.cookie_id</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="Raw-Queries"><a href="#Raw-Queries" class="headerlink" title="Raw Queries"></a>Raw Queries</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> text</span><br><span class="line">query = session.query(User).filter(text(<span class="string">"username='cookiemon'"</span>))</span><br><span class="line">print(query.all())</span><br><span class="line">[User(username=<span class="string">'cookiemon'</span>, email_address=<span class="string">'mon@cookie.com'</span>,</span><br><span class="line"> phone=<span class="string">'111-111-1111'</span>, password=<span class="string">'password'</span>)]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;The-Session&quot;&gt;&lt;a href=&quot;#The-Session&quot; class=&quot;headerlink&quot; title=&quot;The Session&quot;&gt;&lt;/a&gt;The Session&lt;/h2&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
      <category term="sqlalchemy" scheme="blog.whistlestop.ml/tags/sqlalchemy/"/>
    
  </entry>
  
  <entry>
    <title>sqlalchemy_C06_Defining Schema with SQLAlchemy ORM</title>
    <link href="blog.whistlestop.ml/2018/05/25/sqlalchemy-C06-Defining-Schema-with-SQLAlchemy-ORM/"/>
    <id>blog.whistlestop.ml/2018/05/25/sqlalchemy-C06-Defining-Schema-with-SQLAlchemy-ORM/</id>
    <published>2018-05-26T05:29:45.000Z</published>
    <updated>2018-05-26T05:30:06.041Z</updated>
    
    <content type="html"><![CDATA[<p>In SQLAlchemy Core, we created a metadata container and then declared a <strong>Table</strong> object associated with that metadata. In SQLAlchemy ORM, we are going to define a class that inherits from a special base class called the <strong>declarative_base</strong>. The <strong>declarative_base</strong> combines a metadata container and a mapper that maps our class to a database table. It also maps instances of the class to records in that table if they have been saved.<br><a id="more"></a> </p><ul><li>Inherit from the <strong>declarative_base</strong> object.</li><li>Contain <strong>__tablename__</strong>, which is the table name to be used in the database.</li><li>Contain one or more attributes that are <strong>Column</strong> objects.</li><li>Ensure one or more attributes make up a primary key.</li></ul><p><strong><em>Defining Tables via ORM Classes</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Table, Column, Integer, Numeric, String, Boolean</span><br><span class="line"></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cookie</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'cookies'</span></span><br><span class="line"></span><br><span class="line">    cookie_id = Column(Integer(), primary_key=<span class="keyword">True</span>)</span><br><span class="line">    cookie_name = Column(String(<span class="number">50</span>), index=<span class="keyword">True</span>)</span><br><span class="line">    cookie_recipe_url = Column(String(<span class="number">255</span>))</span><br><span class="line">    cookie_sku = Column(String(<span class="number">55</span>))</span><br><span class="line">    quantity = Column(Integer())</span><br><span class="line">    unit_cost = Column(Numeric(<span class="number">12</span>, <span class="number">2</span>))</span><br><span class="line">Cookie.__table__</span><br><span class="line">Table(<span class="string">'cookies'</span>, MetaData(bind=<span class="keyword">None</span>), Column(<span class="string">'cookie_id'</span>, Integer(), table=&lt;cookies&gt;, primary_key=<span class="keyword">True</span>, nullable=<span class="keyword">False</span>), Column(<span class="string">'cookie_name'</span>, String(length=<span class="number">50</span>), table=&lt;cookies&gt;), Column(<span class="string">'cookie_recipe_url'</span>, String(length=<span class="number">255</span>), table=&lt;cookies&gt;), Column(<span class="string">'cookie_sku'</span>, String(length=<span class="number">55</span>), table=&lt;cookies&gt;), Column(<span class="string">'quantity'</span>, Integer(), table=&lt;cookies&gt;), Column(<span class="string">'unit_cost'</span>, Numeric(precision=<span class="number">12</span>, scale=<span class="number">2</span>), table=&lt;cookies&gt;), schema=<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> DateTime</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'users'</span></span><br><span class="line">    </span><br><span class="line">    user_id = Column(Integer(), primary_key=<span class="keyword">True</span>)</span><br><span class="line">    username = Column(String(<span class="number">15</span>), nullable=<span class="keyword">False</span>, unique=<span class="keyword">True</span>)</span><br><span class="line">    email_address = Column(String(<span class="number">255</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    phone = Column(String(<span class="number">20</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    password = Column(String(<span class="number">25</span>), nullable=<span class="keyword">False</span>)</span><br><span class="line">    created_on = Column(DateTime(), default=datetime.now)</span><br><span class="line">    updated_on = Column(DateTime(), default=datetime.now, onupdate=datetime.now)</span><br></pre></td></tr></table></figure><h3 id="Keys-Constraints-and-Indexes"><a href="#Keys-Constraints-and-Indexes" class="headerlink" title="Keys, Constraints, and Indexes"></a>Keys, Constraints, and Indexes</h3><p>When using the ORM, we are building classes and not using the table constructor. In the ORM, these can be added by using the <strong>__table_args__</strong> attribute on our class. <strong>__table_args__</strong> expects to get a tuple of additional table arguments.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeDataClass</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'somedatatable'</span></span><br><span class="line">    __table_args__ = (ForeignKeyConstraint([<span class="string">'id'</span>], [<span class="string">'other_table.id'</span>]),</span><br><span class="line">                      CheckConstraint(unit_cost &gt;= <span class="number">0.00</span><span class="string">',</span></span><br><span class="line"><span class="string">                                      name='</span>unit_cost_positive<span class="string">'))</span></span><br></pre></td></tr></table></figure><h3 id="Relationships"><a href="#Relationships" class="headerlink" title="Relationships"></a>Relationships</h3><p>The ORM uses a similar <strong>ForeignKey</strong> column to constrain and link the objects; however, it also uses a <strong>relationship</strong> directive to provide a property that can be used to access the related object.</p><p><strong><em>Table with a relationship</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> ForeignKey, Boolean</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> relationship, backref</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Order</span><span class="params">(Base)</span>:</span></span><br><span class="line"><span class="meta">... </span>    __tablename__=<span class="string">'orders'</span></span><br><span class="line"><span class="meta">... </span>    order_id = Column(Integer(), primary_key= <span class="keyword">True</span>)</span><br><span class="line"><span class="meta">... </span>    user_id = Column(Integer(), ForeignKey(<span class="string">'users.user_id'</span>))</span><br><span class="line"><span class="meta">... </span>    shipped= Column(Boolean(), default=<span class="keyword">False</span>)</span><br><span class="line"><span class="meta">... </span>    user= relationship(<span class="string">'User'</span>, backref=backref(<span class="string">'orders'</span>, order_by=order_id))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>Looking at the user relationship defined in the <strong>Order</strong> class, it establishes a one-to-many relationship with the <strong>User</strong> class. We can get the <strong>User</strong> related to this <strong>Order</strong> by accessing the <strong>user</strong> property. This relationship also establishes an <strong>orders</strong> property on the <strong>User</strong> class via the <strong>backref</strong> keyword argument, which is ordered by the <strong>order_id</strong>. The relationship directive needs a target class for the relationship, and can optionally include a back reference to be added to target class. SQLAlchemy knows to use the <strong>ForeignKey</strong> we defined that matches the class we defined in the relationship. In the preceding example, the <strong>ForeignKey(users.user_id)</strong>, which has the <strong>users</strong> table’s <strong>user_id</strong> column, maps to the <strong>User</strong> class via the <strong>__tablename__</strong> attribute of <strong>users</strong> and forms the relationship.</p><p><strong><em>More tables with relationships</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span><span class="params">(Base)</span>:</span></span><br><span class="line"><span class="meta">... </span>    __tablename__=<span class="string">'line_items'</span></span><br><span class="line"><span class="meta">... </span>    line_item_id= Column(Integer(), primary_key= <span class="keyword">True</span>)</span><br><span class="line"><span class="meta">... </span>    order_id= Column(Integer(),ForeignKey(<span class="string">'orders.order_id'</span>))</span><br><span class="line"><span class="meta">... </span>    cookie_id=Column(Integer(), ForeignKey(<span class="string">'cookies.cookie_id'</span>))</span><br><span class="line"><span class="meta">... </span>    quantity= Column(Integer())</span><br><span class="line"><span class="meta">... </span>    extended_cost=Column(Numeric(<span class="number">12</span>,<span class="number">2</span>))</span><br><span class="line"><span class="meta">... </span>    order = relationship(<span class="string">'Order'</span>,backref=backref(<span class="string">'line_items'</span>, order_by= line_item_id))</span><br><span class="line"><span class="meta">... </span>    cookie=relationship(<span class="string">'Cookie'</span>, uselist=<span class="keyword">False</span>) <span class="comment"># This establishes a one-to-one relationship.</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Persisting-the-Schema"><a href="#Persisting-the-Schema" class="headerlink" title="Persisting the Schema"></a>Persisting the Schema</h3><p>To create our database tables, we are going to use the <strong>create_all</strong> method on the metadata within our <strong>Base</strong> instance. It requires an instance of an <strong>engine</strong>, just as it did in SQLAlchemy Core:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>engine= create_engine(<span class="string">'sqlite:///:memory:'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Base.metadata.create_all(engine)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In SQLAlchemy Core, we created a metadata container and then declared a &lt;strong&gt;Table&lt;/strong&gt; object associated with that metadata. In SQLAlchemy ORM, we are going to define a class that inherits from a special base class called the &lt;strong&gt;declarative_base&lt;/strong&gt;. The &lt;strong&gt;declarative_base&lt;/strong&gt; combines a metadata container and a mapper that maps our class to a database table. It also maps instances of the class to records in that table if they have been saved.&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
      <category term="sqlalchemy" scheme="blog.whistlestop.ml/tags/sqlalchemy/"/>
    
  </entry>
  
  <entry>
    <title>sqlalchemy_C05_Reflection</title>
    <link href="blog.whistlestop.ml/2018/05/25/sqlalchemy-C05-Reflection/"/>
    <id>blog.whistlestop.ml/2018/05/25/sqlalchemy-C05-Reflection/</id>
    <published>2018-05-26T05:29:00.000Z</published>
    <updated>2018-05-26T05:29:25.879Z</updated>
    
    <content type="html"><![CDATA[<p>Reflection is a technique that allows us to populate a SQLAlchemy object from an existing database.<br><a id="more"></a> </p><h3 id="Reflecting-Individual-Tables"><a href="#Reflecting-Individual-Tables" class="headerlink" title="Reflecting Individual Tables"></a>Reflecting Individual Tables</h3><p>For our first reflection, we are going to generate the <strong>Artist</strong> table. We’ll need a <strong>metadata</strong> object to hold the reflected table schema information, and an <strong>engine</strong> attached to the Chinook database.</p><p><strong><em>Setting up our initial objects</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> MetaData, create_engine</span><br><span class="line">metadata = MetaData()</span><br><span class="line">engine = create_engine(<span class="string">'sqlite:///Chinook_Sqlite.sqlite'</span>)</span><br></pre></td></tr></table></figure></p><p>Instead of defining the columns by hand, we are going to use the <strong>autoload</strong> and <strong>autoload_with</strong> keyword arguments. This will reflect the schema information into the <strong>metadata</strong> object and store a reference to the table in the artist variable. </p><p><strong><em>Reflecting the Artist table</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Table</span><br><span class="line">artist = Table(<span class="string">'Artist'</span>, metadata, autoload=<span class="keyword">True</span>, autoload_with=engine)</span><br></pre></td></tr></table></figure><p><strong><em>Using the Artist table</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">artist.columns.keys() </span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> select</span><br><span class="line">s = select([artist]).limit(<span class="number">10</span>) </span><br><span class="line">engine.execute(s).fetchall()</span><br><span class="line">[(<span class="number">1</span>, <span class="string">'AC/DC'</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="string">'Accept'</span>),</span><br><span class="line"> (<span class="number">3</span>, <span class="string">'Aerosmith'</span>),</span><br><span class="line"> (<span class="number">4</span>, <span class="string">'Alanis Morissette'</span>),</span><br><span class="line"> (<span class="number">5</span>, <span class="string">'Alice In Chains'</span>),</span><br><span class="line"> (<span class="number">6</span>, <span class="string">'Antônio Carlos Jobim'</span>),</span><br><span class="line"> (<span class="number">7</span>, <span class="string">'Apocalyptica'</span>),</span><br><span class="line"> (<span class="number">8</span>, <span class="string">'Audioslave'</span>),</span><br><span class="line"> (<span class="number">9</span>, <span class="string">'BackBeat'</span>),</span><br><span class="line"> (<span class="number">10</span>, <span class="string">'Billy Cobham'</span>)]</span><br></pre></td></tr></table></figure><p><strong><em>Viewing the metadata</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">album = Table(<span class="string">'Album'</span>, metadata, autoload=<span class="keyword">True</span>, autoload_with=engine)</span><br><span class="line">metadata.tables[<span class="string">'album'</span>]</span><br><span class="line">Table(<span class="string">'album'</span>,</span><br><span class="line">      MetaData(bind=<span class="keyword">None</span>),</span><br><span class="line">      Column(<span class="string">'AlbumId'</span>, INTEGER(), table=&lt;album&gt;, primary_key=<span class="keyword">True</span>, nullable=<span class="keyword">False</span>),</span><br><span class="line">      Column(<span class="string">'Title'</span>, NVARCHAR(length=<span class="number">160</span>), table=&lt;album&gt;, nullable=<span class="keyword">False</span>),</span><br><span class="line">      Column(<span class="string">'ArtistId'</span>, INTEGER(), table=&lt;album&gt;, nullable=<span class="keyword">False</span>),</span><br><span class="line">             schema=<span class="keyword">None</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p><strong><em>the foreign key to the Artist table does not appear to have been reflected.</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span>: album.foreign_keys</span><br><span class="line">out: set()</span><br></pre></td></tr></table></figure><p><strong><em>add the missing ForeignKey, and restore the relationship:</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> ForeignKeyConstraint</span><br><span class="line">album.append_constraint(</span><br><span class="line">    ForeignKeyConstraint([<span class="string">'ArtistId'</span>], [<span class="string">'artist.ArtistId'</span>])</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p><strong><em>use the relationship to join the tables properly</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str(artist.join(album))</span><br><span class="line"><span class="string">'artist JOIN album ON artist.'</span>ArtistId<span class="string">' = album.'</span>ArtistId<span class="string">''</span></span><br></pre></td></tr></table></figure><h3 id="Reflecting-a-Whole-Database"><a href="#Reflecting-a-Whole-Database" class="headerlink" title="Reflecting a Whole Database"></a>Reflecting a Whole Database</h3><p>In order to reflect a whole database, we can use the <strong>reflect</strong> method on the <strong>metadata</strong> object. The <strong>reflect</strong> method will scan everything available on the engine supplied, and reflect everything it can. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">metadata.reflect(bind=engine)</span><br><span class="line">metadata.tables.keys()</span><br><span class="line">dict_keys([<span class="string">'InvoiceLine'</span>, <span class="string">'Employee'</span>, <span class="string">'Invoice'</span>, <span class="string">'album'</span>, <span class="string">'Genre'</span>,</span><br><span class="line">           <span class="string">'PlaylistTrack'</span>, <span class="string">'Album'</span>, <span class="string">'Customer'</span>, <span class="string">'MediaType'</span>, <span class="string">'Artist'</span>,</span><br><span class="line">           <span class="string">'Track'</span>, <span class="string">'artist'</span>, <span class="string">'Playlist'</span>])</span><br></pre></td></tr></table></figure><h3 id="Query-Building-with-Reflected-Objects"><a href="#Query-Building-with-Reflected-Objects" class="headerlink" title="Query Building with Reflected Objects"></a>Query Building with Reflected Objects</h3><p><strong><em>Using a reflected table in query</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">playlist = metadata.tables[<span class="string">'Playlist'</span>] </span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> select</span><br><span class="line">s = select([playlist]).limit(<span class="number">10</span>) </span><br><span class="line">engine.execute(s).fetchall()</span><br><span class="line">[(<span class="number">1</span>, <span class="string">'Music'</span>),</span><br><span class="line"> (<span class="number">2</span>, <span class="string">'Movies'</span>),</span><br><span class="line"> (<span class="number">3</span>, <span class="string">'TV Shows'</span>),</span><br><span class="line"> (<span class="number">4</span>, <span class="string">'Audiobooks'</span>),</span><br><span class="line"> (<span class="number">5</span>, <span class="string">'90’s Music'</span>),</span><br><span class="line"> (<span class="number">6</span>, <span class="string">'Audiobooks'</span>),</span><br><span class="line"> (<span class="number">7</span>, <span class="string">'Movies'</span>),</span><br><span class="line"> (<span class="number">8</span>, <span class="string">'Music'</span>),</span><br><span class="line"> (<span class="number">9</span>, <span class="string">'Music Videos'</span>),</span><br><span class="line"> (<span class="number">10</span>, <span class="string">'TV Shows'</span>)]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Reflection is a technique that allows us to populate a SQLAlchemy object from an existing database.&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
      <category term="sqlalchemy" scheme="blog.whistlestop.ml/tags/sqlalchemy/"/>
    
  </entry>
  
  <entry>
    <title>sqlalchemy_C04_Testing</title>
    <link href="blog.whistlestop.ml/2018/05/25/sqlalchemy-C04-Testing/"/>
    <id>blog.whistlestop.ml/2018/05/25/sqlalchemy-C04-Testing/</id>
    <published>2018-05-26T05:28:15.000Z</published>
    <updated>2018-05-26T05:28:39.833Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>db.py</em></strong><br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> MetaData, Table, Column, Integer, Numeric, String, DateTime, ForeignKey, Boolean, create_engine</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> insert</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataAccessLayer</span>:</span></span><br><span class="line">    connection = <span class="keyword">None</span></span><br><span class="line">    engine =  <span class="keyword">None</span></span><br><span class="line">    conn_string = <span class="keyword">None</span></span><br><span class="line">    metadata= MetaData()</span><br><span class="line"></span><br><span class="line">    cookies= Table(<span class="string">'cookies'</span>, metadata,</span><br><span class="line">        Column(<span class="string">'cookie_id'</span>,Integer(), primary_key= <span class="keyword">True</span>),</span><br><span class="line">        Column(<span class="string">'cookie_name'</span>,String(<span class="number">50</span>), index= <span class="keyword">True</span>),</span><br><span class="line">        Column(<span class="string">'cookie_recipe_url'</span>,String(<span class="number">255</span>)),</span><br><span class="line">        Column(<span class="string">'cookie_sku'</span>, String(<span class="number">55</span>)),</span><br><span class="line">        Column(<span class="string">'quantity'</span>, Integer()),</span><br><span class="line">        Column(<span class="string">'unit_cost'</span>,Numeric(<span class="number">12</span>,<span class="number">2</span>))</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    users = Table(<span class="string">'users'</span>, metadata,</span><br><span class="line">        Column(<span class="string">'user_id'</span>, Integer(), primary_key=<span class="keyword">True</span>),</span><br><span class="line">        Column(<span class="string">'customer_number'</span>, Integer(), autoincrement=<span class="keyword">True</span>),</span><br><span class="line">        Column(<span class="string">'username'</span>, String(<span class="number">15</span>), nullable=<span class="keyword">False</span>, unique=<span class="keyword">True</span>),</span><br><span class="line">        Column(<span class="string">'email_address'</span>, String(<span class="number">255</span>), nullable=<span class="keyword">False</span>),</span><br><span class="line">        Column(<span class="string">'phone'</span>, String(<span class="number">20</span>), nullable=<span class="keyword">False</span>),</span><br><span class="line">        Column(<span class="string">'password'</span>, String(<span class="number">25</span>), nullable=<span class="keyword">False</span>),</span><br><span class="line">        Column(<span class="string">'created_on'</span>, DateTime(), default=datetime.now),</span><br><span class="line">        Column(<span class="string">'updated_on'</span>, DateTime(), default=datetime.now, onupdate=datetime.now)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    orders = Table(<span class="string">'orders'</span>, metadata,</span><br><span class="line">        Column(<span class="string">'order_id'</span>, Integer()),</span><br><span class="line">        Column(<span class="string">'user_id'</span>, ForeignKey(<span class="string">'users.user_id'</span>)),</span><br><span class="line">        Column(<span class="string">'shipped'</span>, Boolean(), default=<span class="keyword">False</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    line_items = Table(<span class="string">'line_items'</span>, metadata,</span><br><span class="line">        Column(<span class="string">'line_items_id'</span>, Integer(), primary_key=<span class="keyword">True</span>),</span><br><span class="line">        Column(<span class="string">'order_id'</span>, ForeignKey(<span class="string">'orders.order_id'</span>)),</span><br><span class="line">        Column(<span class="string">'cookie_id'</span>, ForeignKey(<span class="string">'cookies.cookie_id'</span>)),</span><br><span class="line">        Column(<span class="string">'quantity'</span>, Integer()),</span><br><span class="line">        Column(<span class="string">'extended_cost'</span>, Numeric(<span class="number">12</span>, <span class="number">2</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_init</span><span class="params">(self, conn_string)</span>:</span></span><br><span class="line">        self.engine= create_engine(conn_string <span class="keyword">or</span> self.conn_string)</span><br><span class="line">        self.metadata.create_all(self.engine)</span><br><span class="line">        self.connection= self.engine.connect()</span><br><span class="line"></span><br><span class="line">dal= DataAccessLayer()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prep_db</span><span class="params">()</span>:</span></span><br><span class="line">    ins= dal.cookies.insert()</span><br><span class="line">    dal.connection.execute(ins, </span><br><span class="line">                           cookie_name=<span class="string">'dark chocolate ship'</span>,</span><br><span class="line">                           cookie_recipe_url=<span class="string">'http://some.aweso.me/cookie/recipe_dark.html'</span>,</span><br><span class="line">                           cookie_sku=<span class="string">'CC02'</span>,</span><br><span class="line">                           quantity=<span class="string">'1'</span>,</span><br><span class="line">                           unit_cost=<span class="string">'0.75'</span>)</span><br><span class="line">    inventory_list=[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'cookie_name'</span>: <span class="string">'peanut butter'</span>,</span><br><span class="line">            <span class="string">'cookie_recipe_url'</span>: <span class="string">'http://some.aweso.me/cookie/peanut.html'</span>,</span><br><span class="line">            <span class="string">'cookie_sku'</span>: <span class="string">'PB01'</span>,</span><br><span class="line">            <span class="string">'quantity'</span>: <span class="string">'24'</span>,</span><br><span class="line">            <span class="string">'unit_cost'</span>: <span class="string">'0.25'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'cookie_name'</span>: <span class="string">'oatmeal raisin'</span>,</span><br><span class="line">            <span class="string">'cookie_recipe_url'</span>: <span class="string">'http://some.okay.me/cookie/raisin.html'</span>,</span><br><span class="line">            <span class="string">'cookie_sku'</span>: <span class="string">'EWW01'</span>,</span><br><span class="line">            <span class="string">'quantity'</span>: <span class="string">'100'</span>,</span><br><span class="line">            <span class="string">'unit_cost'</span>: <span class="string">'1.00'</span></span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    dal.connection.execute(ins, inventory_list)</span><br><span class="line"></span><br><span class="line">    customer_list=[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'username'</span>: <span class="string">'cookiemon'</span>,</span><br><span class="line">            <span class="string">'email_address'</span>: <span class="string">'mon@cookie.com'</span>,</span><br><span class="line">            <span class="string">'phone'</span>: <span class="string">'111-111-1111'</span>,</span><br><span class="line">            <span class="string">'password'</span>: <span class="string">'password'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'username'</span>: <span class="string">'cakeeater'</span>,</span><br><span class="line">            <span class="string">'email_address'</span>: <span class="string">'cakeeater@cake.com'</span>,</span><br><span class="line">            <span class="string">'phone'</span>: <span class="string">'222-222-2222'</span>,</span><br><span class="line">            <span class="string">'password'</span>: <span class="string">'password'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'username'</span>: <span class="string">'pieguy'</span>,</span><br><span class="line">            <span class="string">'email_address'</span>: <span class="string">'guy@pie.com'</span>,</span><br><span class="line">            <span class="string">'phone'</span>: <span class="string">'333-333-3333'</span>,</span><br><span class="line">            <span class="string">'password'</span>: <span class="string">'password'</span></span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">    ins=dal.users.insert()</span><br><span class="line">    dal.connection.execute(ins, customer_list)</span><br><span class="line">    </span><br><span class="line">    ins= insert(dal.orders).values(user_id=<span class="number">1</span>, order_id=<span class="string">'wlk001'</span>)</span><br><span class="line">    dal.connection.execute(ins)</span><br><span class="line"></span><br><span class="line">    ins=insert(dal.line_items)</span><br><span class="line">    order_items=[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'order_id'</span>: <span class="string">'wlk001'</span>,</span><br><span class="line">            <span class="string">'cookie_id'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'quantity'</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">'extended_cost'</span>: <span class="number">1.00</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'order_id'</span>: <span class="string">'wlk001'</span>,</span><br><span class="line">            <span class="string">'cookie_id'</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">'quantity'</span>: <span class="number">12</span>,</span><br><span class="line">            <span class="string">'extended_cost'</span>: <span class="number">3.00</span></span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">    dal.connection.execute(ins, order_items)</span><br><span class="line"></span><br><span class="line">    ins= insert(dal.orders).values(user_id =<span class="number">2</span>, order_id=<span class="string">'o1001'</span>)</span><br><span class="line">    dal.connection.execute(ins)</span><br><span class="line"></span><br><span class="line">    ins=insert(dal.line_items)</span><br><span class="line">    order_items=[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'order_id'</span>: <span class="string">'ol001'</span>,</span><br><span class="line">            <span class="string">'cookie_id'</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">'quantity'</span>: <span class="number">24</span>,</span><br><span class="line">            <span class="string">'extended_cost'</span>: <span class="number">12.00</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'order_id'</span>: <span class="string">'ol001'</span>,</span><br><span class="line">            <span class="string">'cookie_id'</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="string">'quantity'</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="string">'extended_cost'</span>: <span class="number">6.00</span></span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">    dal.connection.execute(ins, order_items)</span><br></pre></td></tr></table></figure></p><p><strong><em>app.py</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> dal</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> select</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_orders_by_customer</span><span class="params">(cust_name, shipped=None, details=False)</span>:</span></span><br><span class="line">    columns=[</span><br><span class="line">        dal.orders.c.order_id,</span><br><span class="line">        dal.users.c.username,</span><br><span class="line">        dal.users.c.phone</span><br><span class="line">        ]</span><br><span class="line">    joins=dal.users.join(dal.orders)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> details:</span><br><span class="line">        columns.extend([</span><br><span class="line">            dal.cookies.c.cookie_name,</span><br><span class="line">            dal.line_items.c.quantity,</span><br><span class="line">            dal.line_items.c.extended_cost</span><br><span class="line">            ])</span><br><span class="line">        joins=joins.join(dal.line_items).join(dal.cookies)</span><br><span class="line"></span><br><span class="line">    cust_orders=select(columns).select_from(</span><br><span class="line">        joins</span><br><span class="line">        ).where(</span><br><span class="line">            dal.users.c.username == cust_name</span><br><span class="line">            )</span><br><span class="line">    <span class="keyword">if</span> shipped <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        cust_orders=cust_orders.where(</span><br><span class="line">            dal.orders.c.shipped == shipped</span><br><span class="line">            )</span><br><span class="line">    <span class="keyword">return</span> dal.connection.execute(cust_orders).fetchall()</span><br></pre></td></tr></table></figure><p><strong>_test_app.py_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> db <span class="keyword">import</span> dal, prep_db</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> get_orders_by_customer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestApp</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">        dal.db_init(<span class="string">'sqlite:///:memory:'</span>)</span><br><span class="line">        prep_db()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_orders_by_customer_blank</span><span class="params">(self)</span>:</span></span><br><span class="line">        results= get_orders_by_customer(<span class="string">''</span>)</span><br><span class="line">        self.assertEqual(results,[])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_orders_by_customer_blank_shipped</span><span class="params">(self)</span>:</span></span><br><span class="line">        results=get_orders_by_customer(<span class="string">''</span>,<span class="keyword">True</span>)</span><br><span class="line">        self.assertEqual(results, [])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_orders_by_customer_blank_notshipped</span><span class="params">(self)</span>:</span></span><br><span class="line">        results = get_orders_by_customer(<span class="string">''</span>, <span class="keyword">False</span>)</span><br><span class="line">        self.assertEqual(results, [])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_orders_by_customer_blank_details</span><span class="params">(self)</span>:</span></span><br><span class="line">        results = get_orders_by_customer(<span class="string">''</span>, details=<span class="keyword">True</span>)</span><br><span class="line">        self.assertEqual(results, [])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_orders_by_customer_blank_shipped_details</span><span class="params">(self)</span>:</span></span><br><span class="line">        results = get_orders_by_customer(<span class="string">''</span>, <span class="keyword">True</span>, <span class="keyword">True</span>)</span><br><span class="line">        self.assertEqual(results, [])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_orders_by_customer_blank_notshipped_details</span><span class="params">(self)</span>:</span></span><br><span class="line">        results = get_orders_by_customer(<span class="string">''</span>, <span class="keyword">False</span>, <span class="keyword">True</span>)</span><br><span class="line">        self.assertEqual(results, [])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_orders_by_customer</span><span class="params">(self)</span>:</span></span><br><span class="line">        expected_results = [(<span class="string">u'wlk001'</span>, <span class="string">u'cookiemon'</span>, <span class="string">u'111-111-1111'</span>)]</span><br><span class="line">        results = get_orders_by_customer(<span class="string">'cookiemon'</span>)</span><br><span class="line">        self.assertEqual(results, expected_results)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_orders_by_customer_shipped_only</span><span class="params">(self)</span>:</span></span><br><span class="line">        results = get_orders_by_customer(<span class="string">'cookiemon'</span>, <span class="keyword">True</span>)</span><br><span class="line">        self.assertEqual(results, [])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_orders_by_customer_unshipped_only</span><span class="params">(self)</span>:</span></span><br><span class="line">        expected_results = [(<span class="string">u'wlk001'</span>, <span class="string">u'cookiemon'</span>, <span class="string">u'111-111-1111'</span>)]</span><br><span class="line">        results = get_orders_by_customer(<span class="string">'cookiemon'</span>, <span class="keyword">False</span>)</span><br><span class="line">        self.assertEqual(results, expected_results)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_orders_by_customer_with_details</span><span class="params">(self)</span>:</span></span><br><span class="line">        expected_results = [</span><br><span class="line">            (<span class="string">u'wlk001'</span>, <span class="string">u'cookiemon'</span>, <span class="string">u'111-111-1111'</span>, <span class="string">u'dark chocolate chip'</span>,</span><br><span class="line">             <span class="number">2</span>, Decimal(<span class="string">'1.00'</span>)),</span><br><span class="line">            (<span class="string">u'wlk001'</span>, <span class="string">u'cookiemon'</span>, <span class="string">u'111-111-1111'</span>, <span class="string">u'oatmeal raisin'</span>,</span><br><span class="line">             <span class="number">12</span>, Decimal(<span class="string">'3.00'</span>))</span><br><span class="line">        ]</span><br><span class="line">        results = get_orders_by_customer(<span class="string">'cookiemon'</span>, details=<span class="keyword">True</span>)</span><br><span class="line">        self.assertEqual(results, expected_results)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_orders_by_customer_shipped_only_with_details</span><span class="params">(self)</span>:</span></span><br><span class="line">        results = get_orders_by_customer(<span class="string">'cookiemon'</span>, <span class="keyword">True</span>, <span class="keyword">True</span>)</span><br><span class="line">        self.assertEqual(results, [])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_orders_by_customer_unshipped_only_details</span><span class="params">(self)</span>:</span></span><br><span class="line">        expected_results = [</span><br><span class="line">            (<span class="string">u'wlk001'</span>, <span class="string">u'cookiemon'</span>, <span class="string">u'111-111-1111'</span>, <span class="string">u'dark chocolate chip'</span>,</span><br><span class="line">             <span class="number">2</span>, Decimal(<span class="string">'1.00'</span>)),</span><br><span class="line">            (<span class="string">u'wlk001'</span>, <span class="string">u'cookiemon'</span>, <span class="string">u'111-111-1111'</span>, <span class="string">u'oatmeal raisin'</span>,</span><br><span class="line">             <span class="number">12</span>, Decimal(<span class="string">'3.00'</span>))</span><br><span class="line">        ]</span><br><span class="line">        results = get_orders_by_customer(<span class="string">'cookiemon'</span>, <span class="keyword">False</span>, <span class="keyword">True</span>)</span><br><span class="line">        self.assertEqual(results, expected_results)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;db.py&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
      <category term="sqlalchemy" scheme="blog.whistlestop.ml/tags/sqlalchemy/"/>
    
  </entry>
  
  <entry>
    <title>sqlalchemy_C03_Exceptions and Transaction</title>
    <link href="blog.whistlestop.ml/2018/05/25/sqlalchemy-C03-Exceptions-and-Transaction/"/>
    <id>blog.whistlestop.ml/2018/05/25/sqlalchemy-C03-Exceptions-and-Transaction/</id>
    <published>2018-05-26T05:27:26.000Z</published>
    <updated>2018-05-26T05:27:58.880Z</updated>
    
    <content type="html"><![CDATA[<h3 id="AttributeError"><a href="#AttributeError" class="headerlink" title="AttributeError"></a>AttributeError</h3><p><strong>AttributeErrors</strong> occur when you try to access an attribute of an object that isn’t present on that object.<br><a id="more"></a><br><strong><em>Causing an AttributeError</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> select, insert</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ins= insert(users).values(</span><br><span class="line"><span class="meta">... </span>    username=<span class="string">'cookiemon'</span>,</span><br><span class="line"><span class="meta">... </span>    email_address=<span class="string">'mon@cookie.com'</span>,</span><br><span class="line"><span class="meta">... </span>    phone=<span class="string">'111-111-1111'</span>,</span><br><span class="line"><span class="meta">... </span>    password=<span class="string">'password'</span></span><br><span class="line"><span class="meta">... </span>    )</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result=connection.execute(ins)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=select([users.c.username])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>results=connection.execute(s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line"><span class="meta">... </span>    print(result.username,result.password)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: Could <span class="keyword">not</span> locate column <span class="keyword">in</span> row <span class="keyword">for</span> column <span class="string">'password'</span></span><br></pre></td></tr></table></figure><p>In this case, it is because our row from the <strong>ResultProxy</strong> does not have a <strong>password</strong> column. We only queried for the <strong>username</strong>.</p><h3 id="IntegrityError"><a href="#IntegrityError" class="headerlink" title="IntegrityError"></a>IntegrityError</h3><p>Another common SQLAlchemy error is the <strong>IntegrityError</strong>, which occurs when we try to do something that would violate the constraints configured on a Column or Table. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=select([users.c.username])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>connection.execute(s).fetchall()</span><br><span class="line">[(<span class="string">'cookiemon'</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ins= insert(users).values(</span><br><span class="line"><span class="meta">... </span>    username= <span class="string">'cookiemon'</span>,</span><br><span class="line"><span class="meta">... </span>    email_address=<span class="string">'damon@cookie.com'</span>,</span><br><span class="line"><span class="meta">... </span>    phone=<span class="string">'111-111-1111'</span>,</span><br><span class="line"><span class="meta">... </span>    password=<span class="string">'password'</span></span><br><span class="line"><span class="meta">... </span>    )</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>results=connection.execute(ins)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">sqlite3.IntegrityError: UNIQUE constraint failed: users.username</span><br></pre></td></tr></table></figure><h3 id="handling-Errors"><a href="#handling-Errors" class="headerlink" title="handling Errors"></a>handling Errors</h3><p><strong><em>Catching an exception</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy.exc <span class="keyword">import</span> IntegrityError</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ins= insert(users).values(</span><br><span class="line"><span class="meta">... </span>    username= <span class="string">'cookiemon'</span>,</span><br><span class="line"><span class="meta">... </span>    email_address=<span class="string">'damon@cookie.com'</span>,</span><br><span class="line"><span class="meta">... </span>    phone=<span class="string">'111-111-1111'</span>,</span><br><span class="line"><span class="meta">... </span>    password=<span class="string">'password'</span></span><br><span class="line"><span class="meta">... </span>    )</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>: result= connection.execute(ins)</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> IntegrityError <span class="keyword">as</span> error:</span><br><span class="line"><span class="meta">... </span>    print(error.orig.message, error.params)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h3><p>When we start a transaction, we record the current state of our database; then we can execute multiple SQL statements. If all the SQL statements in the transaction succeed, the database continues on normally and we discard the prior database state. </p><p>However, if one or more of those statements fail, we can catch that error and use the prior state to roll back back any statements that succeeded.</p><p>Transactions are initiated by calling the <strong>begin()</strong> method on the connection object. The result of this call is a transaction object that we can use to control the result of all our statements. If all our statements are successful, we commit the transaction by calling the <strong>commit()</strong> method on the transaction object. If not, we call the <strong>rollback()</strong> method on that same object. Let’s rewrite the <strong>ship_it</strong> function to use a transaction to safely execute our statements.</p><p><strong>_Transactional ship_it_</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.exc <span class="keyword">import</span> IntegrityError </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ship_it</span><span class="params">(order_id)</span>:</span></span><br><span class="line">    s = select([line_items.c.cookie_id, line_items.c.quantity])</span><br><span class="line">    s = s.where(line_items.c.order_id == order_id)</span><br><span class="line">    transaction = connection.begin() </span><br><span class="line">    cookies_to_ship = connection.execute(s).fetchall() </span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> cookie <span class="keyword">in</span> cookies_to_ship:</span><br><span class="line">            u = update(cookies).where(cookies.c.cookie_id == cookie.cookie_id)</span><br><span class="line">            u = u.values(quantity = cookies.c.quantity-cookie.quantity)</span><br><span class="line">            result = connection.execute(u)</span><br><span class="line">        u = update(orders).where(orders.c.order_id == order_id)</span><br><span class="line">        u = u.values(shipped=<span class="keyword">True</span>)</span><br><span class="line">        result = connection.execute(u)</span><br><span class="line">        print(<span class="string">'Shipped order ID: &#123;&#125;'</span>.format(order_id))</span><br><span class="line">        transaction.commit() </span><br><span class="line">    <span class="keyword">except</span> IntegrityError <span class="keyword">as</span> error:</span><br><span class="line">        transaction.rollback() </span><br><span class="line">        print(error)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;AttributeError&quot;&gt;&lt;a href=&quot;#AttributeError&quot; class=&quot;headerlink&quot; title=&quot;AttributeError&quot;&gt;&lt;/a&gt;AttributeError&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;AttributeErrors&lt;/strong&gt; occur when you try to access an attribute of an object that isn’t present on that object.&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
      <category term="sqlalchemy" scheme="blog.whistlestop.ml/tags/sqlalchemy/"/>
    
  </entry>
  
  <entry>
    <title>sqlalchemy_C02_Built-In SQL Functions and Labels</title>
    <link href="blog.whistlestop.ml/2018/05/25/sqlalchemy-C02-Built-In-SQL-Functions-and-Labels/"/>
    <id>blog.whistlestop.ml/2018/05/25/sqlalchemy-C02-Built-In-SQL-Functions-and-Labels/</id>
    <published>2018-05-26T05:26:16.000Z</published>
    <updated>2018-05-26T05:27:04.207Z</updated>
    
    <content type="html"><![CDATA[<p> Two very commonly used database functions are <strong>SUM()</strong> and <strong>COUNT()</strong>. To use these functions, we need to import the <strong>sqlalchemy.sql.func</strong> module where they are found. These functions are wrapped around the column(s) on which they are operating.<br><a id="more"></a><br><strong><em>Summing our cookies</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> func</span><br><span class="line">s= select([func.sum(cookies.c.quantity)])</span><br><span class="line">rp= connection.execute(s)</span><br><span class="line">print(rp.scalar())</span><br><span class="line"><span class="comment"># Notice the use of scalar, which will return only the leftmost column in the first record.This results in: 137</span></span><br></pre></td></tr></table></figure><p><strong><em>Counting our inventory records</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s= select([func.count(cookies.c.cookie_name)])</span><br><span class="line">rp= connection.execute(s)</span><br><span class="line">record= rp.first()</span><br><span class="line">print(record.keys())</span><br><span class="line">print(record.count_1) <span class="comment"># The column name is autogenerated and is commonly &lt;func_name&gt;_&lt;position&gt;</span></span><br></pre></td></tr></table></figure><p><strong><em>Renaming our count column</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">s= select([func.count(cookies.c.cookie_name).label(<span class="string">'inventory_count'</span>)])</span><br><span class="line">rp= connection.execute(s)</span><br><span class="line">record= rp.first()</span><br><span class="line">print(record.keys())</span><br><span class="line">print(record.inventory_count)</span><br></pre></td></tr></table></figure></p><h3 id="Filtering"><a href="#Filtering" class="headerlink" title="Filtering"></a>Filtering</h3><p>Filtering queries is done by adding <strong>where()</strong> statements just like in SQL. A typical <strong>where()</strong> clause has a column, an operator, and a value or column. It is possible to chain multiple <strong>where()</strong> clauses together, and they will act like ANDs in traditional SQL statements.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s= select([cookies]).where( cookies.c.cookie_name == <span class="string">'chocolate chip'</span>)</span><br><span class="line">rp= connection.execute(s)</span><br><span class="line">record= rp.first()</span><br><span class="line">print(record.items())</span><br><span class="line"><span class="comment"># calling the items() method on the row object, which will give a list of columns and values.</span></span><br></pre></td></tr></table></figure><p><strong><em>Finding names with chocolate in them</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s= select([cookies]).where( cookies.c.cookie_name.like(<span class="string">'%chocolate%'</span>))</span><br><span class="line">rp= connection.execute(s)</span><br><span class="line"><span class="keyword">for</span> record <span class="keyword">in</span> rp.fetchall():</span><br><span class="line">    print(record.cookie_name)</span><br></pre></td></tr></table></figure><p><strong><em>String concatenation with +</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">s= select([cookies.c.cookie_name, <span class="string">'SKU-'</span>+ cookies.c.cookie_sku])</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> connection.execute(s): print(row)</span><br></pre></td></tr></table></figure></p><p><strong><em>Inventory value by cookie</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> cast</span><br><span class="line">s= select([</span><br><span class="line"><span class="meta">... </span>    cookies.c.cookie_name,</span><br><span class="line"><span class="meta">... </span>    cast((cookies.c.quantity* cookies.c.unit_cost),Numeric(<span class="number">12</span>,<span class="number">2</span>)).label(<span class="string">'inv_cost'</span>)</span><br><span class="line"><span class="meta">... </span>    ])</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> connection.execute(s): print(<span class="string">'&#123;&#125; - &#123;&#125;'</span>.format(row.cookie_name, row.inv_cost))</span><br></pre></td></tr></table></figure><p><strong><em>Using the and() conjunction</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> and_, or_, not_</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s= select([cookies]).where(</span><br><span class="line"><span class="meta">... </span>    and_(</span><br><span class="line"><span class="meta">... </span>        cookies.c.quantity &gt; <span class="number">23</span>,</span><br><span class="line"><span class="meta">... </span>        cookies.c.unit_cost &lt; <span class="number">0.40</span></span><br><span class="line"><span class="meta">... </span>        )</span><br><span class="line"><span class="meta">... </span>    )</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> connection.execute(s): print(row.cookie_name)</span><br></pre></td></tr></table></figure><p><strong><em>Using the or() conjunction</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> and_, or_, not_</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s= select([cookies]).where(</span><br><span class="line"><span class="meta">... </span>    or_(</span><br><span class="line"><span class="meta">... </span>        cookies.c.quantity.between(<span class="number">10</span>, <span class="number">50</span>),</span><br><span class="line"><span class="meta">... </span>        cookies.c.cookie_name.contains(<span class="string">'chip'</span>)</span><br><span class="line"><span class="meta">... </span>        )</span><br><span class="line"><span class="meta">... </span>    )</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> connection.execute(s): print(row.cookie_name)</span><br></pre></td></tr></table></figure><h3 id="Updating-Data"><a href="#Updating-Data" class="headerlink" title="Updating Data"></a>Updating Data</h3><p><strong><em>Updating data</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> update</span><br><span class="line">u= update(cookies).where(cookies.c.cookie_name == <span class="string">'chocolate chip'</span>)</span><br><span class="line">u=u.values(quantity=(cookies.c.quantity + <span class="number">120</span>))</span><br><span class="line">result= connection.execute(u)</span><br><span class="line">print(result.rowcount)</span><br><span class="line">s=select([cookies]).where(cookies.c.cookie_name == <span class="string">'chocolate chip'</span>)</span><br><span class="line">result= connection.execute(s).first()</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> result.keys(): print(<span class="string">'&#123;:&gt;20&#125;: &#123;&#125;'</span>.format(key, result[key]))</span><br></pre></td></tr></table></figure></p><h3 id="Deleting-Data"><a href="#Deleting-Data" class="headerlink" title="Deleting Data"></a>Deleting Data</h3><p> <strong><em>Deleting data</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> delete</span><br><span class="line">u=delete(cookies).where(cookies.c.cookie_name == <span class="string">'dark chocolate chip'</span>)</span><br><span class="line">result= connection.execute(u)</span><br><span class="line">print(result.rowcount)</span><br><span class="line"></span><br><span class="line">customer_list = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'username'</span>: <span class="string">'cookiemon'</span>,</span><br><span class="line">        <span class="string">'email_address'</span>: <span class="string">'mon@cookie.com'</span>,</span><br><span class="line">        <span class="string">'phone'</span>: <span class="string">'111-111-1111'</span>,</span><br><span class="line">        <span class="string">'password'</span>: <span class="string">'password'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'username'</span>: <span class="string">'cakeeater'</span>,</span><br><span class="line">        <span class="string">'email_address'</span>: <span class="string">'cakeeater@cake.com'</span>,</span><br><span class="line">        <span class="string">'phone'</span>: <span class="string">'222-222-2222'</span>,</span><br><span class="line">        <span class="string">'password'</span>: <span class="string">'password'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'username'</span>: <span class="string">'pieguy'</span>,</span><br><span class="line">        <span class="string">'email_address'</span>: <span class="string">'guy@pie.com'</span>,</span><br><span class="line">        <span class="string">'phone'</span>: <span class="string">'333-333-3333'</span>,</span><br><span class="line">        <span class="string">'password'</span>: <span class="string">'password'</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">ins = users.insert()</span><br><span class="line">result = connection.execute(ins, customer_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Now that we have customers, we can start to enter their orders and line items into the system as well:</span></span><br><span class="line"></span><br><span class="line">ins= insert(orders).values(user_id =<span class="number">1</span>, order_id =<span class="number">1</span>)</span><br><span class="line">result= connection.execute(ins)</span><br><span class="line">ins= insert(line_items)</span><br><span class="line">order_items = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'order_id'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'cookie_id'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'quantity'</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">'extended_cost'</span>: <span class="number">1.00</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'order_id'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'cookie_id'</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">'quantity'</span>: <span class="number">12</span>,</span><br><span class="line">        <span class="string">'extended_cost'</span>: <span class="number">3.00</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">result= connection.execute(ins, order_items)</span><br><span class="line">ins= insert(orders).values(user_id =<span class="number">2</span>, order_id = <span class="number">2</span>)</span><br><span class="line">result- connection.execute(ins)</span><br><span class="line">ins=insert(line_items)</span><br><span class="line">order_items = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'order_id'</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">'cookie_id'</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">'quantity'</span>: <span class="number">24</span>,</span><br><span class="line">        <span class="string">'extended_cost'</span>: <span class="number">12.00</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="string">'order_id'</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">'cookie_id'</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="string">'quantity'</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="string">'extended_cost'</span>: <span class="number">6.00</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">result= connection.execute(ins, order_items)</span><br></pre></td></tr></table></figure><h3 id="Joins"><a href="#Joins" class="headerlink" title="Joins"></a>Joins</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>columns=[orders.c.order_id,</span><br><span class="line"><span class="meta">... </span>    users.c.username,</span><br><span class="line"><span class="meta">... </span>    users.c.phone,</span><br><span class="line"><span class="meta">... </span>    cookies.c.cookie_name,</span><br><span class="line"><span class="meta">... </span>    line_items.c.quantity,</span><br><span class="line"><span class="meta">... </span>    line_items.c.extended_cost</span><br><span class="line"><span class="meta">... </span>    ]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cookiemon_orders=select(columns)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cookiemon_orders=cookiemon_orders.select_from(</span><br><span class="line"><span class="meta">... </span>    orders.join(users).join(line_items).join(cookies)</span><br><span class="line"><span class="meta">... </span>    ).where(users.c.username == <span class="string">'cookiemon'</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(cookiemon_orders)</span><br><span class="line">SELECT orders.order_id, users.username, users.phone, cookies.cookie_name, line_items.quantity, line_items.extended_cost </span><br><span class="line">FROM orders JOIN users ON users.user_id = orders.user_id JOIN line_items ON orders.order_id = line_items.order_id JOIN cookies ON cookies.cookie_id = line_items.cookie_id </span><br><span class="line">WHERE users.username = :username_1</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><strong><em>using outerjoin to select from multiple tables</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> func</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>columns=[</span><br><span class="line"><span class="meta">... </span>    users.c.username,</span><br><span class="line"><span class="meta">... </span>    func.count(orders.c.order_id)</span><br><span class="line"><span class="meta">... </span>    ]</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>all_orders=select(columns).select_from(</span><br><span class="line"><span class="meta">... </span>    users.outerjoin(orders)</span><br><span class="line"><span class="meta">... </span>    ).group_by(users.c.username)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SQLAlchemy knows how to join the users and orders tables because of the foreign key defined in the orders table.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(all_orders)</span><br><span class="line">SELECT users.username, count(orders.order_id) AS count_1 </span><br><span class="line">FROM users LEFT OUTER JOIN orders ON users.user_id = orders.user_id GROUP BY users.username</span><br></pre></td></tr></table></figure><h3 id="Aliases"><a href="#Aliases" class="headerlink" title="Aliases"></a>Aliases</h3><p>When using joins, it is often necessary to refer to a table more than once. In SQL, this is accomplished by using aliases in the query. For instance, suppose we have the following (partial) schema that tracks the reporting structure within an organization:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">employee_table = Table(</span><br><span class="line">    <span class="string">'employee'</span>, metadata,</span><br><span class="line">    Column(<span class="string">'id'</span>, Integer, primary_key=<span class="keyword">True</span>),</span><br><span class="line">    Column(<span class="string">'manager'</span>, <span class="keyword">None</span>, ForeignKey(<span class="string">'employee.id'</span>)),</span><br><span class="line">    Column(<span class="string">'name'</span>, String(<span class="number">255</span>)))</span><br></pre></td></tr></table></figure></p><p>Now suppose we want to select all the employees managed by an employee named Fred. In SQL, we might write the following:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> employee.name</span><br><span class="line"><span class="keyword">FROM</span> employee, employee <span class="keyword">AS</span> manager</span><br><span class="line"><span class="keyword">WHERE</span> employee.manager_id = manager.id</span><br><span class="line">    <span class="keyword">AND</span> manager.name = <span class="string">'Fred'</span></span><br></pre></td></tr></table></figure></p><p>SQLAlchemy also allows the use of aliasing selectables in this type of situation via the <strong>alias()</strong> function or method:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>manager = employee_table.alias(<span class="string">'mgr'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stmt = select([employee_table.c.name],</span><br><span class="line"><span class="meta">... </span>              and_(employee_table.c.manager_id==manager.c.id,</span><br><span class="line"><span class="meta">... </span>                   manager.c.name==<span class="string">'Fred'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stmt)</span><br><span class="line">SELECT employee.name</span><br><span class="line">FROM employee, employee AS mgr</span><br><span class="line">WHERE employee.manager_id = mgr.id AND mgr.name = ?</span><br></pre></td></tr></table></figure><p>SQLAlchemy can also choose the alias name automatically, which is useful for guaranteeing that there are no name collisions:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>manager = employee_table.alias()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stmt = select([employee_table.c.name],</span><br><span class="line"><span class="meta">... </span>              and_(employee_table.c.manager_id==manager.c.id,</span><br><span class="line"><span class="meta">... </span>                   manager.c.name==<span class="string">'Fred'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stmt)</span><br><span class="line">SELECT employee.name</span><br><span class="line">FROM employee, employee AS employee_1</span><br><span class="line">WHERE employee.manager_id = employee_1.id AND employee_1.name = ?</span><br></pre></td></tr></table></figure><h3 id="Grouping"><a href="#Grouping" class="headerlink" title="Grouping"></a>Grouping</h3><p>When using grouping, you need one or more columns to group on and one or more columns that it makes sense to aggregate with counts, sums, etc.</p><p><strong><em>Grouping data</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>columns=[</span><br><span class="line"><span class="meta">... </span>    users.c.username,</span><br><span class="line"><span class="meta">... </span>    func.count(orders.c.order_id)</span><br><span class="line"><span class="meta">... </span>    ]</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>all_orders=select(columns).select_from(users.outerjoin(orders)).group_by(</span><br><span class="line"><span class="meta">... </span>    users.c.username</span><br><span class="line"><span class="meta">... </span>    )</span><br></pre></td></tr></table></figure><h3 id="Chaining"><a href="#Chaining" class="headerlink" title="Chaining"></a>Chaining</h3><p><strong><em>Chaining</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">get_orders_by_customer</span><span class="params">(cust_name)</span>:</span></span><br><span class="line"><span class="meta">... </span>    columns=[</span><br><span class="line"><span class="meta">... </span>        orders.c.order_id,</span><br><span class="line"><span class="meta">... </span>        users.c.username,</span><br><span class="line"><span class="meta">... </span>        usere.c.phone,</span><br><span class="line"><span class="meta">... </span>        cookies.c.cookie_name,</span><br><span class="line"><span class="meta">... </span>        line_items.c.quantity.</span><br><span class="line"><span class="meta">... </span>        line_items.c.extended_cost</span><br><span class="line"><span class="meta">... </span>        ]</span><br><span class="line"><span class="meta">... </span>    cust_orders=select(columns).select_from(</span><br><span class="line"><span class="meta">... </span>        users.join(orders).join(line_items).join(cookies)</span><br><span class="line"><span class="meta">... </span>        ).where(</span><br><span class="line"><span class="meta">... </span>            users.c.username == cust_name</span><br><span class="line"><span class="meta">... </span>            )</span><br><span class="line"><span class="meta">... </span>    result= connection.execute(cust_orders).fetchall()</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> result</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong><em>Conditional chaining</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">get_orders_by_customer</span><span class="params">(cust_name, shipped=None, details= False)</span>:</span></span><br><span class="line"><span class="meta">... </span>    columns=[</span><br><span class="line"><span class="meta">... </span>        orders.c.order_id,</span><br><span class="line"><span class="meta">... </span>        users.c.username,</span><br><span class="line"><span class="meta">... </span>        users.c.phone</span><br><span class="line"><span class="meta">... </span>        ]</span><br><span class="line"><span class="meta">... </span>    joins=users.join(orders)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> details:</span><br><span class="line"><span class="meta">... </span>        columns.extend([</span><br><span class="line"><span class="meta">... </span>            cookies.c.cookie_name,</span><br><span class="line"><span class="meta">... </span>            line_items.c.quantity,</span><br><span class="line"><span class="meta">... </span>            line_items.c.extended_cost</span><br><span class="line"><span class="meta">... </span>            ])</span><br><span class="line"><span class="meta">... </span>        joins=joins.join(line_items).join(cookies)</span><br><span class="line"><span class="meta">... </span>    cust_orders=select(columns).select_from(joins).where(</span><br><span class="line"><span class="meta">... </span>        users.c.username == cust_name</span><br><span class="line"><span class="meta">... </span>        )</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> shipped <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line"><span class="meta">... </span>        cust_orders=cust_orders.where(orders.c.shipped == shipped)</span><br><span class="line"><span class="meta">... </span>    result= connection.execute(cust_orders).fetchall()</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> result</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="Raw-Queries"><a href="#Raw-Queries" class="headerlink" title="Raw Queries"></a>Raw Queries</h3><p>It is also possible to execute raw SQL statements or use raw SQL in part of a SQLAlchemy Core query. It still returns a <strong>ResultProxy</strong>, and you can continue to interact with it just as you would a query built using the SQL Expression syntax of SQLAlchemy Core. </p><p><strong><em>Full raw queries</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result= connection.execute(<span class="string">'select * from orders'</span>).fetchall()</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p><strong><em>Partial text query</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> text</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stmt= select([users]).where(text(<span class="string">'username="cookiemon"'</span>))</span><br><span class="line">print(connection.execute(stmt).fetchall())</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; Two very commonly used database functions are &lt;strong&gt;SUM()&lt;/strong&gt; and &lt;strong&gt;COUNT()&lt;/strong&gt;. To use these functions, we need to import the &lt;strong&gt;sqlalchemy.sql.func&lt;/strong&gt; module where they are found. These functions are wrapped around the column(s) on which they are operating.&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
      <category term="sqlalchemy" scheme="blog.whistlestop.ml/tags/sqlalchemy/"/>
    
  </entry>
  
  <entry>
    <title>sqlalchemy_C02_Inserting Data_Querying Data</title>
    <link href="blog.whistlestop.ml/2018/05/25/sqlalchemy-C02-Inserting-Data-Querying-Data/"/>
    <id>blog.whistlestop.ml/2018/05/25/sqlalchemy-C02-Inserting-Data-Querying-Data/</id>
    <published>2018-05-26T05:25:27.000Z</published>
    <updated>2018-05-26T05:33:42.940Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Inserting-Data"><a href="#Inserting-Data" class="headerlink" title="Inserting Data"></a>Inserting Data</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ins= cookies.insert().values(</span><br><span class="line"><span class="meta">... </span>    cookie_name=<span class="string">'chololate chip'</span>,</span><br><span class="line"><span class="meta">... </span>    cookie_recipe_url=<span class="string">'http://some.aweso.me/cookie/recipe.html'</span>,</span><br><span class="line"><span class="meta">... </span>    quantity= <span class="string">'12'</span>,</span><br><span class="line"><span class="meta">... </span>    unit_cost= <span class="string">'0.50'</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(str(ins))</span><br><span class="line">INSERT INTO cookies (cookie_name, cookie_recipe_url, quantity, unit_cost) VALUES (:cookie_name, </span><br><span class="line">:cookie_recipe_url, :quantity, :unit_cost)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><a id="more"></a> <p>The <strong>compile()</strong> method on the ins object returns a <strong>SQLCompiler</strong> object that gives us access to the actual parameters that will be sent with the query via the <strong>params</strong> attribute:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ins.compile().params</span><br><span class="line">&#123;<span class="string">'cookie_recipe_url'</span>: <span class="string">'http://some.aweso.me/cookie/recipe.html'</span>, <span class="string">'quantity'</span>: <span class="string">'12'</span>,</span><br><span class="line"> <span class="string">'cookie_name'</span>: <span class="string">'chololate chip'</span>, <span class="string">'unit_cost'</span>: <span class="string">'0.50'</span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>This compiles the statement via our dialect but does not execute it, and we access the <strong>params</strong> attribute of that statement.</p><p>We can use the <strong>execute()</strong> method on our connection to send the statement to the database.We can also get the ID of the record we just inserted by accessing the <strong>inserted_primary_key</strong> attribute:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result= connection.execute(ins)</span><br><span class="line">result.inserted_primary_key</span><br></pre></td></tr></table></figure><p>In addition to having <strong>insert</strong> as an instance method off a <strong>Table</strong> object, it is also available as a top-level function for those times that you want to build a statement “generatively” (a step at a time) or when the table may not be initially known.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> insert</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ins= insert(cookies).values(</span><br><span class="line"><span class="meta">... </span>    cookie_name=<span class="string">'chocolate chip'</span>,</span><br><span class="line"><span class="meta">... </span>    cookie_recipe_url=<span class="string">'recipe.html'</span>,</span><br><span class="line"><span class="meta">... </span>    quantity=<span class="string">'12'</span>,</span><br><span class="line"><span class="meta">... </span>    unit_cost = <span class="string">'0.50'</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>The <strong>execute</strong> method of the connection object can take more than just statements. It is also possible to provide the values as keyword arguments to the <strong>execute</strong> method after our statement. When the statement is compiled, it will add each one of the keyword argument keys to the columns list, and it adds each one of their values to the VALUES part of the SQL statement</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ins = cookies.insert()</span><br><span class="line">result = connection.execute(</span><br><span class="line">    ins, </span><br><span class="line">    cookie_name=<span class="string">'dark chocolate chip'</span>, </span><br><span class="line">    cookie_recipe_url=<span class="string">'http://some.aweso.me/cookie/recipe_dark.html'</span>,</span><br><span class="line">    cookie_sku=<span class="string">'CC02'</span>,</span><br><span class="line">    quantity=<span class="string">'1'</span>,</span><br><span class="line">    unit_cost=<span class="string">'0.75'</span></span><br><span class="line">)</span><br><span class="line">result.inserted_primary_key</span><br></pre></td></tr></table></figure><p><strong><em>Multiple inserts</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">inventory_list = [ </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'cookie_name'</span>: <span class="string">'peanut butter'</span>,</span><br><span class="line">        <span class="string">'cookie_recipe_url'</span>: <span class="string">'http://some.aweso.me/cookie/peanut.html'</span>,</span><br><span class="line">        <span class="string">'cookie_sku'</span>: <span class="string">'PB01'</span>,</span><br><span class="line">        <span class="string">'quantity'</span>: <span class="string">'24'</span>,</span><br><span class="line">        <span class="string">'unit_cost'</span>: <span class="string">'0.25'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'cookie_name'</span>: <span class="string">'oatmeal raisin'</span>,</span><br><span class="line">        <span class="string">'cookie_recipe_url'</span>: <span class="string">'http://some.okay.me/cookie/raisin.html'</span>,</span><br><span class="line">        <span class="string">'cookie_sku'</span>: <span class="string">'EWW01'</span>,</span><br><span class="line">        <span class="string">'quantity'</span>: <span class="string">'100'</span>,</span><br><span class="line">        <span class="string">'unit_cost'</span>: <span class="string">'1.00'</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">result = connection.execute(ins, inventory_list)</span><br></pre></td></tr></table></figure><h3 id="Querying-Data"><a href="#Querying-Data" class="headerlink" title="Querying Data"></a>Querying Data</h3><p>To begin building a query, we start by using the <strong>select</strong> function, which is analogous to the standard SQL SELECT statement. Initially, let’s select all the records in our <strong>cookies</strong> table<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> select</span><br><span class="line">s = select([cookies]) </span><br><span class="line">rp = connection.execute(s)</span><br><span class="line">results = rp.fetchall() <span class="comment"># This tells rp, the ResultProxy, to return all the rows</span></span><br></pre></td></tr></table></figure></p><p>Remember we can use <strong>str(s)</strong> to look at the SQL statement the database will see, which in this case is <strong>SELECT cookies.cookie_id, cookies.cookie_name, cookies.cookie_recipe_url, cookies.cookie_sku, cookies.quantity, cookies.unit_cost FROM cookies</strong>.</p><p>It is also possible to use the <strong>select</strong> method on the <strong>Table</strong> object to do this.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> select</span><br><span class="line">s=cookies.select()</span><br><span class="line">rp=connection.execute(s)</span><br><span class="line">results=rp.fetchall()</span><br></pre></td></tr></table></figure><h4 id="ResultProxy"><a href="#ResultProxy" class="headerlink" title="ResultProxy"></a>ResultProxy</h4><p>A <strong>ResultProxy</strong> is a wrapper around a <strong>DBAPI</strong> cursor object, and its main goal is to make it easier to use and manipulate the results of a statement. </p><p><strong><em>Handling rows with a ResultProxy</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">first_row = results[<span class="number">0</span>]</span><br><span class="line">first_row.cookie_name <span class="comment"># Access column by name.</span></span><br><span class="line">first_row[cookies.c.cookie_name] <span class="comment"># Access column by Column object</span></span><br></pre></td></tr></table></figure><p><strong><em>Iterating over a ResultProxy</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rp = connection.execute(s)</span><br><span class="line"><span class="keyword">for</span> record <span class="keyword">in</span> rp:</span><br><span class="line">    print(record.cookie_name)</span><br></pre></td></tr></table></figure><p>You can use the following methods as well to fetch results:</p><p><strong>first()</strong><br>    Returns the first record if there is one and closes the connection.</p><p><strong>fetchone()</strong><br>    Returns one row, and leaves the cursor open for you to make additional fetch calls.</p><p><strong>scalar()</strong><br>    Returns a single value if a query results in a single record with one column.</p><h3 id="Controlling-the-Columns-in-the-Query"><a href="#Controlling-the-Columns-in-the-Query" class="headerlink" title="Controlling the Columns in the Query"></a>Controlling the Columns in the Query</h3><p><strong>_Select only cookie_name and quantity_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = select([cookies.c.cookie_name, cookies.c.quantity])</span><br><span class="line">rp= connection.execute(s)</span><br><span class="line">print(rp.keys()) <span class="comment"># (u'chocolate chip', 12),</span></span><br><span class="line">result= rp.first()</span><br></pre></td></tr></table></figure><h3 id="Ordering"><a href="#Ordering" class="headerlink" title="Ordering"></a>Ordering</h3><p><strong><em>Order by quantity ascending</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s= select([cookies.c.cookie_name, cookies.c.quantity])</span><br><span class="line">s = s.order_by(cookies.c.quantity)</span><br><span class="line">rp= connection.execute(s)</span><br><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> rp:</span><br><span class="line">    print(<span class="string">'&#123;&#125; - &#123;&#125;'</span>.format(cookie.quantity, cookie.cookie_name))</span><br></pre></td></tr></table></figure><p>We saved the select statement into the <strong>s</strong> variable, used that <strong>s</strong> variable and added the <strong>order_by</strong> statement to it, and then reassigned that to the <strong>s</strong> variable. This is an example of how to compose statements in a generative or step-by-step fashion. This is the same as combining the select and the <strong>order_by</strong> statements into one line as shown here:</p><p><code>s = select([...]).order_by(...)</code></p><p><strong><em>Order by quantity descending</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> desc</span><br><span class="line">s= select([cookies.c.cookie_name, cookies.c.quantity])</span><br><span class="line">s= s.order_by(desc(cookies.c.quantity))</span><br></pre></td></tr></table></figure><p>The desc() <strong>function</strong> can also be used as a method on a <strong>Column</strong> object, such as <strong>cookies.c.quantity.desc()</strong>. However, that can be a bit more confusing to read in long statements, so I always use <strong>desc()</strong> as a function.</p><h3 id="Limiting"><a href="#Limiting" class="headerlink" title="Limiting"></a>Limiting</h3><p>We used the <strong>first()</strong> or <strong>fetchone()</strong> methods to get just a single row back. While our <strong>ResultProxy</strong> gave us the one row we asked for, the actual query ran over and accessed all the results, not just the single record. If we want to limit the query, we can use the <strong>limit()</strong> function to actually issue a limit statement as part of our query.</p><p><strong><em>Two smallest cookie inventories</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s= select([cookies.c.cookie_name, cookies.c.quantity])</span><br><span class="line">s= s.order_by(cookies.c.quantity)</span><br><span class="line">s= s.limit(<span class="number">2</span>)</span><br><span class="line">rp= connection.execute(s)</span><br><span class="line">print([result.cookie_name <span class="keyword">for</span> result <span class="keyword">in</span> rp])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Inserting-Data&quot;&gt;&lt;a href=&quot;#Inserting-Data&quot; class=&quot;headerlink&quot; title=&quot;Inserting Data&quot;&gt;&lt;/a&gt;Inserting Data&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;ins= cookies.insert().values(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    cookie_name=&lt;span class=&quot;string&quot;&gt;&#39;chololate chip&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    cookie_recipe_url=&lt;span class=&quot;string&quot;&gt;&#39;http://some.aweso.me/cookie/recipe.html&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    quantity= &lt;span class=&quot;string&quot;&gt;&#39;12&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    unit_cost= &lt;span class=&quot;string&quot;&gt;&#39;0.50&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;print(str(ins))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INSERT INTO cookies (cookie_name, cookie_recipe_url, quantity, unit_cost) VALUES (:cookie_name, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:cookie_recipe_url, :quantity, :unit_cost)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
      <category term="sqlalchemy" scheme="blog.whistlestop.ml/tags/sqlalchemy/"/>
    
  </entry>
  
  <entry>
    <title>sqlalchemy_C01_Persisting the Tables </title>
    <link href="blog.whistlestop.ml/2018/05/25/sqlalchemy-C01-Persisting-the-Tables/"/>
    <id>blog.whistlestop.ml/2018/05/25/sqlalchemy-C01-Persisting-the-Tables/</id>
    <published>2018-05-26T05:24:43.000Z</published>
    <updated>2018-05-26T05:33:54.156Z</updated>
    
    <content type="html"><![CDATA[<p>All of our tables and additional schema definitions are associated with an instance of <strong>metadata</strong>. Persisting the schema to the database is simply a matter of calling the <strong>create_all()</strong> method on our <strong>metadata</strong> instance with the engine where it should create those tables:</p><p>metadata.create_all(engine)<br><a id="more"></a><br>By default, <strong>create_all</strong> will not attempt to re-create tables that already exist in the database, and it is safe to run multiple times. It’s wiser to use a database migration tool like <strong>Alembic</strong> to handle any changes to existing tables or additional schema than to try to handcode changes directly in your application code.</p><p>from sqlalchemy import (MetaData, Table, Column, Integer, Numeric, String,<br>                        DateTime, ForeignKey, create_engine)<br>metadata = MetaData()<br>engine= create_engine(‘sqlite:///:memory:’)<br>metadata.create_all(engine)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;All of our tables and additional schema definitions are associated with an instance of &lt;strong&gt;metadata&lt;/strong&gt;. Persisting the schema to the database is simply a matter of calling the &lt;strong&gt;create_all()&lt;/strong&gt; method on our &lt;strong&gt;metadata&lt;/strong&gt; instance with the engine where it should create those tables:&lt;/p&gt;
&lt;p&gt;metadata.create_all(engine)&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
      <category term="sqlalchemy" scheme="blog.whistlestop.ml/tags/sqlalchemy/"/>
    
  </entry>
  
  <entry>
    <title>sqlalchemy_C01_Keys and Constraints_Indexes_Relationships and ForeignKeyConstraints</title>
    <link href="blog.whistlestop.ml/2018/05/25/sqlalchemy-C01-Keys-and-Constraints-Indexes-Relationships-and-ForeignKeyConstraints/"/>
    <id>blog.whistlestop.ml/2018/05/25/sqlalchemy-C01-Keys-and-Constraints-Indexes-Relationships-and-ForeignKeyConstraints/</id>
    <published>2018-05-26T05:23:40.000Z</published>
    <updated>2018-05-26T05:34:03.262Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Keys-and-Constraints"><a href="#Keys-and-Constraints" class="headerlink" title="Keys and Constraints"></a>Keys and Constraints</h3><p>Keys and constraints are used as a way to ensure that our data meets certain requirements prior to being stored in the database. The objects that represent keys and constraints can be found inside the base SQLAlchemy module, and three of the more common ones can be imported as shown here:<br><code>from sqlalchemy import PrimaryKeyConstraint, UniqueConstraint, CheckConstraint</code><br><a id="more"></a><br>The most common key type is a <strong>primary key</strong>, which is used as the unique identifier for each record in a database table and is used used to ensure a proper relationship between two pieces of related data in different tables. As you saw earlier in Example 1-1 and Example 1-2, a column can be made a <strong>primary key</strong> simply by using the <strong>primary_key</strong> keyword argument. You can also define composite primary keys by assigning the setting <strong>primary_key</strong> to <strong>True</strong> on multiple columns. The key will then essentially be treated like a tuple in which the columns marked as a key will be present in the order they were defined in the table. Primary keys can also be defined after the columns in the table constructor, as shown in the following snippet. You can add multiple columns separated by commas to create a composite key. If we wanted to explicitly define the key as shown in Example 1-2, it would look like this:<br><code>PrimaryKeyConstraint(&#39;user_id&#39;, name=&#39;user_pk&#39;)</code></p><p>Another common constraint is the unique constraint, which is used to ensure that no two values are duplicated in a given field. For our online cookie delivery service, for example, we would want to ensure that each customer had a unique username to log into our systems. We can also assign unique constraints on columns, as shown before in the <strong>username</strong> column, or we can define them manually as shown here:</p><p><code>UniqueConstraint(&#39;username&#39;, name=&#39;uix_username&#39;)</code></p><p>Not shown in Example 1-2 is the check constraint type. This type of constraint is used to ensure that the data supplied for a column matches a set of user-defined criteria. In the following example, we are ensuring that unit_cost is never allowed to be less than 0.00 because every cookie costs something to make (remember from Economics 101: TINSTAAFC—that is, there is no such thing as a free cookie!):</p><p><code>CheckConstraint(&#39;unit_cost &gt;= 0.00&#39;, name=&#39;unit_cost_positive&#39;)</code></p><h3 id="Indexes"><a href="#Indexes" class="headerlink" title="Indexes"></a>Indexes</h3><p>Indexes are used to accelerate lookups for field values, and in Example 1-1, we created an index on the <strong>cookie_name</strong> column because we know we will be searching by that often. When indexes are created as shown in that example, you will have an index called <strong>ix_cookies_cookie_name</strong>. We can also define an index using an explicit construction type. Multiple columns can be designated by separating them by a comma. You can also add a keyword argument of <strong>unique=True</strong> to require the index to be unique as well. When creating indexes explicitly, they are passed to the Table constructor after the columns. To mimic the index created in Example 1-1, we could do it explicitly as shown here:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Index</span><br><span class="line">Index(<span class="string">'ix_cookies_cookie_name'</span>, <span class="string">'cookie_name'</span>)</span><br></pre></td></tr></table></figure></p><p>We can also create functional indexes that vary a bit by the backend database being used. This lets you create an index for situations where you often need to query based on some unusual context. For example, what if we want to select by cookie SKU and name as a joined item, such as <strong>SKU0001 Chocolate Chip</strong>? We could define an index like this to optimize that lookup:<br><code>Index(&#39;ix_test&#39;, mytable.c.cookie_sku, mytable.c.cookie_name))</code></p><h3 id="Relationships-and-ForeignKeyConstraints"><a href="#Relationships-and-ForeignKeyConstraints" class="headerlink" title="Relationships and ForeignKeyConstraints"></a>Relationships and ForeignKeyConstraints</h3><p><img src="https://user-images.githubusercontent.com/33891164/39662472-92a257e6-5016-11e8-918c-c558059773e8.png" alt="image"></p><p>One way to implement a relationship is shown in Example 1-3 in the <strong>line_items</strong> table on the <strong>order_id</strong> column; this will result in a <strong>ForeignKeyConstraint</strong> to define the relationship between the two tables. In this case, many line items can be present for a single order. However, if you dig deeper into the <strong>line_items</strong> table, you’ll see that we also have a relationship with the <strong>cookies</strong> table via the <strong>cookie_id</strong> <strong>ForeignKey</strong>. This is because <strong>line_items</strong> is actually an association table with some additional data on it between orders and cookies. Association tables are used to enable many-to-many relationships between two other tables. A single <strong>ForeignKey</strong> on a table is typically a sign of a one-to-many relationship; however, if there are multiple <strong>ForeignKey</strong> relationships on a table, there is a strong possibility that it is an association table.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span>  MetaData</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Table, Column, Integer, Numeric, String, ForeignKey, DateTime, Boolean</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">metadata= MetaData()</span><br><span class="line"></span><br><span class="line">cookies=Table(<span class="string">'cookies'</span>, metadata,</span><br><span class="line">            Column(<span class="string">'cookie_id'</span>,Integer(),primary_key= <span class="keyword">True</span>),</span><br><span class="line">            Column(<span class="string">'cookie_name'</span>,String(<span class="number">50</span>), index= <span class="keyword">True</span>),</span><br><span class="line">            Column(<span class="string">'cookie_recipe_url'</span>,String(<span class="number">255</span>)),</span><br><span class="line">            Column(<span class="string">'quantity'</span>, Integer()),</span><br><span class="line">            Column(<span class="string">'unit_cost'</span>,Numeric(<span class="number">12</span>,<span class="number">2</span>))</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">users=Table(<span class="string">'users'</span>, metadata,</span><br><span class="line">            Column(<span class="string">'user_id'</span>, Integer(), primary_key= <span class="keyword">True</span>),</span><br><span class="line">            Column(<span class="string">'username'</span>,String(<span class="number">15</span>), nullable=<span class="keyword">False</span>, unique=<span class="keyword">True</span>),</span><br><span class="line">            Column(<span class="string">'email_address'</span>,String(<span class="number">255</span>), nullable=<span class="keyword">False</span>),</span><br><span class="line">            Column(<span class="string">'phone'</span>,String(<span class="number">20</span>),nullable=<span class="keyword">False</span>),</span><br><span class="line">            Column(<span class="string">'password'</span>,String(<span class="number">25</span>),nullable=<span class="keyword">False</span>),</span><br><span class="line">            Column(<span class="string">'created_on'</span>, DateTime(),default=datetime.now),</span><br><span class="line">            Column(<span class="string">'updated_on'</span>,datetime(),default=datetime.now,onupdate=datetime.now)</span><br><span class="line">    </span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">orders=Table(<span class="string">'orders'</span>, metadata,</span><br><span class="line">             Column(<span class="string">'order_id'</span>, Integer(),primary_key=<span class="keyword">True</span>),</span><br><span class="line">             Column(<span class="string">'user_id'</span>, ForeignKey(<span class="string">'users.user_id'</span>)),</span><br><span class="line">             Column(<span class="string">'shipped'</span>,Boolean(), default=<span class="keyword">False</span>)</span><br><span class="line">    </span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">line_items=Table(<span class="string">'line_items'</span>, metadata,</span><br><span class="line">            Column(<span class="string">'line_items_id'</span>, Integer(), primary_key= <span class="keyword">True</span>),</span><br><span class="line">            Column(<span class="string">'order_id'</span>, ForeignKey(<span class="string">'orders.order_id'</span>)),</span><br><span class="line">            Column(<span class="string">'cookie_id'</span>, ForeignKey(<span class="string">'cookies.cookie_id'</span>)),</span><br><span class="line">            Column(<span class="string">'quantity'</span>, Integer()),</span><br><span class="line">            Column(<span class="string">'extended_cost'</span>, Numeric(<span class="number">12</span>,<span class="number">2</span>))</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Keys-and-Constraints&quot;&gt;&lt;a href=&quot;#Keys-and-Constraints&quot; class=&quot;headerlink&quot; title=&quot;Keys and Constraints&quot;&gt;&lt;/a&gt;Keys and Constraints&lt;/h3&gt;&lt;p&gt;Keys and constraints are used as a way to ensure that our data meets certain requirements prior to being stored in the database. The objects that represent keys and constraints can be found inside the base SQLAlchemy module, and three of the more common ones can be imported as shown here:&lt;br&gt;&lt;code&gt;from sqlalchemy import PrimaryKeyConstraint, UniqueConstraint, CheckConstraint&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
      <category term="sqlalchemy" scheme="blog.whistlestop.ml/tags/sqlalchemy/"/>
    
  </entry>
  
  <entry>
    <title>C21_Class Metaprogramming</title>
    <link href="blog.whistlestop.ml/2018/05/25/C21-Class-Metaprogramming/"/>
    <id>blog.whistlestop.ml/2018/05/25/C21-Class-Metaprogramming/</id>
    <published>2018-05-26T05:20:54.000Z</published>
    <updated>2018-05-26T05:21:46.626Z</updated>
    
    <content type="html"><![CDATA[<h2 id="A-Class-Factory"><a href="#A-Class-Factory" class="headerlink" title="A Class Factory"></a>A Class Factory</h2><p><strong>_record_factory.py: a simple class factory_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">record_factory</span><span class="params">(cls_name, field_names)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        field_names= field_names.replace(<span class="string">','</span>,<span class="string">' '</span>).split()</span><br><span class="line">    <span class="keyword">except</span> AttributeError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    field_names= tuple(field_names)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        attrs=dict(zip(self.__slots__, args))</span><br><span class="line">        attrs.update(kwargs)</span><br><span class="line">        <span class="keyword">for</span> name, value <span class="keyword">in</span> attrs.items():</span><br><span class="line">            setattr(self, name, value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> self.__slots__:</span><br><span class="line">            <span class="keyword">yield</span> getattr(self, name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        values=<span class="string">', '</span>.join(<span class="string">'&#123;&#125;=&#123;!r&#125;'</span>.format(*i) <span class="keyword">for</span> i <span class="keyword">in</span> zip(self.__slots__, self))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#125;(&#123;&#125;)'</span>.format(self.__class__.__name__, values)</span><br><span class="line"></span><br><span class="line">    cls_attrs=dict(</span><br><span class="line">        __slots__= field_names,</span><br><span class="line">        __init__= __init__,</span><br><span class="line">        __iter__= __iter__,</span><br><span class="line">        __repr__= __repr__</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> type(cls_name, (object,), cls_attrs)</span><br></pre></td></tr></table></figure><a id="more"></a>  <p>We usually think of <strong>type</strong> as a function, because we use it like one, e.g., <strong>type(my_object)</strong> to get the class of the object—same as <strong>my_object.__class__</strong>. However, <strong>type</strong> is a class. It behaves like a class that creates a new class when invoked with three arguments:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyClass = type(<span class="string">'MyClass'</span>, (MySuperClass, MyMixin),</span><br><span class="line"> &#123;<span class="string">'x'</span>: <span class="number">42</span>, <span class="string">'x2'</span>: <span class="keyword">lambda</span> self: self.x * <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure><p>The three arguments of type are named <strong>name</strong>, <strong>bases</strong>, and <strong>dict</strong>—the latter being a mapping of attribute names and attributes for the new class. The preceding code is functionally equivalent to this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(MySuperClass, MyMixin)</span>:</span></span><br><span class="line">    x = <span class="number">42</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x2</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.x * <span class="number">2</span></span><br></pre></td></tr></table></figure><p>The novelty here is that the instances of <strong>type</strong> are classes, like <strong>MyClass</strong> here.</p><p>In summary, the last line of <strong>record_factory</strong> builds a class named by the value of <strong>cls_name</strong>, with <strong>object</strong> as its single immediate superclass and with class attributes named <strong>__slots__</strong>, <strong>__init__</strong>, <strong>__iter__</strong>, and <strong>__repr__</strong>, of which the last three are instance methods.</p><p>Instances of classes created by <strong>record_factory</strong> have a limitation: they are not serializable—that is, they can’t be used with the <strong>dump/load</strong> functions from the <strong>pickle</strong> module.</p><h2 id="A-Class-Decorator-for-Customizing-Descriptors"><a href="#A-Class-Decorator-for-Customizing-Descriptors" class="headerlink" title="A Class Decorator for Customizing Descriptors"></a>A Class Decorator for Customizing Descriptors</h2><p>A class decorator is very similar to a function decorator: it’s a function that gets a class object and returns the same class or a modified one.</p><p><strong>_bulkfood_v6.py: LineItem using Quantity and NonBlank descriptors_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> model_v6 <span class="keyword">as</span> model</span><br><span class="line"></span><br><span class="line"><span class="meta">@model.entity</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></span><br><span class="line">    description= model.NonBlank()</span><br><span class="line">    weight= model.Quantity()</span><br><span class="line">    price= model.Quantity()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, description, weight, price)</span>:</span></span><br><span class="line">        self.description= description</span><br><span class="line">        self.weight= weight</span><br><span class="line">        self.price= price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subtotal</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.weight * self.price</span><br></pre></td></tr></table></figure><p><strong>_model_v6.py: a class decorator_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">entity</span><span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> key, attr <span class="keyword">in</span> cls.__dict__.items():</span><br><span class="line">        <span class="keyword">if</span> isinstance(attr, Validated):</span><br><span class="line">            type_name = type(attr).__name__</span><br><span class="line">            attr.storage_name = <span class="string">'_&#123;&#125;#&#123;&#125;'</span>.format(type_name, key)</span><br><span class="line">    <span class="keyword">return</span> cls</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoStorage</span>:</span></span><br><span class="line">    __counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        cls= self.__class__</span><br><span class="line">        prefix= cls.__name__</span><br><span class="line">        index= cls.__counter</span><br><span class="line">        self.storage_name= <span class="string">'_&#123;&#125;#&#123;&#125;'</span>.format(prefix, index)</span><br><span class="line">        cls.__counter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> getattr(instance, self.storage_name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance,value)</span>:</span></span><br><span class="line">        setattr(instance, self.storage_name, value)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Validated</span><span class="params">(abc.ABC, AutoStorage)</span>:</span></span><br><span class="line">    <span class="comment">#__set__ delegates validation to a validate method</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        value= self.validate(instance, value)</span><br><span class="line">        super().__set__(instance, value)</span><br><span class="line">        <span class="comment"># uses the returned value to invoke __set__ on a superclass, which</span></span><br><span class="line">        <span class="comment"># performs the actual storage.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="string">'''return validated value or raise ValueError'''</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quantity</span><span class="params">(Validated)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span>: <span class="keyword">raise</span> ValueError(<span class="string">'value must be &gt; 0'</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonBlank</span><span class="params">(Validated)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        value = value.strip()</span><br><span class="line">        <span class="keyword">if</span> len(value) == <span class="number">0</span>: <span class="keyword">raise</span> ValueError(<span class="string">'value cannot be empty or blank'</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><p><strong>_bulkfood_v6.py: doctests for new storage_name descriptor attributes_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>raisins = LineItem(<span class="string">'Golden raisins'</span>, <span class="number">10</span>, <span class="number">6.95</span>)</span><br><span class="line"> &gt;&gt;&gt; dir(raisins)[:<span class="number">3</span>]</span><br><span class="line"> [<span class="string">'_NonBlank#description'</span>, <span class="string">'_Quantity#price'</span>, <span class="string">'_Quantity#weight'</span>]</span><br><span class="line"> &gt;&gt;&gt; LineItem.description.storage_name</span><br><span class="line"> <span class="string">'_NonBlank#description'</span></span><br><span class="line"> &gt;&gt;&gt; raisins.description</span><br><span class="line"> <span class="string">'Golden raisins'</span></span><br><span class="line"> &gt;&gt;&gt; getattr(raisins, <span class="string">'_NonBlank#description'</span>)</span><br><span class="line"> <span class="string">'Golden raisins'</span></span><br></pre></td></tr></table></figure><p>A significant drawback of class decorators is that they act only on the class where they are directly applied. This means subclasses of the decorated class may or may not inherit the changes made by the decorator, depending on what those changes are. </p><h2 id="What-Happens-When-Import-Time-Versus-Runtime"><a href="#What-Happens-When-Import-Time-Versus-Runtime" class="headerlink" title="What Happens When: Import Time Versus Runtime"></a>What Happens When: Import Time Versus Runtime</h2><p>Although compiling is definitely an import-time activity, other things may happen at that time, because almost every statement in Python is executable in the sense that they potentially run user code and change the state of the user program. In particular, the <strong>import</strong> statement is not merely a declaration but it actually runs all the top-level code of the imported module when it’s imported for the first time in the process—further imports of the same module will use a cache, and only name binding occurs then. That top-level code may do anything, including actions typical of “runtime”, such as connecting to a database.  That’s why the border between “import time” and “runtime” is fuzzy: the <strong>import</strong> statement can trigger all sorts of “runtime” behavior.</p><p>The interpreter executes a <strong>def</strong> statement on the top level of a module when the module is imported, but what does that achieve? The interpreter compiles the function body (if it’s the first time that module is imported), and binds the function object to its global name, but it does not execute the body of the function, obviously. In the usual case, this means that the interpreter defines top-level functions at import time, but executes their bodies only when—and if—the functions are invoked at runtime.</p><p>For classes, the story is different: at import time, the interpreter executes the body of every class, even the body of classes nested in other classes. Execution of a class body means that the attributes and methods of the class are defined, and then the class object itself is built. In this sense, the body of classes is “top-level code”: it runs at import time.</p><h2 id="Metaclasses-101"><a href="#Metaclasses-101" class="headerlink" title="Metaclasses 101"></a>Metaclasses 101</h2><p>Consider the Python object model: classes are objects, therefore each class must be an instance of some other class. By default, Python classes are instances of <strong>type</strong>. In other words, <strong>type</strong> is the metaclass for most built-in and user-defined classes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'spam'</span>.__class__</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">str</span>.<span class="title">__class__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">type</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">from</span> <span class="title">bulkfood_v6</span> <span class="title">import</span> <span class="title">LineItem</span></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">LineItem</span>.<span class="title">__class__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">type</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>.<span class="title">__class__</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">type</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>To avoid infinite regress, <strong>type</strong> is an instance of itself, as the last line shows.</p><p><strong>str</strong> and <strong>LineItem</strong> are instances of <strong>type</strong>. They all are subclasses of <strong>object</strong>.</p><p><img src="https://user-images.githubusercontent.com/33891164/39915696-75d09578-54bd-11e8-9804-3dd430b481f5.png" alt="image"></p><p>The classes <strong>object</strong> and <strong>type</strong> have a unique relationship: <strong>object</strong> is an instance of <strong>type</strong>, and <strong>type</strong> is a subclass of <strong>object</strong>. This relationship is “magic”: it cannot be expressed in Python because either class would have to exist before the other could be defined. The fact that <strong>type</strong> is an instance of itself is also magical.</p><p><img src="https://user-images.githubusercontent.com/33891164/39915886-f81dc000-54bd-11e8-9f05-7ae31fe78109.png" alt="image"></p><p>The important takeaway here is that all classes are instances of <strong>type</strong>, but metaclasses are also subclasses of <strong>type</strong>, so they act as class factories. In particular, a metaclass can customize its instances by implementing <strong>__init__</strong>. A metaclass <strong>__init__</strong> method can do everything a class decorator can do.</p><h2 id="A-Metaclass-for-Customizing-Descriptors"><a href="#A-Metaclass-for-Customizing-Descriptors" class="headerlink" title="A Metaclass for Customizing Descriptors"></a>A Metaclass for Customizing Descriptors</h2><p><strong>_model_v7.py: the EntityMeta metaclass and one instance of it, Entity model_v7.py: the EntityMeta metaclass and one instance of it,Entity_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EntityMeta</span><span class="params">(type)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, bases, attr_dict)</span>:</span></span><br><span class="line">        super().__init__(name, bases, attr_dict)</span><br><span class="line">        <span class="keyword">for</span> key, attr <span class="keyword">in</span> attr_dict.items():</span><br><span class="line">            <span class="keyword">if</span> isinstance(attr, Validated):</span><br><span class="line">                type_name= type(attr).__name__</span><br><span class="line">                attr.storage_name= <span class="string">'_&#123;&#125;#&#123;&#125;'</span>.format(type_name, key)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entity</span><span class="params">(metaclass=EntityMeta)</span>:</span></span><br><span class="line">    <span class="string">'''Business entity with validated fields'''</span></span><br></pre></td></tr></table></figure><p><strong>_bulkfood_v7.py: inheriting from model.Entity can work, if a metaclass is behind the scenes_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> model_v7 <span class="keyword">as</span> model</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span><span class="params">(model.Entity)</span>:</span></span><br><span class="line">    description= model.NonBlank()</span><br><span class="line">    weight= model.Quantity()</span><br><span class="line">    price= model.Quantity()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, description, weight, price)</span>:</span></span><br><span class="line">        self.description= description</span><br><span class="line">        self.weight= weight</span><br><span class="line">        self.price = price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subtotal</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.weight * self.price</span><br></pre></td></tr></table></figure><h2 id="The-Metaclass-prepare-Special-Method"><a href="#The-Metaclass-prepare-Special-Method" class="headerlink" title="The Metaclass __prepare__ Special Method"></a>The Metaclass __prepare__ Special Method</h2><p>In some applications it’s interesting to be able to know the order in which the attributes of a class are defined. For example, a library to read/write CSV files driven by userdefined classes may want to map the order of the fields declared in the class to the order of the columns in the CSV file.</p><p>As we’ve seen, both the <strong>type</strong> constructor and the <strong>__new__</strong> and <strong>__init__</strong> methods of metaclasses receive the body of the class evaluated as a mapping of names to attributes. However, by default, that mapping is a <strong>dict</strong>, which means the order of the attributes as they appear in the class body is lost by the time our metaclass or class decorator can look at them.</p><p>The solution to this problem is the <strong>__prepare__</strong> special method, introduced in Python 3. This special method is relevant only in metaclasses, and it must be a class method (i.e., defined with the @classmethod decorator). The <strong>__prepare__</strong> method is invoked by the interpreter before the<strong>__new__</strong> method in the metaclass to create the mapping that will be filled with the attributes from the class body. Besides the metaclass as first argument, <strong>__prepare__</strong> gets the name of the class to be constructed and its tuple of base classes, and it must return a mapping, which will be received as the last argument by <strong>__new__</strong> and then <strong>__init__</strong> when the metaclass builds a new class.</p><p><strong>_model_v8.py: the EntityMeta metaclass uses prepare, and Entity now has a field_names class method_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EntityMeta</span><span class="params">(type)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Return an empty OrderedDict instance, where the class attributes will be </span></span><br><span class="line">    <span class="comment"># stored.</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__prepare__</span><span class="params">(cls, name, bases)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> collections.OrderedDict()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(cls, name, bases, attr_dict)</span>:</span></span><br><span class="line">        super().__init__(name, bases, attr_dict)</span><br><span class="line">        cls._field_names= []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># attr_dict here is the OrderedDict obtained by the interpreter when it </span></span><br><span class="line">        <span class="comment"># called __prepare__ before calling __init__.</span></span><br><span class="line">        <span class="keyword">for</span> key, attr <span class="keyword">in</span> attr_dict.items():</span><br><span class="line">            <span class="keyword">if</span> isinstance(attr, Validated):</span><br><span class="line">                type_name= type(attr).__name__</span><br><span class="line">                attr.storage_name= <span class="string">'_&#123;&#125;#&#123;&#125;'</span>.format(type_name, key)</span><br><span class="line">                cls._field_names.append(key)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entity</span><span class="params">(metaclass=EntityMeta)</span>:</span></span><br><span class="line">    <span class="string">'''Business entity with validated fields'''</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">field_names</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> cls._field_names: <span class="keyword">yield</span> name</span><br></pre></td></tr></table></figure><p><strong>_bulkfood_v8.py: doctest showing the use of field_names—no changes are needed in the LineItem class; field_names is inherited from model.Entity_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name <span class="keyword">in</span> LineItem.field_names():</span><br><span class="line"> ...    print(name)</span><br><span class="line"> ...</span><br><span class="line"> description</span><br><span class="line"> weight</span><br><span class="line"> price</span><br></pre></td></tr></table></figure><h2 id="Classes-as-Objects"><a href="#Classes-as-Objects" class="headerlink" title="Classes as Objects"></a>Classes as Objects</h2><p><strong><em>cls.\</em>_bases___</strong><br>The tuple of base classes of the class.</p><p><strong><em>cls.\</em>_qualname___</strong><br>A new attribute in Python 3.3 holding the qualified name of a class or function, which is a dotted path from the global scope of the module to the class definition. For example, in Example 21-6, the <strong>__qualname__</strong> of the inner class <strong>ClassTwo</strong> is the string ‘<strong>ClassOne.ClassTwo</strong>‘, while its <strong>__name__</strong> is just ‘<strong>ClassTwo</strong>‘.</p><p><strong><em>cls.\</em>_subclasses__()_</strong><br>This method returns a list of the immediate subclasses of the class. The implementation uses weak references to avoid circular references between the superclass and its subclasses—which hold a strong reference to the superclasses in their <strong>__bases__</strong> attribute. The method returns the list of subclasses that currently exist in memory.</p><p><strong><em>cls.mro()</em></strong><br>The interpreter calls this method when building a class to obtain the tuple of superclasses that is stored in the <strong>__mro__</strong> attribute of the class. A metaclass can override this method to customize the method resolution order of the class under construction.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;A-Class-Factory&quot;&gt;&lt;a href=&quot;#A-Class-Factory&quot; class=&quot;headerlink&quot; title=&quot;A Class Factory&quot;&gt;&lt;/a&gt;A Class Factory&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;_record_factory.py: a simple class factory_&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;record_factory&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(cls_name, field_names)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        field_names= field_names.replace(&lt;span class=&quot;string&quot;&gt;&#39;,&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;).split()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; AttributeError:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    field_names= tuple(field_names)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, *args, **kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        attrs=dict(zip(self.__slots__, args))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        attrs.update(kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; name, value &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; attrs.items():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            setattr(self, name, value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__iter__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; name &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; self.__slots__:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; getattr(self, name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__repr__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        values=&lt;span class=&quot;string&quot;&gt;&#39;, &#39;&lt;/span&gt;.join(&lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;&amp;#125;=&amp;#123;!r&amp;#125;&#39;&lt;/span&gt;.format(*i) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; zip(self.__slots__, self))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;&amp;#125;(&amp;#123;&amp;#125;)&#39;&lt;/span&gt;.format(self.__class__.__name__, values)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cls_attrs=dict(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __slots__= field_names,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __init__= __init__,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __iter__= __iter__,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __repr__= __repr__&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; type(cls_name, (object,), cls_attrs)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C20_Attribute Descriptors_02</title>
    <link href="blog.whistlestop.ml/2018/05/25/C20-Attribute-Descriptors-02/"/>
    <id>blog.whistlestop.ml/2018/05/25/C20-Attribute-Descriptors-02/</id>
    <published>2018-05-26T05:19:51.000Z</published>
    <updated>2018-05-26T05:20:16.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overriding-Versus-Nonoverriding-Descriptors"><a href="#Overriding-Versus-Nonoverriding-Descriptors" class="headerlink" title="Overriding Versus Nonoverriding Descriptors"></a>Overriding Versus Nonoverriding Descriptors</h2><p>Recall that there is an important asymmetry in the way Python handles attributes. Reading an attribute through an instance normally returns the attribute defined in the instance, but if there is no such attribute in the instance, a class attribute will be retrieved. On the other hand, assigning to an attribute in an instance normally creates the attribute in the instance, without affecting the class at all.<br><a id="more"></a><br>This asymmetry also affects descriptors, in effect creating two broad categories of descriptors depending on whether the <strong>__set__</strong> method is defined. </p><h3 id="Overriding-Descriptor"><a href="#Overriding-Descriptor" class="headerlink" title="Overriding Descriptor"></a>Overriding Descriptor</h3><p>A descriptor that implements the <strong>__set__</strong> method is called an overriding descriptor, because although it is a class attribute, a descriptor implementing  <strong>__set__</strong> will override attempts to assign to instance attributes. Properties are also overriding descriptors: if you don’t provide a <strong>setter</strong> function, the default  <strong>__set__</strong> from the property class will raise <strong>AttributeError</strong> to signal that the attribute is read-only. </p><p><strong><em>descriptorkinds.py: simple classes for studying descriptor overriding behavior</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cls_name</span><span class="params">(obj_or_cls)</span>:</span></span><br><span class="line">    cls= type(obj_or_cls)</span><br><span class="line">    <span class="keyword">if</span> cls <span class="keyword">is</span> type: cls= obj_or_cls</span><br><span class="line">    <span class="keyword">return</span> cls.__name__.split(<span class="string">'.'</span>)[<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(obj)</span>:</span></span><br><span class="line">    cls= type(obj)</span><br><span class="line">    <span class="keyword">if</span> cls <span class="keyword">in</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;class &#123;&#125;&gt;'</span>.format(obj.__name__)</span><br><span class="line">    <span class="keyword">elif</span> cls <span class="keyword">in</span> [type(<span class="keyword">None</span>), int]: <span class="keyword">return</span> repr(obj)</span><br><span class="line">    <span class="keyword">else</span>: <span class="keyword">return</span> <span class="string">'&lt;&#123;&#125; object&gt;'</span>.format(cls_name(obj))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_args</span><span class="params">(name, *args)</span>:</span></span><br><span class="line">    pseudo_args= <span class="string">', '</span>.join(display(x) <span class="keyword">for</span> x <span class="keyword">in</span> args)</span><br><span class="line">    print(<span class="string">'-&gt; &#123;&#125;.__&#123;&#125;__(&#123;&#125;)'</span>.format(cls_name(args[<span class="number">0</span>]),name, pseudo_args))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Overriding</span>:</span></span><br><span class="line">    <span class="string">'''data descriptor or enforced descriptor'''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        print_args(<span class="string">'get'</span>,self, instance, owner)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        print_args(<span class="string">'set'</span>, self, instance, value)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OverridingNoGet</span>:</span></span><br><span class="line">    <span class="string">'''without __get__'''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        print_args(<span class="string">'set'</span>, self, instance, value)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonOveriding</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        print_args(<span class="string">'get'</span>,self, instance, owner)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Managed</span>:</span></span><br><span class="line">    over= Overriding()</span><br><span class="line">    over_no_get= OverridingNoGet()</span><br><span class="line">    non_over= NonOveriding()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'-&gt; Managed.spam(&#123;&#125;)'</span>.format(display(self)))</span><br></pre></td></tr></table></figure><p> <strong><em>Behavior of an overriding descriptor: obj.over is an instance of Overriding</em></strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> &gt;&gt;&gt; obj = Managed()</span><br><span class="line"> &gt;&gt;&gt; obj.over</span><br><span class="line"> -&gt; Overriding.__get__(&lt;Overriding object&gt;, &lt;Managed object&gt;,</span><br><span class="line"> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Managed</span>&gt;)</span></span><br><span class="line"><span class="class"> &gt;&gt;&gt; <span class="title">Managed</span>.<span class="title">over</span></span></span><br><span class="line"><span class="class"> -&gt; Overriding.__get__(&lt;Overriding object&gt;, <span class="keyword">None</span>, &lt;class Managed&gt;)</span></span><br><span class="line"><span class="class"> &gt;&gt;&gt; obj.over = 7</span></span><br><span class="line"><span class="class"> -&gt; Overriding.__set__(&lt;Overriding object&gt;, &lt;Managed object&gt;, 7)</span></span><br><span class="line"><span class="class"> &gt;&gt;&gt; obj.over</span></span><br><span class="line"><span class="class"> -&gt; Overriding.__get__(&lt;Overriding object&gt;, &lt;Managed object&gt;,</span></span><br><span class="line"><span class="class"> &lt;class Managed&gt;)</span></span><br><span class="line"><span class="class"> &gt;&gt;&gt; obj.__dict__['over'] = 8</span></span><br><span class="line"><span class="class"> &gt;&gt;&gt; vars(obj)</span></span><br><span class="line"><span class="class"> &#123;'over':</span> <span class="number">8</span>&#125;</span><br><span class="line"> &gt;&gt;&gt; obj.over</span><br><span class="line"> -&gt; Overriding.__get__(&lt;Overriding object&gt;, &lt;Managed object&gt;,</span><br><span class="line"> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Managed</span>&gt;)</span></span><br><span class="line"># even with an instance attribute named over, the Managed.over descriptor still overrides attempts to read obj.over.</span><br></pre></td></tr></table></figure><h3 id="Overriding-Descriptor-Without-get"><a href="#Overriding-Descriptor-Without-get" class="headerlink" title="Overriding Descriptor Without __get__"></a>Overriding Descriptor Without __get__</h3><p>Usually, overriding descriptors implement both <strong>__set__</strong> and <strong>__get__</strong>, but it’s also possible to implement only <strong>__set__</strong>. In this case, only writing is handled by the descriptor. Reading the descriptor through an instance will return the descriptor object itself because there is no <strong>__get__</strong> to handle that access. If a namesake instance attribute is created with a new value via direct access to the instance <strong>__dict__</strong>, the <strong>__set__</strong> method will still override further attempts to set that attribute, but reading that attribute will simply return the new value from the instance, instead of returning the descriptor object. In other words, the instance attribute will shadow the descriptor, but only when reading.</p><p><strong>_Overriding descriptor without get: obj.over_no_get is an instance of OverridingNoGet_</strong></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.over_no_get</span><br><span class="line"> &lt;__main__.OverridingNoGet object at <span class="number">0x665bcc</span>&gt;</span><br><span class="line"> &gt;&gt;&gt; Managed.over_no_get</span><br><span class="line"> &lt;__main__.OverridingNoGet object at <span class="number">0x665bcc</span>&gt;</span><br><span class="line"> &gt;&gt;&gt; obj.over_no_get = <span class="number">7</span></span><br><span class="line"> -&gt; OverridingNoGet.__set__(&lt;OverridingNoGet object&gt;, &lt;Managed object&gt;, 7)</span><br><span class="line"> &gt;&gt;&gt; obj.over_no_get</span><br><span class="line"> &lt;__main__.OverridingNoGet object at <span class="number">0x665bcc</span>&gt;</span><br><span class="line"> &gt;&gt;&gt; obj.__dict__[<span class="string">'over_no_get'</span>] = <span class="number">9</span></span><br><span class="line"> &gt;&gt;&gt; obj.over_no_get</span><br><span class="line"> <span class="number">9</span></span><br><span class="line"> &gt;&gt;&gt; obj.over_no_get = <span class="number">7</span></span><br><span class="line"> -&gt; OverridingNoGet.__set__(&lt;OverridingNoGet object&gt;, &lt;Managed object&gt;, 7)</span><br><span class="line"> &gt;&gt;&gt; obj.over_no_get</span><br><span class="line"> <span class="number">9</span></span><br></pre></td></tr></table></figure><h3 id="Nonoverriding-Descriptor"><a href="#Nonoverriding-Descriptor" class="headerlink" title="Nonoverriding Descriptor"></a>Nonoverriding Descriptor</h3><p>If a descriptor does not implement <strong>__set__</strong>, then it’s a nonoverriding descriptor. Setting an instance attribute with the same name will shadow the descriptor, rendering it ineffective for handling that attribute in that specific instance. Methods are implemented as nonoverriding descriptors.</p><p><strong>_Behavior of a nonoverriding descriptor: obj.non_over is an instance of NonOverriding_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = Managed()</span><br><span class="line"> &gt;&gt;&gt; obj.non_over</span><br><span class="line"> -&gt; NonOverriding.__get__(&lt;NonOverriding object&gt;, &lt;Managed object&gt;,</span><br><span class="line"> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Managed</span>&gt;)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"># The obj now has an instance attribute named non_over, which shadows the namesake descriptor </span><br><span class="line"><span class="comment"># attribute in the Managed class.</span></span><br><span class="line"> &gt;&gt;&gt; obj.non_over = <span class="number">7</span></span><br><span class="line"> &gt;&gt;&gt; obj.non_over</span><br><span class="line"> <span class="number">7</span></span><br><span class="line"></span><br><span class="line"> &gt;&gt;&gt; Managed.non_over</span><br><span class="line"> -&gt; NonOverriding.__get__(&lt;NonOverriding object&gt;, None, &lt;class Managed&gt;)</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">del</span> obj.non_over</span><br><span class="line"> &gt;&gt;&gt; obj.non_over</span><br><span class="line"> -&gt; NonOverriding.__get__(&lt;NonOverriding object&gt;, &lt;Managed object&gt;,</span><br><span class="line"> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Managed</span>&gt;)</span></span><br></pre></td></tr></table></figure><p>Python contributors and authors use different terms when discussing these concepts. Overriding descriptors are also called data descriptors or enforced descriptors. Nonoverriding descriptors are also known as nondata descriptors or shadowable descriptors.</p><h3 id="Overwriting-a-Descriptor-in-the-Class"><a href="#Overwriting-a-Descriptor-in-the-Class" class="headerlink" title="Overwriting a Descriptor in the Class"></a>Overwriting a Descriptor in the Class</h3><p>Regardless of whether a descriptor is overriding or not, it can be overwritten by assignment to the class.</p><p><strong><em>Example 20-12 Any descriptor can be overwritten on the class itself</em></strong></p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = Managed()</span><br><span class="line"> &gt;&gt;&gt; Managed.over = <span class="number">1</span></span><br><span class="line"> &gt;&gt;&gt; Managed.over_no_get = <span class="number">2</span></span><br><span class="line"> &gt;&gt;&gt; Managed.non_over = <span class="number">3</span></span><br><span class="line"> &gt;&gt;&gt; obj.over, obj.over_no_get, obj.non_over</span><br><span class="line"> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>Example 20-12 reveals another asymmetry regarding reading and writing attributes: although the reading of a class attribute can be controlled by a descriptor with <strong>__get__</strong> attached to the managed class, the writing of a class attribute cannot be handled by a descriptor with <strong>__set__</strong> attached to the <strong>same</strong> class.</p><h2 id="Methods-Are-Descriptors"><a href="#Methods-Are-Descriptors" class="headerlink" title="Methods Are Descriptors"></a>Methods Are Descriptors</h2><p>A function within a class becomes a bound method because all user-defined functions have a <strong>__get__</strong> method, therefore they operate as descriptors when attached to a class.</p><p><strong><em>A method is a nonoverriding descriptor</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> &gt;&gt;&gt; obj = Managed()</span><br><span class="line"> &gt;&gt;&gt; obj.spam <span class="comment"># Reading from obj.spam retrieves a bound method object.</span></span><br><span class="line"> &lt;bound method Managed.spam of &lt;descriptorkinds.Managed object at <span class="number">0x74c80c</span>&gt;&gt;</span><br><span class="line"> &gt;&gt;&gt; Managed.spam <span class="comment"># But reading from Managed.spam retrieves a function.</span></span><br><span class="line"> &lt;function Managed.spam at <span class="number">0x734734</span>&gt;</span><br><span class="line"> &gt;&gt;&gt; obj.spam = <span class="number">7</span></span><br><span class="line"> &gt;&gt;&gt; obj.spam</span><br><span class="line"> <span class="number">7</span></span><br><span class="line"><span class="comment"># Assigning a value to obj.spam shadows the class attribute, rendering the spam method inaccessible </span></span><br><span class="line"><span class="comment"># from the obj instance.</span></span><br></pre></td></tr></table></figure></p><p>Because functions do not implement <strong>__set__</strong>, they are nonoverriding descriptors.</p><p><strong>obj.spam</strong> and <strong>Managed.spam</strong> retrieve different objects. As usual with descriptors, the <strong>__get__</strong> of a function returns a reference to itself when the access happens through the managed class. But when the access goes through an instance, the <strong>__get__</strong> of the function returns a bound method object: a callable that wraps the function and binds the managed instance (e.g., <strong>obj</strong>) to the first argument of the function (i.e., <strong>self</strong>), like the <strong>functools.partial</strong> function does.</p><p><strong>_method_is_descriptor.py: a Text class, derived from UserString_</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Text</span><span class="params">(collections.UserString)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Text(&#123;!r&#125;)'</span>.format(self.data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></p><p><strong><em>Experiments with a method</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>word = Text(<span class="string">'forward'</span>)</span><br><span class="line"> &gt;&gt;&gt; word</span><br><span class="line"> Text(<span class="string">'forward'</span>)</span><br><span class="line"> &gt;&gt;&gt; word.reverse()</span><br><span class="line"> Text(<span class="string">'drawrof'</span>)</span><br><span class="line"> &gt;&gt;&gt; Text.reverse(Text(<span class="string">'backward'</span>))</span><br><span class="line"> Text(<span class="string">'drawkcab'</span>)</span><br><span class="line"> &gt;&gt;&gt; type(Text.reverse), type(word.reverse)</span><br><span class="line"> (&lt;class 'function'&gt;, &lt;class 'method'&gt;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Text.reverse operates as a function, even working with objects that are not instances of Text.</span></span><br><span class="line"> &gt;&gt;&gt; list(map(Text.reverse, [<span class="string">'repaid'</span>, (<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>), Text(<span class="string">'stressed'</span>)]))</span><br><span class="line"> [<span class="string">'diaper'</span>, (<span class="number">30</span>, <span class="number">20</span>, <span class="number">10</span>), Text(<span class="string">'desserts'</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Any function is a nonoverriding descriptor. Calling its __get__ with an instance retrieves a method </span></span><br><span class="line"><span class="comment"># bound to that instance.</span></span><br><span class="line"> &gt;&gt;&gt; Text.reverse.__get__(word)</span><br><span class="line"> &lt;bound method Text.reverse of Text(<span class="string">'forward'</span>)&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Calling the function’s __get__ with None as the instance argument retrieves the function itself.</span></span><br><span class="line"> &gt;&gt;&gt; Text.reverse.__get__(<span class="keyword">None</span>, Text)</span><br><span class="line"> &lt;function Text.reverse at <span class="number">0x101244e18</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># The expression word.reverse actually invokes Text.reverse.__get__(word), returning the bound method.</span></span><br><span class="line"> &gt;&gt;&gt; word.reverse</span><br><span class="line"> &lt;bound method Text.reverse of Text(<span class="string">'forward'</span>)&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># The bound method object has a __self__ attribute holding a reference to the instance on which the </span></span><br><span class="line"><span class="comment"># method was called.</span></span><br><span class="line"> &gt;&gt;&gt; word.reverse.__self__</span><br><span class="line"> Text(<span class="string">'forward'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The __func__ attribute of the bound method is a reference to the original function attached to the </span></span><br><span class="line"><span class="comment"># managed class.</span></span><br><span class="line"> &gt;&gt;&gt; word.reverse.__func__ <span class="keyword">is</span> Text.reverse</span><br><span class="line"> <span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><p>The bound method object also has a <strong>__call__</strong> method, which handles the actual invocation. This method calls the original function referenced in <strong>__func__</strong>, passing the <strong>__self__</strong> attribute of the method as the first argument. That’s how the implicit binding of the conventional <strong>self</strong> argument works.</p><p>The way functions are turned into bound methods is a prime example of how descriptors are used as infrastructure in the language.</p><h2 id="Descriptor-Usage-Tips"><a href="#Descriptor-Usage-Tips" class="headerlink" title="Descriptor Usage Tips"></a>Descriptor Usage Tips</h2><p>The following list addresses some practical consequences of the descriptor characteristics just described:</p><p><em>Use property to Keep It Simple</em><br>The property built-in actually creates overriding descriptors implementing both <strong>__set__</strong> and <strong>__get__</strong>, even if you do not define a <strong>setter</strong> method. The default <strong>__set__</strong> of a property raises <strong>AttributeError</strong>: can’t set attribute, so a property is the easiest way to create a read-only attribute, avoiding the issue described next.</p><p><em>Read-only descriptors require \</em>_set___<br>If you use a descriptor class to implement a read-only attribute, you must remember to code both <strong>__get__</strong> and <strong>__set__</strong>, otherwise setting a namesake attribute on an instance will shadow the descriptor. The <strong>__set__</strong> method of a read-only attribute should just raise <strong>AttributeError</strong> with a suitable message.</p><p><em>Validation descriptors can work with \</em>_set__ only_<br>In a descriptor designed only for validation, the <strong>__set__</strong> method should check the value argument it gets, and if valid, set it directly in the instance <strong>__dict__</strong> using the descriptor instance name as key. That way, reading the attribute with the same name from the instance will be as fast as possible, because it will not require a <strong>__get__</strong>. </p><p><em>Caching can be done efficiently with \</em>_get__ only_<br>If you code just the <strong>__get__</strong> method, you have a nonoverriding descriptor. These are useful to make some expensive computation and then cache the result by setting an attribute by the same name on the instance. The namesake instance attribute will shadow the descriptor, so subsequent access to that attribute will fetch it directly from the instance <strong>__dict__</strong> and not trigger the descriptor <strong>__get__</strong> anymore.</p><p><em>Nonspecial methods can be shadowed by instance attributes</em><br>Because functions and methods only implement <strong>__get__</strong>, they do not handle attempts at setting instance attributes with the same name, so a simple assignment like <strong>_my_obj.the_method = 7_</strong> means that further access to the_method through that instance will retrieve the number 7—without affecting the class or other instances. However, this issue does not interfere with special methods. The interpreter only looks for special methods in the class itself, in other words, <strong>repr(x)</strong> is executed as <strong>x.__class__.__repr__(x)</strong>, so a <strong>__repr__</strong> attribute defined in <strong>x</strong> has no effect on <strong>repr(x)</strong>. For the same reason, the existence of an attribute named <strong>__getattr__</strong> in an instance will not subvert the usual attribute access algorithm.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Overriding-Versus-Nonoverriding-Descriptors&quot;&gt;&lt;a href=&quot;#Overriding-Versus-Nonoverriding-Descriptors&quot; class=&quot;headerlink&quot; title=&quot;Overriding Versus Nonoverriding Descriptors&quot;&gt;&lt;/a&gt;Overriding Versus Nonoverriding Descriptors&lt;/h2&gt;&lt;p&gt;Recall that there is an important asymmetry in the way Python handles attributes. Reading an attribute through an instance normally returns the attribute defined in the instance, but if there is no such attribute in the instance, a class attribute will be retrieved. On the other hand, assigning to an attribute in an instance normally creates the attribute in the instance, without affecting the class at all.&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C20_Attribute Descriptors_01</title>
    <link href="blog.whistlestop.ml/2018/05/25/C20-Attribute-Descriptors-01/"/>
    <id>blog.whistlestop.ml/2018/05/25/C20-Attribute-Descriptors-01/</id>
    <published>2018-05-26T05:19:17.000Z</published>
    <updated>2018-05-26T05:19:38.336Z</updated>
    
    <content type="html"><![CDATA[<p>Descriptors are a way of reusing the same access logic in multiple attributes. For example, field types in ORMs such as the Django ORM and SQL Alchemy are descriptors, managing the flow of data from the fields in a database record to Python object attributes and vice versa.<br><a id="more"></a><br>A descriptor is a class that implements a protocol consisting of the <strong>__get__</strong>, <strong>__set__</strong>, and <strong>__delete__</strong> methods. The property class implements the full descriptor protocol. As usual with protocols, partial implementations are OK. In fact, most descriptors we see in real code implement only <strong>__get__</strong> and <strong>__set__</strong>, and many implement only one of these methods.</p><h2 id="Descriptor-Example-Attribute-Validation"><a href="#Descriptor-Example-Attribute-Validation" class="headerlink" title="Descriptor Example: Attribute Validation"></a>Descriptor Example: Attribute Validation</h2><p>We’ll continue the series of <strong>LineItem</strong> examples where we left it, in “Coding a Property Factory” , by refactoring the <strong>quantity</strong> property factory into a <strong>Quantity</strong> descriptor class.</p><h3 id="LineItem-Take-3-A-Simple-Descriptor"><a href="#LineItem-Take-3-A-Simple-Descriptor" class="headerlink" title="LineItem Take # 3: A Simple Descriptor"></a>LineItem Take # 3: A Simple Descriptor</h3><p>A class implementing a <strong>__get__</strong>, a <strong>__set__</strong>, or a <strong>__delete__</strong> method is a descriptor.<br>You use a descriptor by declaring instances of it as class attributes of another class.</p><p><img src="https://user-images.githubusercontent.com/33891164/39859081-7a11a3aa-53ed-11e8-8b89-d1e1cd67499d.png" alt="image"></p><p><em>Descriptor class</em><br>A class implementing the descriptor protocol. That’s <strong>Quantity</strong> in Figure 20-1.</p><p><em>Managed class</em><br>The class where the descriptor instances are declared as class attributes—<strong>LineItem</strong> in Figure 20-1.</p><p><strong>_bulkfood_v3.py: quantity descriptors manage attributes in LineItem_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quantity</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, storage_name)</span>:</span></span><br><span class="line">        self.storage_name = storage_name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># __set__ is called when there is an attempt to assign to the managed </span></span><br><span class="line">    <span class="comment"># attribute. Here, self is the descriptor instance (i.e., LineItem.weight or </span></span><br><span class="line">    <span class="comment"># LineItem.price), instance is the managed instance (a LineItem instance), and</span></span><br><span class="line">    <span class="comment"># value is the value being assigned.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> value &gt; <span class="number">0</span>:</span><br><span class="line">            instance.__dict__[self.storage_name] = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'value must be &gt; 0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></span><br><span class="line">    weight= Quantity(<span class="string">'weight'</span>)</span><br><span class="line">    price= Quantity(<span class="string">'price'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, description, weight, price)</span>:</span></span><br><span class="line">        self.description = description</span><br><span class="line">        self.weight = weight</span><br><span class="line">        self.price = price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subtotal</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.weight * self.price</span><br></pre></td></tr></table></figure><p>When coding a <strong>__set__</strong> method, you must keep in mind what the <strong>self</strong> and <strong>instance</strong> arguments mean: <strong>self</strong> is the descriptor instance, and <strong>instance</strong> is the managed instance. Descriptors managing instance attributes should store values in the managed instances. That’s why Python provides the instance argument to the descriptor methods.</p><p>It may be tempting, but wrong, to store the value of each managed attribute in the descriptor instance itself. In other words, in the <strong>__set__</strong> method, instead of coding:</p><p><code>instance.__dict__[self.storage_name] = value</code></p><p>the tempting but bad alternative would be:</p><p><code>self.__dict__[self.storage_name] = value</code></p><p>To understand why this would be wrong, think about the meaning of the first two arguments to <strong>__set__</strong>: <strong>self</strong> and <strong>instance</strong>. Here, self is the descriptor instance, which is actually a class attribute of the managed class. You may have thousands of <strong>LineItem</strong> instances in memory at one time, but you’ll only have two instances of the descriptors: <strong>LineItem.weight</strong> and <strong>LineItem.price</strong>. So anything you store in the descriptor instances themselves is actually part of a <strong>LineItem</strong> class attribute, and therefore is shared among all <strong>LineItem</strong> instances.</p><p>A drawback is the need to repeat the names of the attributes when the descriptors are instantiated in the managed class body. It would be nice if the <strong>LineItem</strong> class could be declared like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></span><br><span class="line">    weight = Quantity()</span><br><span class="line">    price = Quantity()</span><br></pre></td></tr></table></figure><p>The problem is that the righthand side of an assignment is executed before the variable exists. The expression <strong>Quantity()</strong> is evaluated to create a descriptor instance, and at this time there is no way the code in the <strong>Quantity</strong> class can guess the name of the variable to which the descriptor will be bound (e.g., <strong>weight</strong> or <strong>price</strong>).</p><h3 id="LineItem-Take-4-Automatic-Storage-Attribute-Names"><a href="#LineItem-Take-4-Automatic-Storage-Attribute-Names" class="headerlink" title="LineItem Take # 4: Automatic Storage Attribute Names"></a>LineItem Take # 4: Automatic Storage Attribute Names</h3><p>To avoid retyping the attribute name in the descriptor declarations, we’ll generate a unique string for the <strong>storage_name</strong> of each <strong>Quantity</strong> instance. </p><p><img src="https://user-images.githubusercontent.com/33891164/39860462-42f2802e-53f2-11e8-94dd-4a382ab2421d.png" alt="image"></p><p> <strong>_bulkfood_v4.py: each Quantity descriptor gets a unique storage_name_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quantity</span>:</span></span><br><span class="line">    __counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        cls = self.__class__</span><br><span class="line">        prefix = cls.__name__</span><br><span class="line">        index= cls.__counter</span><br><span class="line">        self.storage_name= <span class="string">'_&#123;&#125;#&#123;&#125;'</span>.format(prefix, index)</span><br><span class="line">        cls.__counter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> getattr(instance, self.storage_name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> value &gt; <span class="number">0</span>:</span><br><span class="line">            setattr(instance, self.storage_name, value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'value must be &gt; 0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></span><br><span class="line">    weight = Quantity()</span><br><span class="line">    price = Quantity()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, description, weight, price)</span>:</span></span><br><span class="line">        self.description= description</span><br><span class="line">        self.weight= weight</span><br><span class="line">        self.price = price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subtotal</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.weight * self.price</span><br></pre></td></tr></table></figure><p>Here we can use the higher-level <strong>getattr</strong> and <strong>setattr</strong> built-ins to store the value—instead of resorting to <strong>instance.__dict__</strong>—because the managed attribute and the storage attribute have different names, so calling <strong>getattr</strong> on the storage attribute will not trigger the descriptor, avoiding the infinite recursion.</p><p>If you test <strong>bulkfood_v4.py</strong>, you can see that the <strong>weight</strong> and <strong>price</strong> descriptors work as expected, and the storage attributes can also be read directly, which is useful for debugging:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> bulkfood_v4 <span class="keyword">import</span> LineItem</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coconuts = LineItem(<span class="string">'Brazilian coconut'</span>, <span class="number">20</span>, <span class="number">17.95</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coconuts.weight, coconuts.price</span><br><span class="line">(<span class="number">20</span>, <span class="number">17.95</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(raisins, <span class="string">'_Quantity#0'</span>), getattr(raisins, <span class="string">'_Quantity#1'</span>)</span><br><span class="line">(<span class="number">20</span>, <span class="number">17.95</span>)</span><br></pre></td></tr></table></figure><p>Note that <strong>__get__</strong> receives three arguments: <strong>self</strong>, <strong>instance</strong>, and <strong>owner</strong>. The <strong>owner</strong> argument is a reference to the managed class (e.g., <strong>LineItem</strong>), and it’s handy when the descriptor is used to get attributes from the class. If a managed attribute, such as <strong>weight</strong>, is retrieved via the class like <strong>LineItem.weight</strong>, the descriptor <strong>__get__</strong> method receives <strong>None</strong> as the value for the <strong>instance</strong> argument. This explains the <strong>Attribute</strong> error in the next console session:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> bulkfood_v4 <span class="keyword">import</span> LineItem</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>LineItem.weight</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> ...</span><br><span class="line"> File <span class="string">".../descriptors/bulkfood_v4.py"</span>, line <span class="number">54</span>, <span class="keyword">in</span> __get__</span><br><span class="line"> <span class="keyword">return</span> getattr(instance, self.storage_name)</span><br><span class="line">AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'_Quantity#0'</span></span><br></pre></td></tr></table></figure><p><strong>_bulkfood_v4b.py (partial listing): when invoked through the managed class, get returns a reference to the descriptor itself_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quantity</span>:</span></span><br><span class="line">    __counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        cls = self.__class__</span><br><span class="line">        prefix = cls.__name__</span><br><span class="line">        index= cls.__counter</span><br><span class="line">        self.storage_name= <span class="string">'_&#123;&#125;#&#123;&#125;'</span>.format(prefix, index)</span><br><span class="line">        cls.__counter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">            <span class="comment"># If the call was not through an instance, return the descriptor itself</span></span><br><span class="line">        <span class="keyword">return</span> getattr(instance, self.storage_name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> value &gt; <span class="number">0</span>:</span><br><span class="line">            setattr(instance, self.storage_name, value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'value must be &gt; 0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></span><br><span class="line">    weight = Quantity()</span><br><span class="line">    price = Quantity()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, description, weight, price)</span>:</span></span><br><span class="line">        self.description= description</span><br><span class="line">        self.weight= weight</span><br><span class="line">        self.price = price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subtotal</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.weight * self.price</span><br></pre></td></tr></table></figure><p><strong><em>Trying out:</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> bulkfood_v4b <span class="keyword">import</span> LineItem</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>LineItem.price</span><br><span class="line">&lt;bulkfood_v4b.Quantity object at <span class="number">0x100721be0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>br_nuts = LineItem(<span class="string">'Brazil nuts'</span>, <span class="number">10</span>, <span class="number">34.95</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>br_nuts.price</span><br><span class="line"><span class="number">34.95</span></span><br></pre></td></tr></table></figure><h3 id="LineItem-Take-5-A-New-Descriptor-Type"><a href="#LineItem-Take-5-A-New-Descriptor-Type" class="headerlink" title="LineItem Take # 5: A New Descriptor Type"></a>LineItem Take # 5: A New Descriptor Type</h3><p><img src="https://user-images.githubusercontent.com/33891164/39862695-552bf87c-53f9-11e8-8a93-6e795cb9b993.png" alt="image"></p><p><strong>_model_v5.py: the refactored descriptor classes_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoStorage</span>:</span></span><br><span class="line">    __counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        cls= self.__class__</span><br><span class="line">        prefix= cls.__name__</span><br><span class="line">        index= cls.__counter</span><br><span class="line">        self.storage_name= <span class="string">'_&#123;&#125;#&#123;&#125;'</span>.format(prefix, index)</span><br><span class="line">        cls.__counter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> getattr(instance, self.storage_name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance,value)</span>:</span></span><br><span class="line">        setattr(instance, self.storage_name, value)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Validated</span><span class="params">(abc.ABC, AutoStorage)</span>:</span></span><br><span class="line">    <span class="comment">#__set__ delegates validation to a validate method</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        value= self.validate(instance, value)</span><br><span class="line">        super().__set__(instance, value)</span><br><span class="line">        <span class="comment"># uses the returned value to invoke __set__ on a superclass, which</span></span><br><span class="line">        <span class="comment"># performs the actual storage.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="string">'''return validated value or raise ValueError'''</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quantity</span><span class="params">(Validated)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span>: <span class="keyword">raise</span> ValueError(<span class="string">'value must be &gt; 0'</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonBlank</span><span class="params">(Validated)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        value = value.strip()</span><br><span class="line">        <span class="keyword">if</span> len(value) == <span class="number">0</span>: <span class="keyword">raise</span> ValueError(<span class="string">'value cannot be empty or blank'</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Descriptors are a way of reusing the same access logic in multiple attributes. For example, field types in ORMs such as the Django ORM and SQL Alchemy are descriptors, managing the flow of data from the fields in a database record to Python object attributes and vice versa.&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C19_Dynamic Attributes and Properties_02</title>
    <link href="blog.whistlestop.ml/2018/05/25/C19-Dynamic-Attributes-and-Properties-02/"/>
    <id>blog.whistlestop.ml/2018/05/25/C19-Dynamic-Attributes-and-Properties-02/</id>
    <published>2018-05-26T05:18:38.000Z</published>
    <updated>2018-05-26T05:19:00.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Using-a-Property-for-Attribute-Validation"><a href="#Using-a-Property-for-Attribute-Validation" class="headerlink" title="Using a Property for Attribute Validation"></a>Using a Property for Attribute Validation</h2><p>So far, we have only seen the <strong>@property</strong> decorator used to implement read-only properties. In this section, we will create a read/write property.<br><a id="more"></a>  </p><h3 id="LineItem-Take-1-Class-for-an-Item-in-an-Order"><a href="#LineItem-Take-1-Class-for-an-Item-in-an-Order" class="headerlink" title="LineItem Take #1: Class for an Item in an Order"></a>LineItem Take #1: Class for an Item in an Order</h3><p> <strong>_bulkfood_v1.py: the simplest LineItem class_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, description, weight, price)</span>:</span></span><br><span class="line">        self.description = description</span><br><span class="line">        self.weight= weight</span><br><span class="line">        self.price= price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subtotal</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.weight * self.price</span><br></pre></td></tr></table></figure><p><strong><em>A negative weight results in a negative subtotal</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>raisins = LineItem(<span class="string">'Golden raisins'</span>, <span class="number">10</span>, <span class="number">6.95</span>)</span><br><span class="line"> &gt;&gt;&gt; raisins.subtotal()</span><br><span class="line"> <span class="number">69.5</span></span><br><span class="line"> &gt;&gt;&gt; raisins.weight = <span class="number">-20</span> <span class="comment"># garbage in...</span></span><br><span class="line"> &gt;&gt;&gt; raisins.subtotal() <span class="comment"># garbage out...</span></span><br><span class="line"> <span class="number">-139.0</span></span><br></pre></td></tr></table></figure><h3 id="LineItem-Take-2-A-Validating-Property"><a href="#LineItem-Take-2-A-Validating-Property" class="headerlink" title="LineItem Take #2: A Validating Property"></a>LineItem Take #2: A Validating Property</h3><p>Implementing a property will allow us to use a <strong>getter</strong> and a <strong>setter</strong>, but the interface of <strong>LineItem</strong> will not change (i.e., setting the weight of a <strong>LineItem</strong> will still be written as <strong>raisins.weight = 12</strong>).</p><p><strong>_bulkfood_v2.py: a LineItem with a weight property_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, description, weight, price)</span>:</span></span><br><span class="line">        self.description = description</span><br><span class="line">        self.weight= weight</span><br><span class="line">        self.price= price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subtotal</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.weight * self.price</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">weight</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># The methodsthat implement a property all have the name of the public </span></span><br><span class="line">        <span class="comment"># attribute: weight.</span></span><br><span class="line">        <span class="keyword">return</span> self.__weight <span class="comment"># The actual value is stored in a private attribute __weight</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">weight</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> value &gt; <span class="number">0</span>:</span><br><span class="line">            self.__weight = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'value must be &gt; 0'</span>)</span><br></pre></td></tr></table></figure><p><strong><em>Note how a LineItem with an invalid weight cannot be created now:</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>walnuts = LineItem(<span class="string">'walnuts'</span>, <span class="number">0</span>, <span class="number">10.00</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> ...</span><br><span class="line">ValueError: value must be &gt; <span class="number">0</span></span><br></pre></td></tr></table></figure><p>Now we have protected <strong>weight</strong> from users providing negative values. Although buyers usually can’t set the price of an item, a clerical error or a bug may create a <strong>LineItem</strong> with a negative <strong>price</strong>. To prevent that, we could also turn <strong>price</strong> into a property, but this would entail some repetition in our code.</p><p>There are two ways to abstract away property definitions: using a property factory or a descriptor class. The descriptor class approach is more flexible, and we’ll devote Chapter 20 to a full discussion of it. Properties are in fact implemented as descriptor classes themselves.</p><h2 id="A-Proper-Look-at-Properties"><a href="#A-Proper-Look-at-Properties" class="headerlink" title="A Proper Look at Properties"></a>A Proper Look at Properties</h2><p>Although often used as a decorator, the <strong>property</strong> built-in is actually a class. In Python, functions and classes are often interchangeable, because both are callable and there is no <strong>new</strong> operator for object instantiation, so invoking a constructor is no different than invoking a factory function. And both can be used as decorators, as long as they return a new callable that is a suitable replacement of the decorated function.</p><p>This is the full signature of the <strong>property</strong> constructor:</p><p><code>property(fget=None, fset=None, fdel=None, doc=None)</code></p><p>All arguments are optional, and if a function is not provided for one of them, the corresponding operation is not allowed by the resulting property object.</p><h3 id="Properties-Override-Instance-Attributes"><a href="#Properties-Override-Instance-Attributes" class="headerlink" title="Properties Override Instance Attributes"></a>Properties Override Instance Attributes</h3><p>Properties are always class attributes, but they actually manage attribute access in the instances of the class.</p><p><strong><em>Instance attribute does not shadow class property</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Class</span>:</span></span><br><span class="line"><span class="meta">... </span>    data=<span class="string">'the class data attr'</span></span><br><span class="line"><span class="meta">... </span>    @property</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">prop</span><span class="params">(self)</span>:</span> <span class="keyword">return</span> <span class="string">'the prop value'</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj=Class()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Class.prop</span><br><span class="line">&lt;property object at <span class="number">0x05B54CC0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.prop</span><br><span class="line"><span class="string">'the prop value'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.prop= <span class="string">'foo'</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: can<span class="string">'t set attribute</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; obj.__dict__['</span>prop<span class="string">'] = '</span>foo<span class="string">'</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; vars(obj)</span></span><br><span class="line"><span class="string">&#123;'</span>prop<span class="string">': '</span>foo<span class="string">'&#125;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; obj.prop # reading obj.prop still runs the property getter. The property is not shadowed by an instance attribute.</span></span><br><span class="line"><span class="string">'</span>the prop value<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;&gt;&gt; Class.prop ='</span>baz<span class="string">' # Overwriting Class.prop destroys the property object.</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; obj.prop # Now obj.prop retrieves the instance attribute. Class.prop is not a property anymore, so it no longer overrides obj.prop.</span></span><br><span class="line"><span class="string">'</span>foo<span class="string">'</span></span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote></blockquote></blockquote></blockquote><p><strong><em>New class property shadows existing instance attribute</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.data</span><br><span class="line"><span class="string">'the class data attr'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.data= <span class="string">'bar'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Class.data</span><br><span class="line"><span class="string">'the class data attr'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Class.data = property(<span class="keyword">lambda</span> self: <span class="string">'the "data" prop value'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.data <span class="comment"># obj.data is now shadowed by the Class.data property.</span></span><br><span class="line"><span class="string">'the "data" prop value'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> Class.data</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.data</span><br><span class="line"><span class="string">'bar'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>The main point of this section is that an expression like <strong>obj.attr</strong> does not search for <strong>attr</strong> starting with obj. The search actually starts at <strong>obj.__class__</strong>, and only if there is no property named attr in the class, Python looks in the obj instance itself. This rule applies not only to properties but to a whole category of descriptors, the overriding descriptors.</p><h2 id="Property-Documentation"><a href="#Property-Documentation" class="headerlink" title="Property Documentation"></a>Property Documentation</h2><p>When tools such as the console <strong>help()</strong> function or IDEs need to display the documentation of a property, they extract the information from the <strong>_\doc__</strong> attribute of the property.</p><p>If used with the classic call syntax, <strong>property</strong> can get the documentation string as the <strong>doc</strong> argument:<br><code>weight = property(get_weight, set_weight, doc=&#39;weight in kilograms&#39;)</code></p><p>When <strong>property</strong> is deployed as a decorator, the docstring of the getter method—the one with the <strong>@property</strong> decorator itself—is used as the documentation of the property as a whole.</p><h2 id="Coding-a-Property-Factory"><a href="#Coding-a-Property-Factory" class="headerlink" title="Coding a Property Factory"></a>Coding a Property Factory</h2><p><strong>_bulkfood_v2prop.py: the quantity property factory in use_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></span><br><span class="line">    weight= quantity(<span class="string">'weight'</span>)</span><br><span class="line">    price= quantity(<span class="string">'price'</span>)</span><br><span class="line">    <span class="comment"># Use the factory to define the first custom property, weight, as a class </span></span><br><span class="line">    <span class="comment"># attribute.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, description, weight, price)</span>:</span></span><br><span class="line">        self.description= description</span><br><span class="line">        self.weight= weight</span><br><span class="line">        self.price= price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subtotal</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.weight * self.price</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quantity</span><span class="params">(storage_name)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># qty_getter references storage_name, so it will be preserved in the closure </span></span><br><span class="line">    <span class="comment"># of this function; the value is retrieved directly from the instance.__dict__</span></span><br><span class="line">    <span class="comment"># to bypass the property and avoid an infinite recursion.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">qty_getter</span><span class="params">(instance)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> instance.__dict__[storage_name]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">qty_setter</span><span class="params">(instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> value &gt; <span class="number">0</span>:</span><br><span class="line">            instance.__dict__[storage_name] = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'value must be &gt; 0'</span>)</span><br><span class="line">    <span class="keyword">return</span> property(qty_getter, qty_setter)</span><br></pre></td></tr></table></figure><p> <strong>_bulkfood_v2prop.py: the quantity property factory_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nutmeg = LineItem(<span class="string">'Moluccan nutmeg'</span>, <span class="number">8</span>, <span class="number">13.95</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Reading the weight and price through the properties shadowing the namesake instance attributes.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nutmeg.weight, nutmeg.price</span><br><span class="line"> (<span class="number">8</span>, <span class="number">13.95</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using vars to inspect the nutmeg instance: here we see the actual instance attributes used to store the values.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(vars(nutmeg).items())</span><br><span class="line"> [(<span class="string">'description'</span>, <span class="string">'Moluccan nutmeg'</span>), (<span class="string">'price'</span>, <span class="number">13.95</span>), (<span class="string">'weight'</span>, <span class="number">8</span>)]</span><br></pre></td></tr></table></figure><p>The <strong>weight</strong> property overrides the <strong>weight</strong> instance attribute so that every reference to <strong>self.weight</strong> or <strong>nutmeg.weight</strong> is handled by the property functions, and the only way to bypass the property logic is to access the instance <strong>__dict__</strong> directly.</p><h2 id="Handling-Attribute-Deletion"><a href="#Handling-Attribute-Deletion" class="headerlink" title="Handling Attribute Deletion"></a>Handling Attribute Deletion</h2><p>Recall from the Python tutorial that object attributes can be deleted using the <strong>del</strong> statement:</p><p><code>del my_object.an_attribute</code></p><p>In practice, deleting attributes is not something we do every day in Python, and the requirement to handle it with a property is even more unusual. But it is supported, and I can think of a silly example to demonstrate it.</p><p>In a property definition, the <strong>@my_propety.deleter</strong> decorator is used to wrap the method in charge of deleting the attribute managed by the property.</p><p><strong><em>blackknight.py</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">BlackKnight</span>:</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.members = [<span class="string">'an arm'</span>, </span><br><span class="line"><span class="meta">... </span>                        <span class="string">'another arm'</span>,</span><br><span class="line"><span class="meta">... </span>                        <span class="string">'a leg'</span></span><br><span class="line"><span class="meta">... </span>                        ]</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>        self.phrases = [<span class="string">"'Tis but a scratch."</span>,</span><br><span class="line"><span class="meta">... </span>                        <span class="string">"It's just a flesh wound."</span>,</span><br><span class="line"><span class="meta">... </span>                        <span class="string">"I'm invincible!"</span>]</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>    @property</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">member</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'next member is:'</span>)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self.members[<span class="number">0</span>]</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>    @member.deleter</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">member</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        text=<span class="string">'BLACK KNIGHT (loses &#123;&#125;)\n-- &#123;&#125;'</span></span><br><span class="line"><span class="meta">... </span>        print(text.format(self.members.pop(<span class="number">0</span>), self.phrases.pop(<span class="number">0</span>)))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>knight= BlackKnight()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>knight.member</span><br><span class="line">next member <span class="keyword">is</span>:</span><br><span class="line"><span class="string">'an arm'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> knight.member</span><br><span class="line">BLACK KNIGHT (loses an arm)</span><br><span class="line">-- <span class="string">'Tis but a scratch.</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; del knight.member</span></span><br><span class="line"><span class="string">BLACK KNIGHT (loses another arm)</span></span><br><span class="line"><span class="string">-- It'</span>s just a flesh wound.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> knight.member</span><br><span class="line">BLACK KNIGHT (loses a leg)</span><br><span class="line">-- I<span class="string">'m invincible!</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>Using the classic call syntax instead of decorators, the <strong>fdel</strong> argument is used to set the deleter function. For example, the <strong>member</strong> property would be coded like this in the body of the <strong>BlackKnight</strong> class:</p><p><code>member = property(member_getter, fdel=member_deleter)</code></p><p>If you are not using a property, attribute deletion can also be handled by implementing the lower-level <strong>__delattr__</strong> special method.</p><h2 id="Essential-Attributes-and-Functions-for-Attribute-Handling"><a href="#Essential-Attributes-and-Functions-for-Attribute-Handling" class="headerlink" title="Essential Attributes and Functions for Attribute Handling"></a>Essential Attributes and Functions for Attribute Handling</h2><h3 id="Special-Attributes-that-Affect-Attribute-Handling"><a href="#Special-Attributes-that-Affect-Attribute-Handling" class="headerlink" title="Special Attributes that Affect Attribute Handling"></a>Special Attributes that Affect Attribute Handling</h3><p>The behavior of many of the functions and special methods listed in the following sections depend on three special attributes:</p><p><strong>__class__</strong><br>A reference to the object’s class (i.e., <strong>obj.__class__</strong> is the same as <strong>type(obj)</strong>). Python looks for special methods such as <strong>__getattr__</strong> only in an object’s class, and not in the instances themselves.</p><p><strong>__dict__</strong><br>A mapping that stores the writable attributes of an object or class. An object that has a <strong>__dict__</strong> can have arbitrary new attributes set at any time. If a class has a <strong>__slots__</strong> attribute, then its instances may not have a <strong>__dict__</strong>. See <strong>__slots__</strong>  (next).</p><p><strong>__slots__</strong><br>An attribute that may be defined in a class to limit the attributes its instances can have. <strong>__slots__</strong>  is a tuple of strings naming the allowed attributes. If the ‘<strong>__dict__</strong>‘ name is not in <strong>__slots__</strong> , then the instances of that class will not have a <strong>__dict__</strong> of their own, and only the named attributes will be allowed in them.</p><h3 id="Built-In-Functions-for-Attribute-Handling"><a href="#Built-In-Functions-for-Attribute-Handling" class="headerlink" title="Built-In Functions for Attribute Handling"></a>Built-In Functions for Attribute Handling</h3><p>These five built-in functions perform object attribute reading, writing, and introspection:</p><p><strong>dir([object])</strong><br>Lists most attributes of the object. The official docs say <strong>dir</strong> is intended for interactive use so it does not provide a comprehensive list of attributes, but an “interesting” set of names. <strong>dir</strong> can inspect objects implemented with or without a <strong>__dict__</strong>. The <strong>__dict__</strong> attribute itself is not listed by <strong>dir</strong>, but the <strong>__dict__</strong> keys are listed. Several special attributes of classes, such as <strong>__mro__</strong>, <strong>__bases__</strong>, and <strong>__name__</strong> are not listed by <strong>dir</strong> either. If the optional object argument is not given, <strong>dir</strong> lists the names in the current scope.</p><p><strong>getattr(object, name[, default])</strong><br>Gets the attribute identified by the name string from the object. This may fetch an attribute from the object’s class or from a superclass. If no such attribute exists, <strong>getattr</strong> raises <strong>AttributeError</strong> or returns the default value, if given.</p><p><strong>hasattr(object, name)</strong><br>Returns <strong>True</strong> if the named attribute exists in the object, or can be somehow fetched through it (by inheritance, for example). The documentation explains: “This is implemented by calling <strong>getattr(object, name)</strong> and seeing whether it raises an <strong>AttributeError</strong> or not.”</p><p><strong>setattr(object, name, value)</strong><br>Assigns the value to the named attribute of object, if the object allows it. This may create a new attribute or overwrite an existing one.</p><p><strong>vars([object])</strong><br>Returns the <strong>__dict__</strong> of object; vars can’t deal with instances of classes that define <strong>__slots__</strong>  and don’t have a <strong>__dict__</strong> (contrast with <strong>dir</strong>, which handles such instances). Without an argument, <strong>vars()</strong> does the same as <strong>locals()</strong>: returns a <strong>dict</strong> representing the local scope.</p><h3 id="Special-Methods-for-Attribute-Handling"><a href="#Special-Methods-for-Attribute-Handling" class="headerlink" title="Special Methods for Attribute Handling"></a>Special Methods for Attribute Handling</h3><p>Attribute access using either dot notation or the built-in functions <strong>getattr</strong>, <strong>hasattr</strong>, and <strong>setattr</strong> trigger the appropriate special methods listed here. Reading and writing attributes directly in the instance <strong>__dict__</strong> does not trigger these special methods— and that’s the usual way to bypass them if needed.</p><p>In other words, assume that the special methods will be retrieved on the class itself, even when the target of the action is an instance. For this reason, special methods are not shadowed by instance attributes with the same name.</p><p>In the following examples, assume there is a class named <strong>Class</strong>, <strong>obj</strong> is an instance of <strong>Class</strong>, and <strong>attr</strong> is an attribute of <strong>obj</strong>.</p><p>For every one of these special methods, it doesn’t matter if the attribute access is done using dot notation or one of the built-in functions listed in “Built-In Functions for Attribute Handling”. For example, both <strong>obj.attr</strong> and <strong>getattr(obj, ‘attr’, 42)</strong> trigger <strong>Class.__getattribute__(obj, ‘attr’)</strong>.</p><p><strong><strong>delattr</strong>(self, name)</strong><br>Always called when there is an attempt to delete an attribute using the <strong>del</strong> statement; e.g., <strong>del obj.attr</strong> triggers <strong>Class.__delattr__(obj, ‘attr’)</strong>.</p><p><strong>__dict__(self)</strong><br>Called when <strong>dir</strong> is invoked on the object, to provide a listing of attributes; e.g.,<br><strong>dir(obj)</strong> triggers <strong>Class.__dict__(obj)</strong>.</p><p><strong>__getattr__(self, name)</strong><br>Called only when an attempt to retrieve the named attribute fails, after the <strong>obj</strong>, <strong>Class</strong>, and its superclasses are searched. The expressions <strong>obj.no_such_attr</strong>, get <strong>attr(obj, ‘.no_such_attr’)</strong>, and <strong>hasattr(obj, ‘.no_such_attr’)</strong> may trigger <strong>Class.__getattr__(obj, ‘.no_such_attr’)</strong>, but only if an attribute by that name cannot be found in <strong>obj</strong> or in <strong>Class</strong> and its superclasses.</p><p><strong>__getattribute__(self, name)</strong><br>Always called when there is an attempt to retrieve the named attribute, except when the attribute sought is a special attribute or method. Dot notation and the <strong>getattr</strong> and <strong>hasattr</strong> built-ins trigger this method. <strong>__getattr__</strong> is only invoked after <strong>__getattribute__</strong>, and only when <strong>__getattribute__</strong> raises <strong>AttributeError</strong>. To retrieve attributes of the instance <strong>obj</strong> without triggering an infinite recursion, implementations of <strong>__getattribute__</strong> should use <strong>super().__getattribute__(obj, name)</strong>.</p><p><strong>__setattr__(self, name, value)</strong><br>Always called when there is an attempt to set the named attribute. Dot notation and the <strong>setattr</strong> built-in trigger this method; e.g., both <strong>obj.attr = 42</strong> and <strong>setattr(obj, ‘attr’, 42)</strong> trigger <strong>Class.__setattr__(obj, ‘attr’, 42)</strong>.</p><p>In practice, because they are unconditionally called and affect practically every attribute access, the  <strong>__getattribute__</strong> and <strong>__setattr__</strong> special methods are harder to use correctly than <strong>__getattr__</strong>—which only handles nonexisting attribute names. Using properties or descriptors is less error prone than defining these special methods.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Using-a-Property-for-Attribute-Validation&quot;&gt;&lt;a href=&quot;#Using-a-Property-for-Attribute-Validation&quot; class=&quot;headerlink&quot; title=&quot;Using a Property for Attribute Validation&quot;&gt;&lt;/a&gt;Using a Property for Attribute Validation&lt;/h2&gt;&lt;p&gt;So far, we have only seen the &lt;strong&gt;@property&lt;/strong&gt; decorator used to implement read-only properties. In this section, we will create a read/write property.&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C19_Dynamic Attributes and Properties_01</title>
    <link href="blog.whistlestop.ml/2018/05/25/C19-Dynamic-Attributes-and-Properties-01/"/>
    <id>blog.whistlestop.ml/2018/05/25/C19-Dynamic-Attributes-and-Properties-01/</id>
    <published>2018-05-26T05:17:52.000Z</published>
    <updated>2018-05-26T05:18:22.230Z</updated>
    
    <content type="html"><![CDATA[<p>Data attributes and methods are collectively known as <strong>attributes</strong> in Python: a method is just an attribute that is <strong>callable</strong>. Besides data attributes and methods, we can also create properties, which can be used to replace a public data attribute with <strong>accessor methods</strong> (i.e., getter/setter), without changing the class interface.<br><a id="more"></a><br>Besides properties, Python provides a rich API for controlling attribute access and implementing dynamic attributes. The interpreter calls special methods such as <strong>__getattr__</strong> and <strong>__setattr__</strong> to evaluate attribute access using dot notation (e.g.,<strong>obj.attr</strong>). A user-defined class implementing <strong>__getattr__</strong> can implement “virtual attributes” by computing values on the fly whenever somebody tries to read a nonexistent attribute like <strong>obj.no_such_attribute</strong>.</p><h3 id="Data-Wrangling-with-Dynamic-Attributes"><a href="#Data-Wrangling-with-Dynamic-Attributes" class="headerlink" title="Data Wrangling with Dynamic Attributes"></a>Data Wrangling with Dynamic Attributes</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">**_osconfeed.py: downloading osconfeed.json_**</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">URL=<span class="string">'http://www.oreilly.com/pub/sc/osconfeed'</span></span><br><span class="line">JSON= <span class="string">'data/osconfeed.json'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(JSON):</span><br><span class="line">        msg= <span class="string">'downloading &#123;&#125; to &#123;&#125;'</span>.format(URL, JSON)</span><br><span class="line">        warnings.warn(msg)</span><br><span class="line">        <span class="keyword">with</span> urlopen(URL) <span class="keyword">as</span> remote, open(JSON, <span class="string">'wb'</span>) <span class="keyword">as</span> local:</span><br><span class="line">            local.write(remote.read())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(JSON) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="keyword">return</span> json.load(fp)</span><br><span class="line">    <span class="comment"># The json.load function parses a JSON file and returns native Python objects.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>feed = load()</span><br><span class="line"> &gt;&gt;&gt; sorted(feed[<span class="string">'Schedule'</span>].keys())</span><br><span class="line"> [<span class="string">'conferences'</span>, <span class="string">'events'</span>, <span class="string">'speakers'</span>, <span class="string">'venues'</span>]</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">for</span> key, value <span class="keyword">in</span> sorted(feed[<span class="string">'Schedule'</span>].items()):</span><br><span class="line"> ... print(<span class="string">'&#123;:3&#125; &#123;&#125;'</span>.format(len(value), key))</span><br><span class="line"> ...</span><br><span class="line"><span class="number">1</span> conferences</span><br><span class="line"> <span class="number">484</span> events</span><br><span class="line"> <span class="number">357</span> speakers</span><br><span class="line"> <span class="number">53</span> venues</span><br><span class="line"> &gt;&gt;&gt; feed[<span class="string">'Schedule'</span>][<span class="string">'speakers'</span>][<span class="number">-1</span>][<span class="string">'name'</span>]</span><br><span class="line"> <span class="string">'Carina C. Zona'</span></span><br><span class="line"> &gt;&gt;&gt; feed[<span class="string">'Schedule'</span>][<span class="string">'speakers'</span>][<span class="number">-1</span>][<span class="string">'serial'</span>]</span><br><span class="line"> <span class="number">141590</span></span><br><span class="line"> &gt;&gt;&gt; feed[<span class="string">'Schedule'</span>][<span class="string">'events'</span>][<span class="number">40</span>][<span class="string">'name'</span>]</span><br><span class="line"> <span class="string">'There *Will* Be Bugs'</span></span><br><span class="line"> &gt;&gt;&gt; feed[<span class="string">'Schedule'</span>][<span class="string">'events'</span>][<span class="number">40</span>][<span class="string">'speakers'</span>]</span><br><span class="line"> [<span class="number">3471</span>, <span class="number">5199</span>]</span><br></pre></td></tr></table></figure><h3 id="Exploring-JSON-Like-Data-with-Dynamic-Attributes"><a href="#Exploring-JSON-Like-Data-with-Dynamic-Attributes" class="headerlink" title="Exploring JSON-Like Data with Dynamic Attributes"></a>Exploring JSON-Like Data with Dynamic Attributes</h3><p>The syntax <strong>feed[‘Schedule’][‘events’][40][‘name’]</strong> is cumbersome. In JavaScript, you can get the same value by writing <strong>feed.Schedule.events[40].name</strong>. It’s easy to implement a <strong>dict-like</strong> class that does the same in Python.</p><p>The keystone of the <strong>FrozenJSON</strong> class is the <strong>__getattr__</strong> method, It’s essential to recall that the <strong>__getattr__</strong> special method is only invoked by the interpreter when the usual process fails to retrieve an attribute (i.e., when the named attribute cannot be found in the instance, nor in the class or in its superclasses).</p><p><strong><em>explore0.py: turn a JSON dataset into a FrozenJSON holding nested FrozenJSON objects, lists, and simple types</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> abc</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrozenJson</span>:</span></span><br><span class="line">    <span class="string">''' read-only for navigating a JSON-like object using attribute</span></span><br><span class="line"><span class="string">    notation</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mapping)</span>:</span></span><br><span class="line">        self.__data= dict(mapping)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(self.__data, name):</span><br><span class="line">            <span class="keyword">return</span> getattr(self.__data, name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> FrozenJson.build(self.__data[name])</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(cls, obj)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(obj, abc.Mapping):</span><br><span class="line">            <span class="keyword">return</span> cls(obj)</span><br><span class="line">        <span class="keyword">elif</span> isinstance(obj, abc.MutableSequence):</span><br><span class="line">            <span class="keyword">return</span> [cls.build(item) <span class="keyword">for</span> item <span class="keyword">in</span> obj]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure><h4 id="The-Invalid-Attribute-Name-Problem"><a href="#The-Invalid-Attribute-Name-Problem" class="headerlink" title="The Invalid Attribute Name Problem"></a>The Invalid Attribute Name Problem</h4><p>The <strong>FrozenJSON</strong> class has a limitation: there is no special handling for attribute names<br>that are Python keywords.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>grad=FrozenJson(&#123;<span class="string">'name'</span>:<span class="string">'Jim'</span>,<span class="string">'class'</span>:<span class="number">1982</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>grad.<span class="keyword">class</span></span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    grad.<span class="keyword">class</span></span><br><span class="line">             ^</span><br><span class="line">SyntaxError: invalid syntax</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(grad, <span class="string">'class'</span>)</span><br><span class="line"><span class="number">1982</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>But the idea of <strong>FrozenJSON</strong> is to provide convenient access to the data, so a better solution is checking whether a key in the mapping given to <strong>FrozenJSON.__init__</strong> is a keyword, and if so, append an <strong>_</strong> to it, so the attribute can be read like this:</p><p> <strong>_explore1.py: append a _ to attribute names that are Python keywords_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mapping)</span>:</span></span><br><span class="line">        self.__data= &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> mapping.items():</span><br><span class="line">            <span class="keyword">if</span> keyword.iskeyword(key):</span><br><span class="line">                key+=<span class="string">'_'</span></span><br><span class="line">            self.__data[key]=value</span><br><span class="line"></span><br><span class="line"><span class="comment"># A similar problem may arise if a key in the JSON is not a valid Python identifier:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = FrozenJSON(&#123;<span class="string">'2be'</span>:<span class="string">'or not'</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x<span class="number">.2</span>be</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span></span><br><span class="line"> x<span class="number">.2</span>be</span><br><span class="line"> ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p>Such problematic keys are easy to detect in Python 3 because the <strong>str</strong> class provides the <strong>s.isidentifier()</strong> method, which tells you whether s is a valid Python identifier according to the language grammar.</p><h3 id="Flexible-Object-Creation-with-new"><a href="#Flexible-Object-Creation-with-new" class="headerlink" title="Flexible Object Creation with __new__"></a>Flexible Object Creation with __new__</h3><p>We often refer to<strong>__init__</strong> as the constructor method, but that’s because we adopted jargon from other languages. The special method that actually constructs an instance is <strong>__new__</strong>: it’s a class method (but gets special treatment, so the <strong>@classmethod</strong> decorator is not used), and it must return an instance. That instance will in turn be passed as the first argument <strong>self</strong> of <strong>__init__</strong>. Because <strong>__init__</strong> gets an instance when called, and it’s actually forbidden from returning anything, <strong>__init__</strong> is really an “initializer.” The real constructor is <strong>__new__</strong>—which we rarely need to code because the implementation inherited from <strong>object</strong> suffices.</p><p>The path just described, from <strong>__new__</strong> to <strong>__init__</strong>, is the most common, but not the only one. The <strong>__new__</strong> method can also return an instance of a different class, and when that happens, the interpreter does not call <strong>__init__</strong>.</p><p>In other words, the process of building an object in Python can be summarized with this pseudocode:</p><h1 id="pseudo-code-for-object-construction"><a href="#pseudo-code-for-object-construction" class="headerlink" title="pseudo-code for object construction"></a>pseudo-code for object construction</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">object_maker</span><span class="params">(the_class, some_arg)</span>:</span></span><br><span class="line"> new_object = the_class.__new__(some_arg)</span><br><span class="line"> <span class="keyword">if</span> isinstance(new_object, the_class):</span><br><span class="line"> the_class.__init__(new_object, some_arg)</span><br><span class="line"> <span class="keyword">return</span> new_object</span><br><span class="line"><span class="comment"># the following statements are roughly equivalent</span></span><br><span class="line">x = Foo(<span class="string">'bar'</span>)</span><br><span class="line">x = object_maker(Foo, <span class="string">'bar'</span>)</span><br></pre></td></tr></table></figure><p><strong><em>explore2.py: using new instead of build to construct new objects that may or may not be instances of FrozenJSON</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> abc</span><br><span class="line"><span class="keyword">from</span> keyword <span class="keyword">import</span> iskeyword</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FrozenJSON</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, arg)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(arg, abc.Mapping):</span><br><span class="line">            <span class="keyword">return</span> super().__new__(cls)</span><br><span class="line">        <span class="comment"># The default behavior is to delegate to the __new__ of a super class. In</span></span><br><span class="line">        <span class="comment"># this case, we are calling __new__ from the object base class, passing </span></span><br><span class="line">        <span class="comment"># FrozenJSON as the only argument.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> isinstance(arg, abc.MutableSequence):</span><br><span class="line">            <span class="keyword">return</span> [cls(item) <span class="keyword">for</span> item <span class="keyword">in</span> arg]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> arg</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mapping)</span>:</span></span><br><span class="line">        self.__data=&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> mapping.items():</span><br><span class="line">            <span class="keyword">if</span> iskeyword(key):</span><br><span class="line">                key+=<span class="string">'_'</span></span><br><span class="line">            self.__data[key]= value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(self.__data, name):</span><br><span class="line">            <span class="keyword">return</span> getattr(self.__data, name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> FrozenJSON(self.__data[name])</span><br></pre></td></tr></table></figure><h3 id="Restructuring-the-OSCON-Feed-with-shelve"><a href="#Restructuring-the-OSCON-Feed-with-shelve" class="headerlink" title="Restructuring the OSCON Feed with shelve"></a>Restructuring the OSCON Feed with shelve</h3><p>The funny name of the standard <strong>shelve</strong> module makes sense when you realize that <strong>pickle</strong> is the name of the Python object serialization format—and of the module that converts objects to/from that format. Because pickle jars are kept in shelves, it makes sense that <strong>shelve</strong> provides <strong>pickle</strong> storage.</p><p>The <strong>shelve.open</strong> high-level function returns a <strong>shelve.Shelf</strong> instance—a simple key-value object database backed by the <strong>dbm</strong> module, with these characteristics:</p><ul><li><strong>shelve.Shelf</strong> subclasses <strong>abc.MutableMapping</strong>, so it provides the essential methods we expect of a mapping type</li><li>In addition, <strong>shelve.Shelf</strong> provides a few other I/O management methods, like <strong>sync</strong> and <strong>close</strong>; it’s also a context manager.</li><li>Keys and values are saved whenever a new value is assigned to a key.</li><li>The keys must be strings.</li><li>The values must be objects that the <strong>pickle</strong> module can handle.</li></ul><p><strong><em>schedule1.py: exploring OSCON schedule data saved to a shelve.Shelf</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">import</span> osconfeed</span><br><span class="line"></span><br><span class="line">DB_NAME= <span class="string">'data/schedule1_db'</span></span><br><span class="line">CONFERENCE= <span class="string">'conference.115'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Record</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        self.__dict__.update(kwargs)</span><br><span class="line">        <span class="comment"># a common shortcut to build an instance with attributes created from </span></span><br><span class="line">        <span class="comment"># keyword arguments</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_db</span><span class="params">(db)</span>:</span></span><br><span class="line">    raw_data= osconfeed.load()</span><br><span class="line">    warnings.warn(<span class="string">'loading '</span>+ DB_NAME)</span><br><span class="line">    <span class="keyword">for</span> collection, rec_list <span class="keyword">in</span> raw_data[<span class="string">'Shedule'</span>].items():</span><br><span class="line">        record_type=collection[:<span class="number">-1</span>]</span><br><span class="line">        <span class="comment">#record_type is set to the collection name without the trailing 's'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> record <span class="keyword">in</span> rec_list:</span><br><span class="line">            key= <span class="string">'&#123;&#125;.&#123;&#125;'</span>.format(record_type, record[<span class="string">'serial'</span>])</span><br><span class="line">            record[<span class="string">'serial'</span>] = key</span><br><span class="line">            db[key]= Record(**record)</span><br></pre></td></tr></table></figure><p><strong><em>Trying out the functionality provided by schedule1.py</em></strong> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> shelve</span><br><span class="line"> &gt;&gt;&gt; db = shelve.open(DB_NAME)</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">if</span> CONFERENCE <span class="keyword">not</span> <span class="keyword">in</span> db:</span><br><span class="line"> ... load_db(db)</span><br><span class="line"> ...</span><br><span class="line"> &gt;&gt;&gt; speaker = db[<span class="string">'speaker.3471'</span>]</span><br><span class="line"> &gt;&gt;&gt; type(speaker)</span><br><span class="line"> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">schedule1</span>.<span class="title">Record</span>'&gt;</span></span><br><span class="line"> &gt;&gt;&gt; speaker.name, speaker.twitter</span><br><span class="line"> (<span class="string">'Anna Martelli Ravenscroft'</span>, <span class="string">'annaraven'</span>)</span><br><span class="line"> &gt;&gt;&gt; db.close()</span><br></pre></td></tr></table></figure><p>The <strong>Record.__init__</strong> method illustrates a popular Python hack. Recall that the<br><strong>__dict__</strong> of an object is where its attributes are kept—unless <strong>__slots__</strong> is declared in<br>the class.So, updating an instance <strong>__dict__</strong> with a mapping is a quick way to create a bunch of<br>attributes in that instance.</p><p><strong><em>schedule2.py</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"><span class="keyword">import</span> osconfeed</span><br><span class="line"></span><br><span class="line">DB_NAME= <span class="string">'data/schedule2_db'</span></span><br><span class="line">CONFERENCE=<span class="string">'conference.115'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Record</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, **kwargs)</span>:</span></span><br><span class="line">        self.__dict__.update(**kwargs)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(other, Record):</span><br><span class="line">            <span class="keyword">return</span> self.__dict__== other.__dict__</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">NotImplemented</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MissingDatabaseError</span><span class="params">(RuntimeError)</span>:</span></span><br><span class="line">    <span class="string">'''when a database id required but was not set'''</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DbRecord</span><span class="params">(Record)</span>:</span></span><br><span class="line">    __db = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_db</span><span class="params">(db)</span>:</span> DbRecord.__db = db</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_db</span><span class="params">()</span>:</span> <span class="keyword">return</span> DbRecord.__db</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fetch</span><span class="params">(cls, ident)</span>:</span></span><br><span class="line">        db= cls.get_db()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> db[ident]</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            <span class="keyword">if</span> db <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                msg= <span class="string">'database not set; call "&#123;&#125;.set_db(my_db)"'</span></span><br><span class="line">                <span class="keyword">raise</span> MissingDatabaseError(msg.format(cls.__name__))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(self, <span class="string">'serial'</span>):</span><br><span class="line">            cls_name = self.__class__.__name__</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&lt;&#123;&#125; serial=&#123;!r&#125;&gt;'</span>.format(cls_name, self.serial)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> super().__repr__()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Event</span><span class="params">(DbRecord)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">venue</span><span class="params">(self)</span>:</span></span><br><span class="line">        key= <span class="string">'venue.&#123;&#125;'</span>.format(self.venue_serial)</span><br><span class="line">        <span class="keyword">return</span> self.__class__.fetch(key)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speakers</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'_speaker_objs'</span>):</span><br><span class="line">            spkr_serials= self.__dict__[<span class="string">'speakers'</span>]</span><br><span class="line">            fetch= self.__class__.fetch</span><br><span class="line">            self._speaker_objs=[fetch(<span class="string">'speaker.&#123;&#125;'</span>.format(key)) <span class="keyword">for</span> key <span class="keyword">in</span> spkr_serials]</span><br><span class="line">            <span class="keyword">return</span> self._speaker_objs</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(self, <span class="string">'name'</span>):</span><br><span class="line">            cls_name = self.__class__.__name__</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'&lt;&#123;&#125; &#123;!r&#125;&gt;'</span>.format(cls_name, self.name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> super().__repr__()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_db</span><span class="params">(db)</span>:</span></span><br><span class="line">    raw_data= osconfeed.load()</span><br><span class="line">    warnings.warn(<span class="string">'loading '</span>+DB_NAME)</span><br><span class="line">    <span class="keyword">for</span> collection, rec_list <span class="keyword">in</span> raw_data[<span class="string">'Schedule'</span>].items():</span><br><span class="line">        record_type= collection[:<span class="number">-1</span>]</span><br><span class="line">        cls_name= record_type.capitalize()</span><br><span class="line">        cls= globals().get(cls_name, DbRecord) </span><br><span class="line">        <span class="keyword">if</span> inspect.isclass(cls) <span class="keyword">and</span> issubclass(cls, DbRecord):</span><br><span class="line">            factory= cls</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            factory= DbRecord</span><br><span class="line">        <span class="keyword">for</span> record <span class="keyword">in</span> rec_list:</span><br><span class="line">            key= <span class="string">'&#123;&#125;.&#123;&#125;'</span>.format(record_type, record[<span class="string">'serial'</span>])</span><br><span class="line">            record[<span class="string">'serial'</span>]= key</span><br><span class="line">            db[key]= factory(**record)</span><br></pre></td></tr></table></figure><p> <strong><em>Extract from the doctests of schedule2.py</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>DbRecord.set_db(db)</span><br><span class="line"> &gt;&gt;&gt; event = DbRecord.fetch(<span class="string">'event.33950'</span>)</span><br><span class="line"> &gt;&gt;&gt; event</span><br><span class="line"> &lt;Event <span class="string">'There *Will* Be Bugs'</span>&gt;</span><br><span class="line"> &gt;&gt;&gt; event.venue</span><br><span class="line"> &lt;DbRecord serial=<span class="string">'venue.1449'</span>&gt;</span><br><span class="line"> &gt;&gt;&gt; event.venue.name</span><br><span class="line"> <span class="string">'Portland 251'</span></span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">for</span> spkr <span class="keyword">in</span> event.speakers:</span><br><span class="line"> ... print(<span class="string">'&#123;0.serial&#125;: &#123;0.name&#125;'</span>.format(spkr))</span><br><span class="line"> ...</span><br><span class="line"> speaker<span class="number">.3471</span>: Anna Martelli Ravenscroft</span><br><span class="line"> speaker<span class="number">.5199</span>: Alex Martelli</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Data attributes and methods are collectively known as &lt;strong&gt;attributes&lt;/strong&gt; in Python: a method is just an attribute that is &lt;strong&gt;callable&lt;/strong&gt;. Besides data attributes and methods, we can also create properties, which can be used to replace a public data attribute with &lt;strong&gt;accessor methods&lt;/strong&gt; (i.e., getter/setter), without changing the class interface.&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C17_Concurrency with Futures(Not finished) </title>
    <link href="blog.whistlestop.ml/2018/05/25/C17-Concurrency-with-Futures/"/>
    <id>blog.whistlestop.ml/2018/05/25/C17-Concurrency-with-Futures/</id>
    <published>2018-05-26T05:16:17.000Z</published>
    <updated>2018-05-26T05:17:30.574Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>flags.py: sequential download script; some functions will be reused by the other scripts</em></strong></p><p>import os<br>import time<br>import sys<br>import requests</p><p>POP20_CC = (‘CN IN US ID BR PK NG BD RU JP ‘<br> ‘MX PH VN ET EG DE IR TR CD FR’).split() </p><p>BASE_URL= ‘<a href="http://flupy.org/data/flags&#39;" target="_blank" rel="noopener">http://flupy.org/data/flags&#39;</a></p><p>DEST_DIR= ‘downloads/‘</p><p>def save_flag(img, filename):<br>    path= os.path.join(DEST_DIR, filename)<br>    with open(path, ‘wb’) as fp:<br>        fp.write(img)</p><p>def get_flag(cc):<br>    url=’{}/{cc}/{cc}.gif’.format(BASE_URL, cc= cc.lower())<br>    resp = requests.get(url)<br>    return resp.content</p><h1 id="Display-a-string-and-flush-sys-stdout-so-we-can-see-progress-in-a-one-line"><a href="#Display-a-string-and-flush-sys-stdout-so-we-can-see-progress-in-a-one-line" class="headerlink" title="Display a string and flush sys.stdout so we can see progress in a one-line"></a>Display a string and flush sys.stdout so we can see progress in a one-line</h1><h1 id="display-this-is-needed-because-Python-normally-waits-for-a-line-break-to-flush"><a href="#display-this-is-needed-because-Python-normally-waits-for-a-line-break-to-flush" class="headerlink" title="display; this is needed because Python normally waits for a line break to flush"></a>display; this is needed because Python normally waits for a line break to flush</h1><h1 id="the-stdout-buffer"><a href="#the-stdout-buffer" class="headerlink" title="the stdout buffer."></a>the stdout buffer.</h1><p>def show(text):<br>    print(text,end= ‘ ‘)<br>    sys.stdout.flush()</p><p>def download_many(cc_list):<br>    for cc in sorted(cc_list):<br>        image= get_flag(cc)<br>        show(cc)<br>        save_flag(image, cc.lower()+’.gif’)<br>    return len(cc_list)</p><p>def main(download_many):<br>    t0=time.time()<br>    count= download_many(POP20_CC)<br>    elapsed= time.time() - t0<br>    msg= ‘\n{} flags downloaded in {:.2f}s’<br>    print(msg.format(count, elapsed))</p><p>if <strong>name</strong>== ‘<strong>main</strong>‘:<br>    main(download_many)</p><h3 id="Downloading-with-concurrent-futures"><a href="#Downloading-with-concurrent-futures" class="headerlink" title="Downloading with concurrent.futures"></a>Downloading with concurrent.futures</h3><p><strong>_flags_threadpool.py: threaded download script using futures.ThreadPoolExecutor_</strong></p><p>from concurrent import futures</p><p>from flags import save_flag, get_flag, show, main</p><p>MAX_WORKERS = 20</p><p>def download_one(cc):<br>    image= get_flag(cc)<br>    show(cc)<br>    save_flag(img, cc.lower()+’.gif’)<br>    return cc</p><p>def download_many(cc_list):<br>    workers= min(MAX_WORKERS, len(cc_list))<br>    with futures.ThreadPoolExecutor(workers) as executor:<br>        res=executor.map(download_one, sorted(cc_list))</p><pre><code>return len(list(res))</code></pre><p>if <strong>name</strong>== ‘<strong>main</strong>‘:<br>    main(download_many)</p><h1 id="flags-threadpool-ac-py"><a href="#flags-threadpool-ac-py" class="headerlink" title="flags_threadpool_ac.py"></a>flags_threadpool_ac.py</h1><p>def download_many(cc_list):<br>    cc_list= cc_list[:5]<br>    with futures.ThreadPoolExecutor(max_workers = 3) as executor:<br>        to_do=[]<br>        for cc in sorted(cc_list):<br>            future = executor.submit(download_one, cc)</p><pre><code>        # executor.submit schedules the callable to be executed, and returns a        # future representing this pending operation.        to_do.append(future)        msg= &apos;Scheduled for {}: {}&apos;        print(msg.format(cc, future))    results=[]    for future in futures.as_completed(to_do):#as_completed yields futures as they are completed.        res= future.result() # Get the result of this future.        msg=&apos;{} result: {!r}&apos;        print(msg.format(future, res))        results.append(res)return len(results)</code></pre><h3 id="Blocking-I-O-and-the-GIL"><a href="#Blocking-I-O-and-the-GIL" class="headerlink" title="Blocking I/O and the GIL"></a>Blocking I/O and the GIL</h3><p>The CPython interpreter is not thread-safe internally, so it has a Global Interpreter Lock<br>(GIL), which allows only one thread at a time to execute Python bytecodes. That’s why<br>a single Python process usually cannot use multiple CPU cores at the same time.</p><p>When we write Python code, we have no control over the GIL, but a built-in function<br>or an extension written in C can release the GIL while running time-consuming tasks.<br>In fact, a Python library coded in C can manage the GIL, launch its own OS threads,<br>and take advantage of all available CPU cores. This complicates the code of the library<br>considerably, and most library authors don’t do it<br>However, all standard library functions that perform blocking I/O release the GIL when<br>waiting for a result from the OS. This means Python programs that are I/O bound can<br>benefit from using threads at the Python level: while one Python thread is waiting for<br>a response from the network, the blocked I/O function releases the GIL so another<br>thread can run.</p><h3 id="Launching-Processes-with-concurrent-futures"><a href="#Launching-Processes-with-concurrent-futures" class="headerlink" title="Launching Processes with concurrent.futures"></a>Launching Processes with concurrent.futures</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;em&gt;flags.py: sequential download script; some functions will be reused by the other scripts&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;import os&lt;br&gt;im
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C16_Coroutines</title>
    <link href="blog.whistlestop.ml/2018/05/25/C16-Coroutines/"/>
    <id>blog.whistlestop.ml/2018/05/25/C16-Coroutines/</id>
    <published>2018-05-26T05:15:33.000Z</published>
    <updated>2018-05-26T05:15:58.425Z</updated>
    
    <content type="html"><![CDATA[<p>We find two main senses for the verb “to yield” in dictionaries: to produce or to give way. Both senses apply in Python when we use the <strong>yield</strong> keyword in a generator. A line such as <strong>yield</strong> item produces a value that is received by the caller of <strong>next(…)</strong>, and it also gives way, suspending the execution of the generator so that the caller may proceed until it’s ready to consume another value by invoking <strong>next()</strong> again. The caller pulls values from the generator.<br><a id="more"></a><br>A <strong>coroutine</strong> is syntactically like a generator: just a function with the <strong>yield</strong> keyword in its body. However, in a <strong>coroutine</strong>, <strong>yield</strong> usually appears on the right side of an expression (e.g., <strong>datum = yield</strong>), and it may or may not produce a value—if there is no expression after the yield keyword, the generator yields <strong>None</strong>. The <strong>coroutine</strong> may receive data from the caller, which uses <strong>.send(datum)</strong> instead of <strong>next(…)</strong> to feed the <strong>coroutine</strong>. Usually, the caller pushes values into the <strong>coroutine</strong>.</p><p>It is even possible that no data goes in or out through the <strong>yield</strong> keyword. Regardless of the flow of data, <strong>yield</strong> is a control flow device that can be used to implement cooperative multitasking: each <strong>coroutine</strong> yields control to a central scheduler so that other <strong>coroutines</strong> can be activated.</p><p><strong><em>How Coroutines Evolved from Generators</em></strong></p><p>Using <strong>.send(…)</strong>, the caller of the generator can post data that then becomes the value of the <strong>yield</strong> expression inside the generator function. This allows a generator to be used as a <strong>coroutine</strong>: a procedure that collaborates with the caller, yielding and receiving values from the caller.</p><p>In addition to <strong>.send(…)</strong>, PEP 342 also added <strong>.throw(…)</strong> and <strong>.close()</strong> methods that respectively allow the caller to throw an exception to be handled inside the generator, and to terminate it.</p><p>When you start thinking of <strong>yield</strong> primarily in terms of control flow, you have the mindset to understand <strong>coroutines</strong>.</p><p><strong><em>Basic Behavior of a Generator Used as a Coroutine</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">simple_coroutine</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'-&gt; coroutine started'</span>)</span><br><span class="line"><span class="meta">... </span>    x = <span class="keyword">yield</span> <span class="comment"># 1</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'-&gt; coroutine received:'</span>, x)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_coro = simple_coroutine()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_coro </span><br><span class="line">&lt;generator object simple_coroutine at <span class="number">0x05D8CA80</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(my_coro) <span class="comment"># 2</span></span><br><span class="line">-&gt; coroutine started</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_coro.send(<span class="number">42</span>) <span class="comment"># 3</span></span><br><span class="line">-&gt; coroutine received: 42</span><br><span class="line">Traceback (most recent call last): <span class="comment"># 4</span></span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><ol><li><strong>yield</strong> is used in an expression; when the coroutine is designed just to receive data from the client it yields None—this is implicit because there is no expression to the right of the yield keyword.</li><li>The first call is <strong>next(…)</strong> because the generator hasn’t started so it’s not waiting in a <strong>yield</strong> and we can’t send it any data initially.</li><li>This call makes the <strong>yield</strong> in the <strong>coroutine</strong> body evaluate to 42; now the <strong>coroutine</strong> resumes and runs until the next <strong>yield</strong> or termination.</li><li>In this case, control flows off the end of the coroutine body, which prompts the generator machinery to raise <strong>StopIteration</strong>, as usual.</li></ol><p>A <strong>coroutine</strong> can be in one of four states. You can determine the current state using the <strong>inspect.getgeneratorstate(…)</strong> function, which returns one of these strings:</p><p><strong>‘GEN_CREATED’</strong><br>Waiting to start execution.</p><p><strong>‘GEN_RUNNING’</strong><br>Currently being executed by the interpreter.</p><p><strong>‘GEN_SUSPENDED’</strong><br>Currently suspended at a yield expression.</p><p><strong>‘GEN_CLOSED’</strong><br>Execution has completed.</p><p>Because the argument to the <strong>send</strong> method will become the value of the pending <strong>yield</strong> expression, it follows that you can only make a call like <strong>my_coro.send(42)</strong> if the coroutine is currently suspended. But that’s not the case if the <strong>coroutine</strong> has never been activated—when its state is <strong>‘GEN_CREATED’</strong>. That’s why the first activation of a <strong>coroutine</strong> is always done with <strong>next(my_coro)</strong>—you can also call <strong>my_coro.send(None)</strong>, and the effect is the same.</p><p>If you create a <strong>coroutine</strong> object and immediately try to send it a value that is not <strong>None</strong>, this is what happens:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_coro = simple_coroutine()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_coro.send(<span class="number">1729</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: can<span class="string">'t send non-None value to a just-started generator</span></span><br></pre></td></tr></table></figure><p>The initial call <strong>next(my_coro)</strong> is often described as “priming” the <strong>coroutine</strong> (i.e., advancing it to the first <strong>yield</strong> to make it ready for use as a live coroutine).</p><p><strong><em>A coroutine that yields twice</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">simple_coro2</span><span class="params">(a)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'-&gt; Started: a ='</span>, a)</span><br><span class="line"><span class="meta">... </span>    b = <span class="keyword">yield</span> a</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'-&gt; Received: b ='</span>, b)</span><br><span class="line"><span class="meta">... </span>    c = <span class="keyword">yield</span> a + b</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'-&gt; Received: c ='</span>, c)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_coro2=simple_coro2(<span class="number">14</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> inspect <span class="keyword">import</span> getgeneratorstate</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getgeneratorstate(my_coro2)</span><br><span class="line"><span class="string">'GEN_CREATED'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(my_coro2)</span><br><span class="line">-&gt; Started: a = 14</span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getgeneratorstate(my_coro2)</span><br><span class="line"><span class="string">'GEN_SUSPENDED'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_coro2.send(<span class="number">28</span>) <span class="comment"># 1</span></span><br><span class="line">-&gt; Received: b = 28</span><br><span class="line"><span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_coro2.send(<span class="number">99</span>) <span class="comment"># 2</span></span><br><span class="line">-&gt; Received: c = 99</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure><ol><li>Send number <strong>28</strong> to suspended coroutine; the <strong>yield</strong> expression evaluates to <strong>28</strong> and that number is bound to <strong>b</strong>. The <strong>-&gt; Received: b = 28</strong> message is displayed, the value of <strong>a + b</strong> is yielded (<strong>42</strong>), and the coroutine is suspended waiting for the value to be assigned to <strong>c</strong>.</li><li>Send number <strong>99</strong> to suspended coroutine; the yield expression evaluates to <strong>99</strong> the number is bound to <strong>c</strong>. The <strong>-&gt; Received: c = 99</strong> message is displayed, then the coroutine terminates, causing the generator object to raise <strong>StopIteration</strong>.</li></ol><p>It’s crucial to understand that the execution of the <strong>coroutine</strong> is suspended exactly at the <strong>yield</strong> keyword. As mentioned before, in an assignment statement, the code to the right of the <strong>=</strong> is evaluated before the actual assignment happens. This means that in a line like <strong>b = yield a</strong>, the value of <strong>b</strong> will only be set when the coroutine is activated later by the client code. It takes some effort to get used to this fact, but understanding it is essential to make sense of the use of yield in asynchronous programming.</p><p>Execution of the <strong>simple_coro2</strong> coroutine can be split in three phases:</p><ol><li><strong>next(my_coro2)</strong> prints first message and runs to yield <strong>a</strong>, yielding number <strong>14</strong>.</li><li><strong>my_coro2.send(28)</strong> assigns <strong>28</strong> to <strong>b</strong>, prints second message, and runs to <strong>yield a +<br>b</strong>, yielding number <strong>42</strong>.</li><li><strong>my_coro2.send(99)</strong> assigns <strong>99</strong> to <strong>c</strong>, prints third message, and the coroutine ter‐<br>minates.</li></ol><h3 id="Example-Coroutine-to-Compute-a-Running-Average"><a href="#Example-Coroutine-to-Compute-a-Running-Average" class="headerlink" title="Example: Coroutine to Compute a Running Average"></a>Example: Coroutine to Compute a Running Average</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    total= <span class="number">0.0</span></span><br><span class="line"><span class="meta">... </span>    count = <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    average = <span class="keyword">None</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> <span class="keyword">True</span>: <span class="comment"># 1</span></span><br><span class="line"><span class="meta">... </span>        term = <span class="keyword">yield</span> average <span class="comment"># 2</span></span><br><span class="line"><span class="meta">... </span>        total += term</span><br><span class="line"><span class="meta">... </span>        count += <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>        average = total / count</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro_avg = averager()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(coro_avg)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro_avg.send(<span class="number">10</span>)</span><br><span class="line"><span class="number">10.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro_avg.send(<span class="number">30</span>)</span><br><span class="line"><span class="number">20.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro_avg.send(<span class="number">5</span>)</span><br><span class="line"><span class="number">15.0</span></span><br></pre></td></tr></table></figure><ol><li>This infinite loop means this coroutine will keep on accepting values and producing results as long as the caller sends them. This coroutine will only terminate when the caller calls <strong>.close()</strong> on it, or when it’s garbage collected because there are no more references to it.</li><li>The <strong>yield</strong> statement here is used to suspend the coroutine, produce a result to the caller, and—later—to get a value sent by the caller to the coroutine, which resumes its infinite loop.</li></ol><p>The call <strong>next(coro_avg)</strong> makes the coroutine advance to the <strong>yield</strong>, yielding the initial value for <strong>average</strong>, which is <strong>None</strong>, so it does not appear on the console. At this point, the coroutine is suspended at the yield, waiting for a value to be sent. The line <strong>coro_avg.send(10)</strong> provides that value, causing the coroutine to activate, assigning it to <strong>term</strong>, updating the <strong>total</strong>, <strong>count</strong>, and <strong>average</strong> variables, and then starting another iteration in the <strong>while</strong> loop, which yields the <strong>average</strong> and waits for another term.</p><h3 id="Decorators-for-Coroutine-Priming"><a href="#Decorators-for-Coroutine-Priming" class="headerlink" title="Decorators for Coroutine Priming"></a>Decorators for Coroutine Priming</h3><p>You can’t do much with a coroutine without priming it: we must always remember to call <strong>next(my_coro)</strong> before <strong>my_coro.send(x)</strong>. To make coroutine usage more convenient, a priming decorator is sometimes used.</p><p><strong><em>coroutil.py: decorator for priming coroutine</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">coroutine</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">... </span>    @wraps(func)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">primer</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>        gen= func(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>        next(gen)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> gen</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> primer</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@coroutine</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    total= <span class="number">0.0</span></span><br><span class="line"><span class="meta">... </span>    count = <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    average= <span class="keyword">None</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="meta">... </span>        term= <span class="keyword">yield</span> average</span><br><span class="line"><span class="meta">... </span>        total += term</span><br><span class="line"><span class="meta">... </span>        count += <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>        average = total/count</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro_avg= averager()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getgeneratorstate(coro_avg)</span><br><span class="line"><span class="string">'GEN_SUSPENDED'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro_avg.send(<span class="number">10</span>)</span><br><span class="line"><span class="number">10.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro_avg.send(<span class="number">30</span>)</span><br><span class="line"><span class="number">20.0</span></span><br></pre></td></tr></table></figure><h3 id="Coroutine-Termination-and-Exception-Handling"><a href="#Coroutine-Termination-and-Exception-Handling" class="headerlink" title="Coroutine Termination and Exception Handling"></a>Coroutine Termination and Exception Handling</h3><p>An unhandled exception within a coroutine propagates to the caller of the <strong>next</strong> or <strong>send</strong> that triggered it.</p><p><strong><em>How an unhandled exception kills a coroutine</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro_avg.send(<span class="string">'spam'</span>) <span class="comment"># 1</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">8</span>, <span class="keyword">in</span> averager</span><br><span class="line">TypeError: unsupported operand type(s) <span class="keyword">for</span> +=: <span class="string">'float'</span> <span class="keyword">and</span> <span class="string">'str'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro_avg.send(<span class="number">60</span>) <span class="comment"># 2</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure></p><ol><li>Sending a nonnumeric value causes an exception inside the coroutine.</li><li>Because the exception was not handled in the coroutine, it terminated. Any attempt to reactivate it will raise <strong>StopIteration</strong>.</li></ol><p>Since Python 2.5, generator objects have two methods that allow the client to explicitly send exceptions into the coroutine—<strong>throw</strong> and <strong>close</strong>:</p><p><strong>generator.throw(exc_type[, exc_value[, traceback]])</strong><br>Causes the <strong>yield</strong> expression where the generator was paused to raise the exception given. If the exception is handled by the generator, flow advances to the next yield, and the value yielded becomes the value of the <strong>generator.throw</strong> call. If the exception is not handled by the generator, it propagates to the context of the caller.</p><p><strong>generator.close()</strong><br>Causes the <strong>yield</strong> expression where the generator was paused to raise a <strong>GeneratorExit</strong> exception. No error is reported to the caller if the generator does not handle that exception or raises <strong>StopIteration</strong>—usually by running to completion. When receiving a <strong>GeneratorExit</strong>, the generator must not yield a value, otherwise a <strong>RuntimeError</strong> is raised. If any other exception is raised by the generator, it propagates to the caller.</p><p> <strong>_coro_exc_demo.py: test code for studying exception handling in a coroutine_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">DemoException</span><span class="params">(Exception)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">'''An exception type for the demonstration.'''</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">demo_exc_handling</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'-&gt; coroutine started'</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>            x = <span class="keyword">yield</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">except</span> DemoException:</span><br><span class="line"><span class="meta">... </span>            print(<span class="string">'*** DemoException handled. Continuing...'</span>)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>            print(<span class="string">'-&gt; coroutine received: &#123;!r&#125;'</span>.format(x))</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">raise</span> RuntimeError(<span class="string">'This line should never run.'</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>exc_coro= demo_exc_handling()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(exc_coro)</span><br><span class="line">-&gt; coroutine started</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>exc_coro.send(<span class="number">11</span>)</span><br><span class="line">-&gt; coroutine received: 11</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>exc_coro.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getgeneratorstate(exc_coro)</span><br><span class="line"><span class="string">'GEN_CLOSED'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><strong>_Throwing DemoException into demo_exc_handling does not break it_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>exc_coro= demo_exc_handling()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(exc_coro)</span><br><span class="line">-&gt; coroutine started</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>exc_coro.send(<span class="number">11</span>)</span><br><span class="line">-&gt; coroutine received: 11</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>exc_coro.throw(DemoException)</span><br><span class="line">*** DemoException handled. Continuing...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getgeneratorstate(exc_coro)</span><br><span class="line"><span class="string">'GEN_SUSPENDED'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><strong><em>Coroutine terminates if it can’t handle an exception thrown into it</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>exc_coro= demo_exc_handling()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(exc_coro)</span><br><span class="line">-&gt; coroutine started</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>exc_coro.send(<span class="number">11</span>)</span><br><span class="line">-&gt; coroutine received: 11</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>exc_coro.throw(ZeroDivisionError)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">5</span>, <span class="keyword">in</span> demo_exc_handling</span><br><span class="line">ZeroDivisionError</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getgeneratorstate(exc_coro)</span><br><span class="line"><span class="string">'GEN_CLOSED'</span></span><br></pre></td></tr></table></figure><p>If it’s necessary that some cleanup code is run no matter how the coroutine ends, you need to wrap the relevant part of the coroutine body in a <strong>try/finally</strong> block.</p><p><strong>_coro_finally_demo.py: use of try/finally to perform actions on coroutine termination_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoException</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="string">'''An exception type for the demonstration.'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo_finally</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'-&gt; coroutine started'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                x = <span class="keyword">yield</span></span><br><span class="line">            <span class="keyword">except</span> DemoException:</span><br><span class="line">                print(<span class="string">'*** DemoException handled. Continuing...'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'-&gt; coroutine received: &#123;!r&#125;'</span>.format(x))</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">'-&gt; coroutine ending'</span>)</span><br></pre></td></tr></table></figure><h3 id="Returning-a-Value-from-a-Coroutine"><a href="#Returning-a-Value-from-a-Coroutine" class="headerlink" title="Returning a Value from a Coroutine"></a>Returning a Value from a Coroutine</h3><p><strong><em>coroaverager2.py: code for an averager coroutine that returns a result</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">Result= namedtuple(<span class="string">'Result'</span>, <span class="string">'count average'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">()</span>:</span></span><br><span class="line">    total = <span class="number">0.0</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    average = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        term = <span class="keyword">yield</span></span><br><span class="line">        <span class="keyword">if</span> term <span class="keyword">is</span> <span class="keyword">None</span>: <span class="comment"># 1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        total += term</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        average = total / count</span><br><span class="line">    <span class="keyword">return</span> Result(count, average) <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><ol><li>In order to return a value, a coroutine must terminate normally; this is why this version of averager has a condition to break out of its accumulating loop.</li><li><p>Return a <strong>namedtuple</strong> with the count and average. Before Python 3.3, it was a syntax error to return a value in a generator function.</p><p><strong><em>coroaverager2.py: doctest showing the behavior of averager</em></strong></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro_avg= averager()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(coro_avg)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro_avg.send(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro_avg.send(<span class="number">30</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro_avg.send(<span class="keyword">None</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration: Result(count=<span class="number">2</span>, average=<span class="number">20.0</span>)</span><br><span class="line"><span class="comment"># Sending None terminates the loop, causing the coroutine to end by returning the result. As usual, the </span></span><br><span class="line"><span class="comment"># generator object raises StopIteration. The value attribute of the exception carries the value returned.</span></span><br></pre></td></tr></table></figure><p>Note that the value of the return expression is smuggled to the caller as an attribute of the <strong>StopIteration</strong> exception. This is a bit of a hack, but it preserves the existing behavior of generator objects: raising <strong>StopIteration</strong> when exhausted.</p><p> <strong><em>Catching StopIteration lets us get the value returned by averager</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro_avg= averager()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(coro_avg)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro_avg.send(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>coro_avg.send(<span class="number">30</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    coro_avg.send(<span class="keyword">None</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> StopIteration <span class="keyword">as</span> exc:</span><br><span class="line"><span class="meta">... </span>    result= exc.value</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result</span><br><span class="line">Result(count=<span class="number">2</span>, average=<span class="number">20.0</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="Using-yield-from"><a href="#Using-yield-from" class="headerlink" title="Using yield from"></a>Using yield from</h3><p>The first thing to know about <strong>yield from</strong> is that it is a completely new language construct. It does so much more than <strong>yield</strong> that the reuse of that keyword is arguably misleading. Similar constructs in other languages are called <strong>await</strong>, and that is a much better name because it conveys a crucial point: when a generator <strong>gen</strong> calls <strong>yield from</strong> <strong>subgen()</strong>, the <strong>subgen</strong> takes over and will yield values to the caller of <strong>gen</strong>; the caller will in effect drive <strong>subgen</strong> directly. Meanwhile <strong>gen</strong> will be blocked, waiting until <strong>subgen</strong> terminates.</p><p> <strong><em>Chaining iterables with yield from</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">chain</span><span class="params">(*iterables)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> it <span class="keyword">in</span> iterables:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">yield</span> <span class="keyword">from</span> it</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'ABC'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = tuple(range(<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(chain(s, t))</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>The first thing the <strong>yield from x</strong> expression does with the <strong>x</strong> object is to call <strong>iter(x)</strong> to obtain an iterator from it. This means that <strong>x</strong> can be any <strong>iterable</strong>.</p><p>However, if replacing nested <strong>for</strong> loops yielding values was the only contribution of <strong>yield from</strong>, this language addition wouldn’t have had a good chance of being accepted. The real nature of <strong>yield from</strong> cannot be demonstrated with simple iterables; it requires the mind-expanding use of nested generators. That’s why PEP 380, which introduced <strong>yield from</strong>, is titled “Syntax for Delegating to a Subgenerator.”</p><p>The main feature of <strong>yield from</strong> is to open a bidirectional channel from the outermost caller to the innermost subgenerator, so that values can be sent and yielded back and forth directly from them, and exceptions can be thrown all the way in without adding a lot of exception handling boilerplate code in the intermediate coroutines. This is what enables coroutine delegation in a way that was not possible before.</p><p><em>delegating generator</em><br>The generator function that contains the <strong>yield from <iterable></iterable></strong> expression.</p><p><em>subgenerator</em><br>The generator obtained from the <strong><iterable></iterable></strong> part of the <strong>yield from</strong> expression. This is the “subgenerator” mentioned in the title of PEP 380: “Syntax for Delegating to a Subgenerator.”</p><p><em>caller</em><br>PEP 380 uses the term “caller” to refer to the client code that calls the delegating generator. Depending on context, I use “client” instead of “caller,” to distinguish from the delegating generator, which is also a “caller” (it calls the subgenerator)</p><p><strong><em>coroaverager3.py: using yield from to drive averager and report statistics</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">Result= namedtuple(<span class="string">'Result'</span>, <span class="string">'count average'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># the subgenerator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">()</span>:</span></span><br><span class="line">    total= <span class="number">0.0</span></span><br><span class="line">    count= <span class="number">0</span></span><br><span class="line">    average= <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        term= <span class="keyword">yield</span> <span class="comment"># Each value sent by the client code in main will be bound to term here.</span></span><br><span class="line">        <span class="keyword">if</span> term <span class="keyword">is</span> <span class="keyword">None</span>: <span class="comment"># The crucial terminating condition. Without it, a yield</span></span><br><span class="line">           <span class="comment"># from calling this coroutine will block forever.</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        total+= term</span><br><span class="line">        count+= <span class="number">1</span></span><br><span class="line">        average= total/ count</span><br><span class="line">    <span class="keyword">return</span> Result(count, average)</span><br><span class="line">    <span class="comment"># The returned Result will be the value of the yield from expression in grouper</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># the delegating generator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">grouper</span><span class="params">(results, key)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:<span class="comment"># Each iteration in thisloop creates a new instance of averager; </span></span><br><span class="line">        <span class="comment"># each is a generator object operating as a coroutine.</span></span><br><span class="line">        </span><br><span class="line">        results[key] = <span class="keyword">yield</span> <span class="keyword">from</span> averager()</span><br><span class="line">        <span class="comment"># Whenever grouper is sent a value, it’s piped into the averager instance </span></span><br><span class="line">        <span class="comment"># by the yield from. grouper will be suspended here as long as the </span></span><br><span class="line">        <span class="comment"># averager instance is consuming values sent by the client. When an </span></span><br><span class="line">        <span class="comment"># averager instance runs to the end, the value it returns is bound to </span></span><br><span class="line">        <span class="comment"># results[key]. The while loop then proceeds to create another averager </span></span><br><span class="line">        <span class="comment"># instance to consume more values.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># the client code</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(data)</span>:</span></span><br><span class="line">    results=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> key, values <span class="keyword">in</span> data.items():</span><br><span class="line">        group= grouper(results, key) </span><br><span class="line">        <span class="comment"># group is a generator objectresulting from calling grouper with the </span></span><br><span class="line">        <span class="comment"># results dict to collect the results, and a particular key. It will </span></span><br><span class="line">        <span class="comment"># operate as a coroutine.</span></span><br><span class="line">        </span><br><span class="line">        next(group) <span class="comment"># Prime the coroutine.</span></span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> values:</span><br><span class="line">            group.send(value)</span><br><span class="line">            <span class="comment"># Send each value into the grouper. That value ends up in the term = </span></span><br><span class="line">            <span class="comment"># yield line of averager; grouper never has a chance to see it.</span></span><br><span class="line"></span><br><span class="line">        group.send(<span class="keyword">None</span>)</span><br><span class="line">        <span class="comment"># Sending None into grouper causes the current averager instance to </span></span><br><span class="line">        <span class="comment"># terminate, and allows grouper to run again, which creates another </span></span><br><span class="line">        <span class="comment"># averager for the next group of values</span></span><br><span class="line"></span><br><span class="line">    report(results)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">report</span><span class="params">(results)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> key, result <span class="keyword">in</span> sorted(results.items()):</span><br><span class="line">        group, unit = key.split(<span class="string">';'</span>)</span><br><span class="line">        print(<span class="string">'&#123;:2&#125; &#123;:5&#125; averaging &#123;:.2f&#125;&#123;&#125;'</span>.format(</span><br><span class="line">            result.count, group, result.average, unit</span><br><span class="line">            ))</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line"> <span class="string">'girls;kg'</span>:</span><br><span class="line"> [<span class="number">40.9</span>, <span class="number">38.5</span>, <span class="number">44.3</span>, <span class="number">42.2</span>, <span class="number">45.2</span>, <span class="number">41.7</span>, <span class="number">44.5</span>, <span class="number">38.0</span>, <span class="number">40.6</span>, <span class="number">44.5</span>],</span><br><span class="line"> <span class="string">'girls;m'</span>:</span><br><span class="line"> [<span class="number">1.6</span>, <span class="number">1.51</span>, <span class="number">1.4</span>, <span class="number">1.3</span>, <span class="number">1.41</span>, <span class="number">1.39</span>, <span class="number">1.33</span>, <span class="number">1.46</span>, <span class="number">1.45</span>, <span class="number">1.43</span>],</span><br><span class="line"> <span class="string">'boys;kg'</span>:</span><br><span class="line"> [<span class="number">39.0</span>, <span class="number">40.8</span>, <span class="number">43.2</span>, <span class="number">40.8</span>, <span class="number">43.1</span>, <span class="number">38.6</span>, <span class="number">41.4</span>, <span class="number">40.6</span>, <span class="number">36.3</span>],</span><br><span class="line"> <span class="string">'boys;m'</span>:</span><br><span class="line"> [<span class="number">1.38</span>, <span class="number">1.5</span>, <span class="number">1.32</span>, <span class="number">1.25</span>, <span class="number">1.37</span>, <span class="number">1.48</span>, <span class="number">1.25</span>, <span class="number">1.49</span>, <span class="number">1.46</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main(data)</span><br></pre></td></tr></table></figure><p>What would happen if we omitted the call <strong>group.send(None)</strong> marked “important!” in main:<br>• Each iteration of the outer <strong>for</strong> loop creates a new <strong>grouper</strong> instance named <strong>group</strong>; this is the delegating generator.<br>• The call <strong>next(group)</strong> primes the <strong>grouper</strong> delegating generator, which enters its while <strong>True</strong> loop and suspends at the <strong>yield from</strong>, after calling the subgenerator <strong>averager</strong>.<br>• The inner <strong>for</strong> loop calls <strong>group.send(value)</strong>; this feeds the subgenerator <strong>averager</strong> directly. Meanwhile, the current <strong>group</strong> instance of <strong>grouper</strong> is suspended at the <strong>yield from</strong>.<br>• When the inner <strong>for</strong> loop ends, the <strong>group</strong> instance is still suspended at the <strong>yield from</strong>, so the assignment to <strong>results[key]</strong> in the body of grouper has not happened yet.<br>• Without the last <strong>group.send(None)</strong> in the outer <strong>for</strong> loop, the <strong>averager</strong> subgenerator never terminates, the delegating generator group is never reactivated, and the assignment to <strong>results[key]</strong> never happens.<br>• When execution loops back to the top of the outer <strong>for</strong> loop, a new <strong>grouper</strong> instance is created and bound to <strong>group</strong>. The previous <strong>grouper</strong> instance is garbage collected (together with its own unfinished <strong>averager</strong> subgenerator instance).</p><p>Example 16-17 demonstrates the simplest arrangement of <strong>yield from</strong>, with only one delegating generator and one subgenerator. Because the delegating generator works as a pipe, you can connect any number of them in a pipeline: one delegating generator uses <strong>yield from</strong> to call a subgenerator, which itself is a delegating generator calling another subgenerator with <strong>yield from</strong>, and so on. Eventually this chain must end in a simple generator that uses just <strong>yield</strong>, but it may also end in any iterable object.</p><p>Every <strong>yield from</strong> chain must be driven by a client that calls <strong>next(…)</strong> or <strong>.send(…)</strong> on the outermost delegating generator. This call may be implicit, such as a <strong>for</strong> loop.</p><h3 id="The-Meaning-of-yield-from"><a href="#The-Meaning-of-yield-from" class="headerlink" title="The Meaning of yield from"></a>The Meaning of yield from</h3><p>• Any values that the subgenerator yields are passed directly to the caller of the delegating generator (i.e., the client code).<br>• Any values sent to the delegating generator using <strong>send()</strong> are passed directly to the subgenerator. If the sent value is <strong>None</strong>, the subgenerator’s <strong>__next__()</strong> method is called. If the sent value is not <strong>None</strong>, the subgenerator’s <strong>send()</strong> method is called. If the call raises <strong>StopIteration</strong>, the delegating generator is resumed. Any other exception is propagated to the delegating generator.<br>• <strong>return</strong> expr in a generator (or subgenerator) causes <strong>StopIteration(expr)</strong> to be raised upon exit from the generator.<br>• The value of the <strong>yield from</strong> expression is the first argument to the <strong>StopIteration</strong> exception raised by the subgenerator when it terminates.</p><p>The other two features of <strong>yield from</strong> have to do with exceptions and termination:<br>• Exceptions other than <strong>GeneratorExit</strong> thrown into the delegating generator are passed to the <strong>throw()</strong> method of the subgenerator. If the call raises <strong>StopIteration</strong>, the delegating generator is resumed. Any other exception is propagated to the delegating generator.<br>• If a <strong>GeneratorExit</strong> exception is thrown into the delegating generator, or the <strong>close()</strong> method of the delegating generator is called, then the <strong>close()</strong> method of the subgenerator is called if it has one. If this call results in an exception, it is propagated to the delegating generator. Otherwise, <strong>GeneratorExit</strong> is raised in the delegating generator.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We find two main senses for the verb “to yield” in dictionaries: to produce or to give way. Both senses apply in Python when we use the &lt;strong&gt;yield&lt;/strong&gt; keyword in a generator. A line such as &lt;strong&gt;yield&lt;/strong&gt; item produces a value that is received by the caller of &lt;strong&gt;next(…)&lt;/strong&gt;, and it also gives way, suspending the execution of the generator so that the caller may proceed until it’s ready to consume another value by invoking &lt;strong&gt;next()&lt;/strong&gt; again. The caller pulls values from the generator.&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C15_Context Managers and else Blocks</title>
    <link href="blog.whistlestop.ml/2018/05/25/C15-Context-Managers-and-else-Blocks/"/>
    <id>blog.whistlestop.ml/2018/05/25/C15-Context-Managers-and-else-Blocks/</id>
    <published>2018-05-26T05:14:42.000Z</published>
    <updated>2018-05-26T05:15:12.792Z</updated>
    
    <content type="html"><![CDATA[<p>The <strong>with</strong> statement sets up a temporary context and reliably tears it down, under the control of a context manager object. This prevents errors and reduces boilerplate code, making APIs at the same time safer and easier to use. Python programmers are finding lots of uses for with blocks beyond automatic file closing.</p><p>This is no secret, but it is an underappreciated language feature: the <strong>else</strong> clause can be used not only in if statements but also in <strong>for</strong>, <strong>while</strong>, and <strong>try</strong> statements.<br><a id="more"></a>   </p><h3 id="Do-This-Then-That-else-Blocks-Beyond-if"><a href="#Do-This-Then-That-else-Blocks-Beyond-if" class="headerlink" title="Do This, Then That: else Blocks Beyond if"></a>Do This, Then That: else Blocks Beyond if</h3><p><strong><em>for</em></strong><br>The <strong>else</strong> block will run only if and when the <strong>for</strong> loop runs to completion (i.e., not if the for is aborted with a break).</p><p><strong><em>while</em></strong><br>The <strong>else</strong> block will run only if and when the <strong>while</strong> loop exits because the condition became <strong>falsy</strong> (i.e., not when the <strong>while</strong> is aborted with a <strong>break</strong>).</p><p><em><strong>try</strong></em><br>The <strong>else</strong> block will only run if no exception is raised in the <strong>try</strong> block. The official docs also state: “Exceptions in the <strong>else</strong> clause are not handled by the preceding<strong>except</strong> clauses.”</p><p>In all cases, the <strong>else</strong> clause is also skipped if an exception or a <strong>return</strong>, <strong>break</strong>, or <strong>continue</strong> statement causes control to jump out of the main block of the compound statement.</p><h3 id="Context-Managers-and-with-Blocks"><a href="#Context-Managers-and-with-Blocks" class="headerlink" title="Context Managers and with Blocks"></a>Context Managers and with Blocks</h3><p>The context manager protocol consists of the <strong>__enter__</strong> and <strong>__exit__</strong> methods. At the start of the with, <strong>__enter__</strong> is invoked on the context manager object. The role of the finally clause is played by a call to <strong>__exit__</strong> on the context manager object at the end of the with block.</p><p><strong><em>mirror.py</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LookingGlass</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">import</span> sys</span><br><span class="line">        self.original_write= sys.stdout.write</span><br><span class="line">        sys.stdout.write= self.reverse_write</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'JABBERWOCKY'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_write</span><span class="params">(self, text)</span>:</span></span><br><span class="line">        self.original_write(text[::<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Python calls __exit__ with None, None, None if all went well; if an </span></span><br><span class="line">    <span class="comment">#exception is raised, the three arguments get the exception data, as </span></span><br><span class="line">    <span class="comment">#described next.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_value, traceback)</span>:</span></span><br><span class="line">        <span class="keyword">import</span> sys</span><br><span class="line">        sys.stdout.write= self.original_write</span><br><span class="line">        <span class="keyword">if</span> exc_type <span class="keyword">is</span> ZeroDivisionError:</span><br><span class="line">            print(<span class="string">'Please DO NOT divide by zero!'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="comment">#return True to tell the interpreter that the exception was handled.</span></span><br><span class="line">        <span class="comment">#If __exit__ returns None or anything but True, any exception raised in </span></span><br><span class="line">        <span class="comment">#the with block will be propagated.</span></span><br></pre></td></tr></table></figure></p><p>The interpreter calls the <strong>__enter__</strong> method with no arguments—beyond the implicit self. The three arguments passed to <strong>__exit__</strong> are:</p><p><strong>exc_type</strong><br>The exception class (e.g., <strong>ZeroDivisionError</strong>).</p><p><strong>exc_value</strong><br>The exception instance. Sometimes, parameters passed to the exception constructor—such as the error message—can be found in <strong>exc_value.args</strong>.</p><p><strong>traceback</strong><br>A <strong>traceback</strong> object.</p><p><strong><em>Exercising LookingGlass without a with block</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> mirror <span class="keyword">import</span> LookingGlass</span><br><span class="line"> &gt;&gt;&gt; manager = LookingGlass()</span><br><span class="line"> &gt;&gt;&gt; manager</span><br><span class="line"> &lt;mirror.LookingGlass object at <span class="number">0x2a578ac</span>&gt;</span><br><span class="line"> &gt;&gt;&gt; monster = manager.__enter__()</span><br><span class="line"> &gt;&gt;&gt; monster == <span class="string">'JABBERWOCKY'</span></span><br><span class="line"> eurT</span><br><span class="line"> &gt;&gt;&gt; monster</span><br><span class="line"> <span class="string">'YKCOWREBBAJ'</span></span><br><span class="line"> &gt;&gt;&gt; manager</span><br><span class="line"> &gt;ca875a2x0 ta tcejbo ssalGgnikooL.rorrim&lt;</span><br><span class="line"> &gt;&gt;&gt; manager.__exit__(<span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>)</span><br><span class="line"> &gt;&gt;&gt; monster</span><br><span class="line"> <span class="string">'JABBERWOCKY'</span></span><br></pre></td></tr></table></figure><h3 id="The-contextlib-Utilities"><a href="#The-contextlib-Utilities" class="headerlink" title="The contextlib Utilities"></a>The contextlib Utilities</h3><p><strong>closing</strong><br>A function to build context managers out of objects that provide a <strong>close()</strong> method but don’t implement the <strong>__enter__</strong>/<strong>__exit__</strong> protocol.</p><p><strong>suppress</strong><br>A context manager to temporarily ignore specified exceptions.</p><p><strong>@contextmanager</strong><br>A decorator that lets you build a context manager from a simple generator function, instead of creating a class and implementing the protocol.</p><p><strong>ContextDecorator</strong><br>A base class for defining class-based context managers that can also be used as function decorators, running the entire function within a managed context.</p><p><strong>ExitStack</strong><br>A context manager that lets you enter a variable number of context managers. When the with block ends, <strong>ExitStack</strong> calls the stacked context managers’ <strong>__exit__</strong> methods in LIFO order (last entered, first exited). Use this class when you don’t know beforehand how many context managers you need to enter in your with block; for example, when opening all files from an arbitrary list of files at the same time.</p><h4 id="Using-contextmanager"><a href="#Using-contextmanager" class="headerlink" title="Using @contextmanager"></a>Using @contextmanager</h4><p>The <strong>@contextmanager</strong> decorator reduces the boilerplate of creating a context manager: instead of writing a whole class with <strong>__enter__</strong>/<strong>__exit__</strong> methods, you just implement a generator with a single yield that should produce whatever you want the <strong>__enter__</strong> method to return.</p><p>In a generator decorated with <strong>@contextmanager</strong>, <strong>yield</strong> is used to split the body of the function in two parts: everything before the <strong>yield</strong> will be executed at the beginning of the while block when the interpreter calls <strong>__enter__</strong>; the code after <strong>yield</strong> will run when <strong>__exit__</strong> is called at the end of the block.</p><p><strong>_mirror_gen.py_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">looking_glass</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    original_write= sys.stdout.write</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Define custom reverse_write function; original_write will be available in</span></span><br><span class="line">    <span class="comment">#the closure.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_write</span><span class="params">(text)</span>:</span></span><br><span class="line">        original_write(text[::<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">    sys.stdout.write = reverse_write</span><br><span class="line"></span><br><span class="line">    <span class="comment">#Yield the value that will be bound to the target variable in the as clause </span></span><br><span class="line">    <span class="comment">#of the with statement. This function pauses at this point while the body of </span></span><br><span class="line">    <span class="comment">#the with executes.</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">'JABBERWOCKY'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#When control exits the with block in any way, execution continues after </span></span><br><span class="line">    <span class="comment">#the yield; here the original sys.stdout.write is restored.</span></span><br><span class="line">    sys.stdout.write = original_write</span><br></pre></td></tr></table></figure><p><strong>_Test driving the looking_glass context manager function_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> mirror_gen <span class="keyword">import</span> looking_glass</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">with</span> looking_glass() <span class="keyword">as</span> what:</span><br><span class="line"> ...     print(<span class="string">'Alice, Kitty and Snowdrop'</span>)</span><br><span class="line"> ...     print(what)</span><br><span class="line"> ...</span><br><span class="line"> pordwonS dna yttiK ,ecilA</span><br><span class="line"> YKCOWREBBAJ</span><br><span class="line"> &gt;&gt;&gt; what</span><br><span class="line"> <span class="string">'JABBERWOCKY'</span></span><br></pre></td></tr></table></figure><p>Essentially the <strong>contextlib.contextmanager</strong> decorator wraps the function in a class that implements the <strong>__enter__</strong> and <strong>__exit__</strong> methods.</p><p>The <strong>__enter__</strong> method of that class:</p><ol><li>Invokes the generator function and holds on to the generator object—let’s call it <strong>gen</strong>.</li><li>Calls <strong>next(gen)</strong> to make it run to the <strong>yield</strong> keyword.</li><li>Returns the value yielded by <strong>next(gen)</strong>, so it can be bound to a target variable in the with/as form.</li></ol><p>When the with block terminates, the <strong>__exit__</strong> method:</p><ol><li>Checks an exception was passed as <strong>exc_type</strong>; if so, <strong>gen.throw(exception)</strong> is invoked, causing the exception to be raised in the <strong>yield</strong> line inside the generator function body.</li><li>Otherwise, <strong>next(gen)</strong> is called, resuming the execution of the generator function body after the <strong>yield</strong>.</li></ol><p><strong>_mirror_gen_exc.py: generator-based context manager implementing ex‐ception handling_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">looking_glass</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    original_write= sys.stdout.write</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_write</span><span class="params">(text)</span>:</span></span><br><span class="line">        original_write(text[::<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">    sys.stdout.write= reverse_write</span><br><span class="line">    msg=<span class="string">''</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">'JABBERWOCKY'</span></span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">        msg= <span class="string">'Please DO NOT divide by zero!'</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        sys.stdout.write= original_write</span><br><span class="line">        <span class="keyword">if</span> msg:</span><br><span class="line">            print(msg)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The &lt;strong&gt;with&lt;/strong&gt; statement sets up a temporary context and reliably tears it down, under the control of a context manager object. This prevents errors and reduces boilerplate code, making APIs at the same time safer and easier to use. Python programmers are finding lots of uses for with blocks beyond automatic file closing.&lt;/p&gt;
&lt;p&gt;This is no secret, but it is an underappreciated language feature: the &lt;strong&gt;else&lt;/strong&gt; clause can be used not only in if statements but also in &lt;strong&gt;for&lt;/strong&gt;, &lt;strong&gt;while&lt;/strong&gt;, and &lt;strong&gt;try&lt;/strong&gt; statements.&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C14_Iterables, Iterators, and Generators_02</title>
    <link href="blog.whistlestop.ml/2018/05/25/C14-Iterables-Iterators-and-Generators-02/"/>
    <id>blog.whistlestop.ml/2018/05/25/C14-Iterables-Iterators-and-Generators-02/</id>
    <published>2018-05-26T05:13:47.000Z</published>
    <updated>2018-05-26T05:14:19.704Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>The ArithmeticProgression class</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArithmeticProgression</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, begin, step, end=None)</span>:</span></span><br><span class="line">        self.begin=begin</span><br><span class="line">        self.step=step</span><br><span class="line">        self.end=end</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#This line produces a result value equal to self.begin, but coerced to </span></span><br><span class="line">        <span class="comment">#the type of the subsequent additions.</span></span><br><span class="line">        result=type(self.begin+self.step)(self.begin)</span><br><span class="line">        forever=self.end <span class="keyword">is</span> <span class="keyword">None</span></span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> forever <span class="keyword">or</span> result &lt; self.end:</span><br><span class="line">            <span class="keyword">yield</span> result</span><br><span class="line">            index +=<span class="number">1</span></span><br><span class="line">            result =self.begin + self.step * index</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>_The aritprog_gen generator function_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aritprog_gen</span><span class="params">(begin, step, end=None)</span>:</span></span><br><span class="line">    result= type(begin + step)(begin)</span><br><span class="line">    forever=end <span class="keyword">is</span> <span class="keyword">None</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> forever <span class="keyword">or</span> result &lt; end:</span><br><span class="line">        <span class="keyword">yield</span> result</span><br><span class="line">        index +=<span class="number">1</span></span><br><span class="line">        result = begin + step * index</span><br></pre></td></tr></table></figure><h3 id="Arithmetic-Progression-with-itertools"><a href="#Arithmetic-Progression-with-itertools" class="headerlink" title="Arithmetic Progression with itertools"></a>Arithmetic Progression with itertools</h3><p><strong>itertools.count</strong> function returns a generator that produces numbers. Without arguments, it produces a series of integers starting with 0. But you can provide optional start and step values to achieve a result very similar to our <strong>aritprog_gen functions</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> itertools</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gen=itertools.count(<span class="number">1</span>,<span class="number">.5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(gen)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(gen)</span><br><span class="line"><span class="number">1.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(gen)</span><br><span class="line"><span class="number">2.0</span></span><br></pre></td></tr></table></figure><p><strong>itertools.count</strong> never stops, so if you call <strong>list(count())</strong>, Python will try to build a list larger than available memory and your machine will be very grumpy long before the call fails.</p><p>On the other hand, there is the <strong>itertools.takewhile</strong> function: it produces a generator that consumes another generator and stops when a given predicate evaluates to <strong>False</strong>. So we can combine the two and write this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>gen=itertools.takewhile(<span class="keyword">lambda</span> n: n &lt; <span class="number">3</span>, itertools.count(<span class="number">1</span>, <span class="number">.5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(gen)</span><br><span class="line">[<span class="number">1</span>, <span class="number">1.5</span>, <span class="number">2.0</span>, <span class="number">2.5</span>]</span><br></pre></td></tr></table></figure><p><strong>_aritprog_v3.py_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aritprog_gen</span><span class="params">(begin, step, end= None)</span>:</span></span><br><span class="line">    first= type(begin+ step)(begin)</span><br><span class="line">    ap_gen=itertools.count(first, step)</span><br><span class="line">    <span class="keyword">if</span> end <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        ap_gen= itertools.takewhile(<span class="keyword">lambda</span> n: n &lt; end, ap_gen)</span><br><span class="line">    <span class="keyword">return</span> ap_gen</span><br></pre></td></tr></table></figure><h3 id="Generator-Functions-in-the-Standard-Library"><a href="#Generator-Functions-in-the-Standard-Library" class="headerlink" title="Generator Functions in the Standard Library"></a>Generator Functions in the Standard Library</h3><p><strong><em>Filtering generator functions examples</em></strong></p><p><img src="https://user-images.githubusercontent.com/33891164/39524666-801726b4-4dce-11e8-8ba2-69c7861f8679.png" alt="image"><br><img src="https://user-images.githubusercontent.com/33891164/39524677-8a71770e-4dce-11e8-8d9d-90e7f5c2cfd5.png" alt="image"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">vowel</span><span class="params">(c)</span>:</span> <span class="keyword">return</span> c.lower() <span class="keyword">in</span> <span class="string">'aeiou'</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(filter(vowel, <span class="string">'Aardvardk'</span>))</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> itertools</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.filterfalse(vowel, <span class="string">'Aardvark'</span>))</span><br><span class="line">[<span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'v'</span>, <span class="string">'r'</span>, <span class="string">'k'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.dropwhile(vowel, <span class="string">'Aardvark'</span>))</span><br><span class="line">[<span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'v'</span>, <span class="string">'a'</span>, <span class="string">'r'</span>, <span class="string">'k'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.takewhile(vowel, <span class="string">'Aardvark'</span>))</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'a'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.compress(<span class="string">'Aardvark'</span>, (<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>)))</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.islice(<span class="string">'Aardvark'</span>, <span class="number">1</span>,<span class="number">7</span>,<span class="number">2</span>))</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p><strong><em>itertools.accumulate generator function examples</em></strong></p><p><img src="https://user-images.githubusercontent.com/33891164/39524697-9c38db44-4dce-11e8-911b-57a91cf856c2.png" alt="image"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sample = [<span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> itertools</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.accumulate(sample)) <span class="comment">#</span></span><br><span class="line">[<span class="number">5</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">19</span>, <span class="number">26</span>, <span class="number">32</span>, <span class="number">35</span>, <span class="number">35</span>, <span class="number">44</span>, <span class="number">45</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.accumulate(sample, min)) <span class="comment">#</span></span><br><span class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.accumulate(sample, max)) <span class="comment">#</span></span><br><span class="line">[<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> operator</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.accumulate(sample, operator.mul)) <span class="comment">#</span></span><br><span class="line">[<span class="number">5</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">320</span>, <span class="number">2240</span>, <span class="number">13440</span>, <span class="number">40320</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.accumulate(range(<span class="number">1</span>, <span class="number">11</span>), operator.mul))</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">120</span>, <span class="number">720</span>, <span class="number">5040</span>, <span class="number">40320</span>, <span class="number">362880</span>, <span class="number">3628800</span>]</span><br></pre></td></tr></table></figure><p> <strong><em>Mapping generator function examples</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(enumerate(<span class="string">'albatroz'</span>, <span class="number">1</span>)) <span class="comment">#</span></span><br><span class="line">[(<span class="number">1</span>, <span class="string">'a'</span>), (<span class="number">2</span>, <span class="string">'l'</span>), (<span class="number">3</span>, <span class="string">'b'</span>), (<span class="number">4</span>, <span class="string">'a'</span>), (<span class="number">5</span>, <span class="string">'t'</span>), (<span class="number">6</span>, <span class="string">'r'</span>), (<span class="number">7</span>, <span class="string">'o'</span>), (<span class="number">8</span>, <span class="string">'z'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> operator</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(operator.mul, range(<span class="number">11</span>), range(<span class="number">11</span>))) <span class="comment">#</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(operator.mul, range(<span class="number">11</span>), [<span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>])) <span class="comment">#</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">4</span>, <span class="number">16</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(<span class="keyword">lambda</span> a, b: (a, b), range(<span class="number">11</span>), [<span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>])) <span class="comment"># </span></span><br><span class="line">[(<span class="number">0</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">8</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> itertools</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.starmap(operator.mul, enumerate(<span class="string">'albatroz'</span>, <span class="number">1</span>))) <span class="comment">#</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'ll'</span>, <span class="string">'bbb'</span>, <span class="string">'aaaa'</span>, <span class="string">'ttttt'</span>, <span class="string">'rrrrrr'</span>, <span class="string">'ooooooo'</span>, <span class="string">'zzzzzzzz'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sample = [<span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.starmap(<span class="keyword">lambda</span> a, b: b/a,</span><br><span class="line"><span class="meta">... </span>enumerate(itertools.accumulate(sample), <span class="number">1</span>))) <span class="comment">#</span></span><br><span class="line">[<span class="number">5.0</span>, <span class="number">4.5</span>, <span class="number">3.6666666666666665</span>, <span class="number">4.75</span>, <span class="number">5.2</span>, <span class="number">5.333333333333333</span>,</span><br><span class="line"><span class="number">5.0</span>, <span class="number">4.375</span>, <span class="number">4.888888888888889</span>, <span class="number">4.5</span>]</span><br></pre></td></tr></table></figure></p><p><strong><em>Merging generator function examples</em></strong></p><p><img src="https://user-images.githubusercontent.com/33891164/39524732-c6c8133e-4dce-11e8-8e5b-b4068c465d3b.png" alt="image"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.chain(<span class="string">'ABC'</span>, range(<span class="number">2</span>))) <span class="comment">#</span></span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.chain(enumerate(<span class="string">'ABC'</span>))) <span class="comment">#chain does nothing useful when called with a single iterable</span></span><br><span class="line">[(<span class="number">0</span>, <span class="string">'A'</span>), (<span class="number">1</span>, <span class="string">'B'</span>), (<span class="number">2</span>, <span class="string">'C'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.chain.from_iterable(enumerate(<span class="string">'ABC'</span>))) <span class="comment">#</span></span><br><span class="line">[<span class="number">0</span>, <span class="string">'A'</span>, <span class="number">1</span>, <span class="string">'B'</span>, <span class="number">2</span>, <span class="string">'C'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(zip(<span class="string">'ABC'</span>, range(<span class="number">5</span>))) <span class="comment">#</span></span><br><span class="line">[(<span class="string">'A'</span>, <span class="number">0</span>), (<span class="string">'B'</span>, <span class="number">1</span>), (<span class="string">'C'</span>, <span class="number">2</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(zip(<span class="string">'ABC'</span>, range(<span class="number">5</span>), [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>])) <span class="comment">#</span></span><br><span class="line">[(<span class="string">'A'</span>, <span class="number">0</span>, <span class="number">10</span>), (<span class="string">'B'</span>, <span class="number">1</span>, <span class="number">20</span>), (<span class="string">'C'</span>, <span class="number">2</span>, <span class="number">30</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.zip_longest(<span class="string">'ABC'</span>, range(<span class="number">5</span>))) <span class="comment">#</span></span><br><span class="line">[(<span class="string">'A'</span>, <span class="number">0</span>), (<span class="string">'B'</span>, <span class="number">1</span>), (<span class="string">'C'</span>, <span class="number">2</span>), (<span class="keyword">None</span>, <span class="number">3</span>), (<span class="keyword">None</span>, <span class="number">4</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.zip_longest(<span class="string">'ABC'</span>, range(<span class="number">5</span>), fillvalue=<span class="string">'?'</span>)) <span class="comment">#</span></span><br><span class="line">[(<span class="string">'A'</span>, <span class="number">0</span>), (<span class="string">'B'</span>, <span class="number">1</span>), (<span class="string">'C'</span>, <span class="number">2</span>), (<span class="string">'?'</span>, <span class="number">3</span>), (<span class="string">'?'</span>, <span class="number">4</span>)]</span><br></pre></td></tr></table></figure><p><strong><em>itertools.product generator function examples</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.product(<span class="string">'ABC'</span>, range(<span class="number">2</span>))) <span class="comment">#</span></span><br><span class="line">[(<span class="string">'A'</span>, <span class="number">0</span>), (<span class="string">'A'</span>, <span class="number">1</span>), (<span class="string">'B'</span>, <span class="number">0</span>), (<span class="string">'B'</span>, <span class="number">1</span>), (<span class="string">'C'</span>, <span class="number">0</span>), (<span class="string">'C'</span>, <span class="number">1</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>suits = <span class="string">'spades hearts diamonds clubs'</span>.split()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.product(<span class="string">'AK'</span>, suits)) <span class="comment">#</span></span><br><span class="line">[(<span class="string">'A'</span>, <span class="string">'spades'</span>), (<span class="string">'A'</span>, <span class="string">'hearts'</span>), (<span class="string">'A'</span>, <span class="string">'diamonds'</span>), (<span class="string">'A'</span>, <span class="string">'clubs'</span>),</span><br><span class="line">(<span class="string">'K'</span>, <span class="string">'spades'</span>), (<span class="string">'K'</span>, <span class="string">'hearts'</span>), (<span class="string">'K'</span>, <span class="string">'diamonds'</span>), (<span class="string">'K'</span>, <span class="string">'clubs'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.product(<span class="string">'ABC'</span>)) <span class="comment">#</span></span><br><span class="line">[(<span class="string">'A'</span>,), (<span class="string">'B'</span>,), (<span class="string">'C'</span>,)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.product(<span class="string">'ABC'</span>, repeat=<span class="number">2</span>)) <span class="comment">#</span></span><br><span class="line">[(<span class="string">'A'</span>, <span class="string">'A'</span>), (<span class="string">'A'</span>, <span class="string">'B'</span>), (<span class="string">'A'</span>, <span class="string">'C'</span>), (<span class="string">'B'</span>, <span class="string">'A'</span>), (<span class="string">'B'</span>, <span class="string">'B'</span>),</span><br><span class="line">(<span class="string">'B'</span>, <span class="string">'C'</span>), (<span class="string">'C'</span>, <span class="string">'A'</span>), (<span class="string">'C'</span>, <span class="string">'B'</span>), (<span class="string">'C'</span>, <span class="string">'C'</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#The repeat=N keyword argument tells product to consume each input iterable N times.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.product(range(<span class="number">2</span>), repeat=<span class="number">3</span>))</span><br><span class="line">[(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>), (<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rows = itertools.product(<span class="string">'AB'</span>, range(<span class="number">2</span>), repeat=<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> row <span class="keyword">in</span> rows: print(row)</span><br><span class="line">...</span><br><span class="line">(<span class="string">'A'</span>, <span class="number">0</span>, <span class="string">'A'</span>, <span class="number">0</span>)</span><br><span class="line">(<span class="string">'A'</span>, <span class="number">0</span>, <span class="string">'A'</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">'A'</span>, <span class="number">0</span>, <span class="string">'B'</span>, <span class="number">0</span>)</span><br><span class="line">(<span class="string">'A'</span>, <span class="number">0</span>, <span class="string">'B'</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">'A'</span>, <span class="number">1</span>, <span class="string">'A'</span>, <span class="number">0</span>)</span><br><span class="line">(<span class="string">'A'</span>, <span class="number">1</span>, <span class="string">'A'</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">'A'</span>, <span class="number">1</span>, <span class="string">'B'</span>, <span class="number">0</span>)</span><br><span class="line">(<span class="string">'A'</span>, <span class="number">1</span>, <span class="string">'B'</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">'B'</span>, <span class="number">0</span>, <span class="string">'A'</span>, <span class="number">0</span>)</span><br><span class="line">(<span class="string">'B'</span>, <span class="number">0</span>, <span class="string">'A'</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">'B'</span>, <span class="number">0</span>, <span class="string">'B'</span>, <span class="number">0</span>)</span><br><span class="line">(<span class="string">'B'</span>, <span class="number">0</span>, <span class="string">'B'</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">'B'</span>, <span class="number">1</span>, <span class="string">'A'</span>, <span class="number">0</span>)</span><br><span class="line">(<span class="string">'B'</span>, <span class="number">1</span>, <span class="string">'A'</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">'B'</span>, <span class="number">1</span>, <span class="string">'B'</span>, <span class="number">0</span>)</span><br><span class="line">(<span class="string">'B'</span>, <span class="number">1</span>, <span class="string">'B'</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong><em>Generator functions that expand each input item into multiple output items</em></strong></p><p><img src="https://user-images.githubusercontent.com/33891164/39525256-59633d9e-4dd0-11e8-9bd5-1be09ed12885.png" alt="image"><br><img src="https://user-images.githubusercontent.com/33891164/39525269-60568cf0-4dd0-11e8-977e-d3af23420b48.png" alt="image"></p><p><strong><em>count, cycle, and repeat</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ct = itertools.count() <span class="comment">#</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(ct) <span class="comment">#</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(ct), next(ct), next(ct) <span class="comment">#</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.islice(itertools.count(<span class="number">1</span>, <span class="number">.3</span>), <span class="number">3</span>)) <span class="comment">#</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">1.3</span>, <span class="number">1.6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cy = itertools.cycle(<span class="string">'ABC'</span>) <span class="comment">#</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(cy)</span><br><span class="line"><span class="string">'A'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.islice(cy, <span class="number">7</span>)) <span class="comment">#</span></span><br><span class="line">[<span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rp = itertools.repeat(<span class="number">7</span>) <span class="comment">#</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(rp), next(rp)</span><br><span class="line">(<span class="number">7</span>, <span class="number">7</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.repeat(<span class="number">8</span>, <span class="number">4</span>)) <span class="comment">#</span></span><br><span class="line">[<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(operator.mul, range(<span class="number">11</span>), itertools.repeat(<span class="number">5</span>))) <span class="comment">#</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">50</span>]</span><br></pre></td></tr></table></figure><p><strong><em>Combinatoric generator functions yield multiple values per input item</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.combinations(<span class="string">'ABC'</span>, <span class="number">2</span>)) <span class="comment">#All combinations of len()==2 from the items in 'ABC'</span></span><br><span class="line">[(<span class="string">'A'</span>, <span class="string">'B'</span>), (<span class="string">'A'</span>, <span class="string">'C'</span>), (<span class="string">'B'</span>, <span class="string">'C'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.combinations_with_replacement(<span class="string">'ABC'</span>, <span class="number">2</span>)) <span class="comment">#including combinations with repeated items.</span></span><br><span class="line">[(<span class="string">'A'</span>, <span class="string">'A'</span>), (<span class="string">'A'</span>, <span class="string">'B'</span>), (<span class="string">'A'</span>, <span class="string">'C'</span>), (<span class="string">'B'</span>, <span class="string">'B'</span>), (<span class="string">'B'</span>, <span class="string">'C'</span>), (<span class="string">'C'</span>, <span class="string">'C'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.permutations(<span class="string">'ABC'</span>, <span class="number">2</span>)) <span class="comment">#All permutations of len()==2 from the items in 'ABC'</span></span><br><span class="line">[(<span class="string">'A'</span>, <span class="string">'B'</span>), (<span class="string">'A'</span>, <span class="string">'C'</span>), (<span class="string">'B'</span>, <span class="string">'A'</span>), (<span class="string">'B'</span>, <span class="string">'C'</span>), (<span class="string">'C'</span>, <span class="string">'A'</span>), (<span class="string">'C'</span>, <span class="string">'B'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.product(<span class="string">'ABC'</span>, repeat=<span class="number">2</span>)) <span class="comment">#Cartesian product from 'ABC' and 'ABC' (that’s the effect of repeat=2)</span></span><br><span class="line">[(<span class="string">'A'</span>, <span class="string">'A'</span>), (<span class="string">'A'</span>, <span class="string">'B'</span>), (<span class="string">'A'</span>, <span class="string">'C'</span>), (<span class="string">'B'</span>, <span class="string">'A'</span>), (<span class="string">'B'</span>, <span class="string">'B'</span>), (<span class="string">'B'</span>, <span class="string">'C'</span>), (<span class="string">'C'</span>, <span class="string">'A'</span>), (<span class="string">'C'</span>, <span class="string">'B'</span>), (<span class="string">'C'</span>, <span class="string">'C'</span>)]</span><br></pre></td></tr></table></figure></p><p><strong><em>Rearranging generator functions</em></strong></p><p><img src="https://user-images.githubusercontent.com/33891164/39525630-5ad40ae0-4dd1-11e8-8c0a-97898ccd976c.png" alt="image"><br><img src="https://user-images.githubusercontent.com/33891164/39525647-67735ae4-4dd1-11e8-8d5c-acf4e58dd991.png" alt="image"></p><p>Note that <strong>itertools.groupby</strong> assumes that the input iterable is sorted by the grouping criterion, or at least that the items are clustered by that criterion—even if not sorted.</p><p><strong><em>itertools.groupby</em></strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.groupby(<span class="string">'LLLLAAGGG'</span>)) <span class="comment">#</span></span><br><span class="line">[(<span class="string">'L'</span>, &lt;itertools._grouper object at <span class="number">0x102227cc0</span>&gt;),</span><br><span class="line">(<span class="string">'A'</span>, &lt;itertools._grouper object at <span class="number">0x102227b38</span>&gt;),</span><br><span class="line">(<span class="string">'G'</span>, &lt;itertools._grouper object at <span class="number">0x102227b70</span>&gt;)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> char, group <span class="keyword">in</span> itertools.groupby(<span class="string">'LLLLAAAGG'</span>): <span class="comment">#</span></span><br><span class="line"><span class="meta">... </span>print(char, <span class="string">'-&gt;'</span>, list(group))</span><br><span class="line">...</span><br><span class="line">L -&gt; ['L', 'L', 'L', 'L']</span><br><span class="line">A -&gt; ['A', 'A',]</span><br><span class="line">G -&gt; ['G', 'G', 'G']</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>animals = [<span class="string">'duck'</span>, <span class="string">'eagle'</span>, <span class="string">'rat'</span>, <span class="string">'giraffe'</span>, <span class="string">'bear'</span>,</span><br><span class="line"><span class="meta">... </span><span class="string">'bat'</span>, <span class="string">'dolphin'</span>, <span class="string">'shark'</span>, <span class="string">'lion'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>animals.sort(key=len) <span class="comment">#To use groupby, the input should be sorted;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>animals</span><br><span class="line">[<span class="string">'rat'</span>, <span class="string">'bat'</span>, <span class="string">'duck'</span>, <span class="string">'bear'</span>, <span class="string">'lion'</span>, <span class="string">'eagle'</span>, <span class="string">'shark'</span>,</span><br><span class="line"><span class="string">'giraffe'</span>, <span class="string">'dolphin'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> length, group <span class="keyword">in</span> itertools.groupby(animals, len): <span class="comment">#</span></span><br><span class="line"><span class="meta">... </span>print(length, <span class="string">'-&gt;'</span>, list(group))</span><br><span class="line">...</span><br><span class="line">3 -&gt; ['rat', 'bat']</span><br><span class="line">4 -&gt; ['duck', 'bear', 'lion']</span><br><span class="line">5 -&gt; ['eagle', 'shark']</span><br><span class="line">7 -&gt; ['giraffe', 'dolphin']</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> length, group <span class="keyword">in</span> itertools.groupby(reversed(animals), len): <span class="comment">#</span></span><br><span class="line"><span class="meta">... </span>print(length, <span class="string">'-&gt;'</span>, list(group))</span><br><span class="line">...</span><br><span class="line">7 -&gt; ['dolphin', 'giraffe']</span><br><span class="line">5 -&gt; ['shark', 'eagle']</span><br><span class="line">4 -&gt; ['lion', 'bear', 'duck']</span><br><span class="line">3 -&gt; ['bat', 'rat']</span><br></pre></td></tr></table></figure><p><strong><em>itertools.tee yields multiple generators, each yielding every item of the input generator</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(itertools.tee(<span class="string">'ABC'</span>))</span><br><span class="line">[&lt;itertools._tee object at <span class="number">0x10222abc8</span>&gt;, &lt;itertools._tee object at <span class="number">0x10222ac08</span>&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g1, g2 = itertools.tee(<span class="string">'ABC'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g1)</span><br><span class="line"><span class="string">'A'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g2)</span><br><span class="line"><span class="string">'A'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g2)</span><br><span class="line"><span class="string">'B'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(g1)</span><br><span class="line">[<span class="string">'B'</span>, <span class="string">'C'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(g2)</span><br><span class="line">[<span class="string">'C'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(zip(*itertools.tee(<span class="string">'ABC'</span>)))</span><br><span class="line">[(<span class="string">'A'</span>, <span class="string">'A'</span>), (<span class="string">'B'</span>, <span class="string">'B'</span>), (<span class="string">'C'</span>, <span class="string">'C'</span>)]</span><br></pre></td></tr></table></figure></p><h3 id="New-Syntax-in-Python-3-3-yield-from"><a href="#New-Syntax-in-Python-3-3-yield-from" class="headerlink" title="New Syntax in Python 3.3: yield from"></a>New Syntax in Python 3.3: yield from</h3><p> <strong><em>a homemade implementation of a chaining generator:</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">chain</span><span class="params">(*iterables)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> it <span class="keyword">in</span> iterables:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">for</span> i <span class="keyword">in</span> it:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">yield</span> i</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">'ABC'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t=tuple(range(<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(chain(s, t))</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(chain(s, t))</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">chain</span><span class="params">(*iterables)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> i <span class="keyword">in</span> iterables:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">yield</span> <span class="keyword">from</span> i</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(chain(s, t))</span><br><span class="line">[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>As you can see, <strong>yield from i</strong> replaces the inner <strong>for</strong> loop completely. The use of <strong>yield from</strong> in this example is correct, and the code reads better, but it seems like mere syntactic sugar. Besides replacing a loop, <strong>yield from</strong> creates a channel connecting the inner generator directly to the client of the outer generator. This channel becomes really important when generators are used as <strong>coroutines</strong> and not only produce but also consume values from the client code.</p><h3 id="Iterable-Reducing-Functions"><a href="#Iterable-Reducing-Functions" class="headerlink" title="Iterable Reducing Functions"></a>Iterable Reducing Functions</h3><p><strong><em>Built-in functions that read iterables and return single values</em></strong></p><p><img src="https://user-images.githubusercontent.com/33891164/39526367-65a9afc2-4dd3-11e8-9066-777ee2165295.png" alt="image"><br><img src="https://user-images.githubusercontent.com/33891164/39526389-759e601c-4dd3-11e8-98ad-9f01562270ee.png" alt="image"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>all([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>all([<span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>])</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>all([])</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>any([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>any([<span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>])</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>any([<span class="number">0</span>, <span class="number">0.0</span>])</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>any([])</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>g = (n <span class="keyword">for</span> n <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">0.0</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>any(g)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(g)</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><p>Another built-in that takes an iterable and returns something else is <strong>sorted</strong>. Unlike <strong>reversed</strong>, which is a generator function, <strong>sorted</strong> builds and returns an actual list. After all, every single item of the input iterable must be read so they can be sorted, and the sorting happens in a list, therefore sorted just returns that list after it’s done. I mention <strong>sorted</strong> here because it does consume an arbitrary iterable.</p><p>Of course, <strong>sorted</strong> and the reducing functions only work with iterables that eventually stop. Otherwise, they will keep on collecting items and never return a result.</p><h3 id="A-Closer-Look-at-the-iter-Function"><a href="#A-Closer-Look-at-the-iter-Function" class="headerlink" title="A Closer Look at the iter Function"></a>A Closer Look at the iter Function</h3><p><strong>iter</strong> has another trick: it can be called with two arguments to create an iterator from a regular function or any callable object. In this usage, the first argument must be a callable to be invoked repeatedly (with no arguments) to yield values, and the second argument is a sentinel: a marker value which, when returned by the callable, causes the iterator to raise <strong>StopIteration</strong> instead of yielding the sentinel.</p><p><strong><em>The following example shows how to use iter to roll a six-sided die until a 1 is rolled:</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">d6</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span><span class="keyword">return</span> randint(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d6_iter = iter(d6, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d6_iter</span><br><span class="line">&lt;callable_iterator object at <span class="number">0x00000000029BE6A0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> roll <span class="keyword">in</span> d6_iter:</span><br><span class="line"><span class="meta">... </span>print(roll)</span><br><span class="line">...</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong><em>reads lines from a file until a blank line is found or the end of file is reached:</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'mydata.txt'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">     <span class="keyword">for</span> line <span class="keyword">in</span> iter(fp.readline, <span class="string">''</span>):</span><br><span class="line">        process_line(line)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;The ArithmeticProgression class&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ArithmeticProgression&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, begin, step, end=None)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.begin=begin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.step=step&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.end=end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__iter__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#This line produces a result value equal to self.begin, but coerced to &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#the type of the subsequent additions.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result=type(self.begin+self.step)(self.begin)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        forever=self.end &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        index = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; forever &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; result &amp;lt; self.end:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            index +=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            result =self.begin + self.step * index&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
</feed>

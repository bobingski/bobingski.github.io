<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>whistlestop</title>
  
  <subtitle>Never start something you&#39;re not willing to finish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="blog.whistlestop.ml/"/>
  <updated>2018-12-15T11:12:28.572Z</updated>
  <id>blog.whistlestop.ml/</id>
  
  <author>
    <name>eustoma</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python_update_wrapper</title>
    <link href="blog.whistlestop.ml/2018/12/15/python-update-wrapper/"/>
    <id>blog.whistlestop.ml/2018/12/15/python-update-wrapper/</id>
    <published>2018-12-15T10:51:21.000Z</published>
    <updated>2018-12-15T11:12:28.572Z</updated>
    
    <content type="html"><![CDATA[<p>来自 <strong>functools</strong><br><strong>functools</strong> 库中装饰器相关的函数是 <strong>update_wrapper</strong> 、<strong>wraps</strong>，还搭配 <strong>WRAPPER_ASSIGNMENTS</strong> 和<strong>WRAPPER_UPDATES</strong> 两个常量使用，作用就是消除 Python 装饰器的一些负面作用。<br><a id="more"></a> </p><h3 id="wraps"><a href="#wraps" class="headerlink" title="wraps"></a>wraps</h3><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">add     <span class="comment"># &lt;function __main__.wrapper&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到被装饰的函数的名称，也就是函数的 <strong>__name__</strong> 属性变成了 <strong>wrapper</strong>， 这就是装饰器带来的副作用，实际上<strong>add</strong> 函数整个变成了 <strong>decorator(add)</strong>，而 <strong>wraps</strong> 装饰器能消除这些副作用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">add     <span class="comment"># &lt;function __main__.add&gt;</span></span><br></pre></td></tr></table></figure><p>更正的属性定义在 <strong>WRAPPER_ASSIGNMENTS</strong> 中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>functools.WRAPPER_ASSIGNMENTS</span><br><span class="line">(<span class="string">'__module__'</span>, <span class="string">'__name__'</span>, <span class="string">'__doc__'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>functools.WRAPPER_UPDATES</span><br><span class="line">(<span class="string">'__dict__'</span>,)</span><br></pre></td></tr></table></figure><h3 id="update-wrapper"><a href="#update-wrapper" class="headerlink" title="update_wrapper"></a>update_wrapper</h3><p><strong>update_wrapper</strong> 的作用与 <strong>wraps</strong> 类似，不过功能更加强大，换句话说，<strong>wraps</strong> 其实是 <strong>update_wrapper</strong>  的特殊化，实际上 <strong>wraps(wrapped)</strong> 相当于 <strong>partial(update_wrapper, wrapped=wrapped, </strong>kwargs)**。</p><p>因此，上面的代码可以用 <strong>update_wrapper</strong> 重写如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> update_wrapper(wrapper, func)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来自 &lt;strong&gt;functools&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;functools&lt;/strong&gt; 库中装饰器相关的函数是 &lt;strong&gt;update_wrapper&lt;/strong&gt; 、&lt;strong&gt;wraps&lt;/strong&gt;，还搭配 &lt;strong&gt;WRAPPER_ASSIGNMENTS&lt;/strong&gt; 和&lt;strong&gt;WRAPPER_UPDATES&lt;/strong&gt; 两个常量使用，作用就是消除 Python 装饰器的一些负面作用。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="blog.whistlestop.ml/categories/python/"/>
    
    
      <category term="warpper" scheme="blog.whistlestop.ml/tags/warpper/"/>
    
  </entry>
  
  <entry>
    <title>C14_Testing_Debugging_and_Exceptions</title>
    <link href="blog.whistlestop.ml/2018/12/15/C14-Testing-Debugging-and-Exceptions/"/>
    <id>blog.whistlestop.ml/2018/12/15/C14-Testing-Debugging-and-Exceptions/</id>
    <published>2018-12-15T10:49:37.000Z</published>
    <updated>2018-12-15T11:12:24.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Testing-Output-Sent-to-stdout"><a href="#Testing-Output-Sent-to-stdout" class="headerlink" title="Testing Output Sent to stdout"></a>Testing Output Sent to stdout</h2><p>You have a program that has a method whose output goes to standard Output (<strong>sys.stdout</strong>). This almost always means that it emits text to the screen. You’d like to write a test for your code to prove that, given the proper input, the proper output is displayed.</p><p>Using the <strong>unittest.mock</strong> module’s <strong>patch()</strong> function, it’s pretty simple to mock out <strong>sys.stdout</strong> for just a single test, and put it back again, without messy temporary variables or leaking mocked-out state between test cases.<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">urlprint</span><span class="params">(protocol, host, domain)</span>:</span></span><br><span class="line">    url= <span class="string">'&#123;&#125;://&#123;&#125;.&#123;&#125;'</span>.format(protocol, host, domain)</span><br><span class="line">    print(url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">from</span> unittest <span class="keyword">import</span> TestCase</span><br><span class="line"><span class="keyword">from</span> unittest.mock <span class="keyword">import</span> patch</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestURLPrint</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_url_gets_to_stdout</span><span class="params">(self)</span>:</span></span><br><span class="line">        protocol= <span class="string">'http'</span></span><br><span class="line">        host= <span class="string">'www'</span></span><br><span class="line">        domain= <span class="string">'example.com'</span></span><br><span class="line">        expected_url=<span class="string">'&#123;&#125;://&#123;&#125;.&#123;&#125;\n'</span>.format(protocol, host, domain)</span><br><span class="line">        <span class="keyword">with</span> patch(<span class="string">'sys.stdout'</span>, new= StringIO()) <span class="keyword">as</span> fake_out:</span><br><span class="line">            urlprint(protocol, host, domain)</span><br><span class="line">            self.assertEqual(fake_out.getvalue(), expected_url)</span><br></pre></td></tr></table></figure></p><p>To run the test, the <strong>unittest.mock.patch()</strong> function is used as a context manager to replace the value of <strong>sys.stdout</strong> with a <strong>StringIO</strong> object as a substitute. The <strong>fake_out</strong> variable is the mock object that’s created in this process. This can be used inside the body of the <strong>with</strong> statement to perform various checks. When the <strong>with</strong> statement completes, patch conveniently puts everything back the way it was before the test ever ran.            </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Testing-Output-Sent-to-stdout&quot;&gt;&lt;a href=&quot;#Testing-Output-Sent-to-stdout&quot; class=&quot;headerlink&quot; title=&quot;Testing Output Sent to stdout&quot;&gt;&lt;/a&gt;Testing Output Sent to stdout&lt;/h2&gt;&lt;p&gt;You have a program that has a method whose output goes to standard Output (&lt;strong&gt;sys.stdout&lt;/strong&gt;). This almost always means that it emits text to the screen. You’d like to write a test for your code to prove that, given the proper input, the proper output is displayed.&lt;/p&gt;
&lt;p&gt;Using the &lt;strong&gt;unittest.mock&lt;/strong&gt; module’s &lt;strong&gt;patch()&lt;/strong&gt; function, it’s pretty simple to mock out &lt;strong&gt;sys.stdout&lt;/strong&gt; for just a single test, and put it back again, without messy temporary variables or leaking mocked-out state between test cases.&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C13_Utility_Scripting_and_System_Administration</title>
    <link href="blog.whistlestop.ml/2018/12/15/C13-Utility-Scripting-and-System-Administration/"/>
    <id>blog.whistlestop.ml/2018/12/15/C13-Utility-Scripting-and-System-Administration/</id>
    <published>2018-12-15T10:48:54.000Z</published>
    <updated>2018-12-15T11:12:20.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Accepting-Script-Input-via-Redirection-Pipes-or-Input-Files"><a href="#Accepting-Script-Input-via-Redirection-Pipes-or-Input-Files" class="headerlink" title="Accepting Script Input via Redirection, Pipes, or Input Files"></a>Accepting Script Input via Redirection, Pipes, or Input Files</h2><p>You want a script you’ve written to be able to accept input using whatever mechanism is easiest for the user. This should include piping output from a command to the script, redirecting a file into the script, or just passing a filename, or list of filenames, to the script on the command line.</p><p>Python’s built-in <strong>fileinput</strong> module makes this very simple and concise.<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> fileinput.input() <span class="keyword">as</span> f_input:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f_input:</span><br><span class="line">        print(line, end= <span class="string">''</span>)</span><br></pre></td></tr></table></figure></p><p>Then you can already accept input to the script in all of the previously mentioned ways. If you save this script as <em>filein.py</em> and make it executable, you can do all of the following and get the expected output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ ls | ./filein.py <span class="comment"># Prints a directory listing to stdout.</span></span><br><span class="line">$ ./filein.py /etc/passwd <span class="comment"># Reads /etc/passwd to stdout.</span></span><br><span class="line">$ ./filein.py &lt; /etc/passwd <span class="comment"># Reads /etc/passwd to stdout.      </span></span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">The **fileinput.input()** function creates and returns an instance of the **FileInput** class. In addition to containing a few handy helper methods, the instance can also be used as a context manager. So, to put all of this together, if we wrote a script that expected to be printing output from several files at once, we might have it include the filename and line number in the output, like this:</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> fileinput</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> fileinput.input(<span class="string">'/etc/passwd'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line"><span class="meta">... </span>print(f.filename(), f.lineno(), line, end=<span class="string">''</span>)</span><br><span class="line">...</span><br><span class="line">/etc/passwd <span class="number">1</span> <span class="comment">##</span></span><br><span class="line">/etc/passwd <span class="number">2</span> <span class="comment"># User Database</span></span><br><span class="line">/etc/passwd <span class="number">3</span> <span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="Terminating-a-Program-with-an-Error-Message"><a href="#Terminating-a-Program-with-an-Error-Message" class="headerlink" title="Terminating a Program with an Error Message"></a>Terminating a Program with an Error Message</h2><p>You want your program to terminate by printing a message to standard error and returning a nonzero status code. To have a program terminate in this manner, raise a <strong>SystemExit</strong> exception, but supply the error message as an argument. </p><p><code>raise SystemExit(&#39;It failed!&#39;)</code></p><p>This will cause the supplied message to be printed to <strong>sys.stderr</strong> and the program to exit with a status code of 1.</p><h2 id="Parsing-Command-Line-Options"><a href="#Parsing-Command-Line-Options" class="headerlink" title="Parsing Command-Line Options"></a>Parsing Command-Line Options</h2><p>You want to write a program that parses options supplied on the command line (found in <strong>sys.argv</strong>). The <strong>argparse</strong> module can be used to parse command-line options. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser= argparse.ArgumentParser(description= <span class="string">'Search some files'</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(dest= <span class="string">'filenames'</span>, metavar= <span class="string">'filename'</span>, nargs= <span class="string">'*'</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">'-p'</span>, <span class="string">'--pat'</span>, metavar= <span class="string">'pattern'</span>, required= <span class="keyword">True</span>,</span><br><span class="line">                    dest=<span class="string">'patterns'</span>, action= <span class="string">'append'</span>,</span><br><span class="line">                    help=<span class="string">'text pattern to search for'</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">'-v'</span>, dest= <span class="string">'verbose'</span>, action= <span class="string">'store_true'</span>, help= <span class="string">'verbose mode'</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">'-o'</span>, dest= <span class="string">'outfile'</span>, action= <span class="string">'store'</span>, help= <span class="string">'output file'</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">'--speed'</span>, dest= <span class="string">'speed'</span>, action= <span class="string">'store'</span>,</span><br><span class="line">                    choices= &#123;<span class="string">'slow'</span>, <span class="string">'fast'</span>&#125;, default= <span class="string">'slow'</span>, help= <span class="string">'search speed'</span>)</span><br><span class="line"></span><br><span class="line">args= parser.parse_args()</span><br><span class="line"></span><br><span class="line">print(args.filenames)</span><br><span class="line">print(args.patterns)</span><br><span class="line">print(args.verbose)</span><br><span class="line">print(args.outfile)</span><br><span class="line">print(args.speed)</span><br></pre></td></tr></table></figure><p>This program defines a command-line parser with the following usage:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">PS D:\python\computebaseline&gt; python .\temporary.py -h</span><br><span class="line">usage: temporary.py [-h] [-p pattern] [-v] [-o OUTFILE] [--speed &#123;slow,fast&#125;]</span><br><span class="line">                    [filename [filename ...]]</span><br><span class="line"></span><br><span class="line">Search some files</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">  filename</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message <span class="keyword">and</span> exit</span><br><span class="line">  -p pattern, --pat pattern</span><br><span class="line">                        text pattern to search <span class="keyword">for</span></span><br><span class="line">  -v                    verbose mode</span><br><span class="line">  -o OUTFILE            output file</span><br><span class="line">  --speed &#123;slow,fast&#125;   search speed</span><br></pre></td></tr></table></figure></p><p>The following session shows how data shows up in the program. Carefully observe the output of the <strong>print()</strong> statements.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PS D:\python\computebaseline&gt; python .\temporary.py -v -p spam --pat= eggs foo.txt bar.txt</span><br><span class="line">[<span class="string">'eggs'</span>, <span class="string">'foo.txt'</span>, <span class="string">'bar.txt'</span>]</span><br><span class="line">[<span class="string">'spam'</span>, <span class="string">''</span>]</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">None</span></span><br><span class="line">slow</span><br><span class="line">PS D:\python\computebaseline&gt; python .\temporary.py -v -p spam --pat=eggs foo.txt bar.txt</span><br><span class="line">[<span class="string">'foo.txt'</span>, <span class="string">'bar.txt'</span>]</span><br><span class="line">[<span class="string">'spam'</span>, <span class="string">'eggs'</span>]</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="keyword">None</span></span><br><span class="line">slow</span><br><span class="line">PS D:\python\computebaseline&gt; python .\temporary.py -v -p spam --pat=eggs foo.txt bar.txt -o results</span><br><span class="line">[<span class="string">'foo.txt'</span>, <span class="string">'bar.txt'</span>]</span><br><span class="line">[<span class="string">'spam'</span>, <span class="string">'eggs'</span>]</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">results</span><br><span class="line">slow</span><br><span class="line">PS D:\python\computebaseline&gt; python .\temporary.py -v -p spam --pat=eggs foo.txt bar.txt -o results --speed=fast</span><br><span class="line">[<span class="string">'foo.txt'</span>, <span class="string">'bar.txt'</span>]</span><br><span class="line">[<span class="string">'spam'</span>, <span class="string">'eggs'</span>]</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">results</span><br><span class="line">fast</span><br></pre></td></tr></table></figure><p>To parse options, you first create an <strong>ArgumentParser</strong> instance and add declarations for the options you want to support it using the add_argument() method. In each <strong>add_argument()</strong> call, the <strong>dest</strong> argument specifies the name of an attribute where the result of parsing will be placed. The <strong>metavar</strong> argument is used when generating help messages. The <strong>action</strong> argument specifies the processing associated with the argument and is often <strong>store</strong> for storing a value or <strong>append</strong> for collecting multiple argument values into a list.</p><p>The following argument collects all of the extra command-line arguments into a list. It’s being used to make a list of filenames in the example:</p><p><code>parser.add_argument(dest=&#39;filenames&#39;,metavar=&#39;filename&#39;, nargs=&#39;*&#39;)</code></p><p>The following argument sets a <strong>Boolean</strong> flag depending on whether or not the argument was provided:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parser.add_argument(<span class="string">'-v'</span>, dest=<span class="string">'verbose'</span>, action=<span class="string">'store_true'</span>,</span><br><span class="line"> help=<span class="string">'verbose mode'</span>)</span><br></pre></td></tr></table></figure><p>The following argument takes a single value and stores it as a string:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parser.add_argument(<span class="string">'-o'</span>, dest=<span class="string">'outfile'</span>, action=<span class="string">'store'</span>,</span><br><span class="line"> help=<span class="string">'output file'</span>)</span><br></pre></td></tr></table></figure><p>The following argument specification allows an argument to be repeated multiple times and all of the values append into a list. The required flag means that the argument must be supplied at least once. The use of <strong>-p</strong> and <strong>–pat</strong> mean that either argument name is acceptable.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parser.add_argument(<span class="string">'-p'</span>, <span class="string">'--pat'</span>,metavar=<span class="string">'pattern'</span>, required=<span class="keyword">True</span>,</span><br><span class="line"> dest=<span class="string">'patterns'</span>, action=<span class="string">'append'</span>,</span><br><span class="line"> help=<span class="string">'text pattern to search for'</span>)</span><br></pre></td></tr></table></figure><p>Finally, the following argument specification takes a value, but checks it against a set of possible choices.</p><p><code>parser.add_argument(&#39;--speed&#39;, dest=&#39;speed&#39;, action=&#39;store&#39;, choices={&#39;slow&#39;,&#39;fast&#39;}, default=&#39;slow&#39;, help=&#39;search speed&#39;)</code></p><p>Once the options have been given, you simply execute the <strong>parser.parse()</strong> method. This will process the <strong>sys.argv</strong> value and return an instance with the results. The results for each argument are placed into an attribute with the name given in the <strong>dest</strong> parameter to <strong>add_argument()</strong>.</p><h2 id="Copying-or-Moving-Files-and-Directories"><a href="#Copying-or-Moving-Files-and-Directories" class="headerlink" title="Copying or Moving Files and Directories"></a>Copying or Moving Files and Directories</h2><p>The <strong>shutil</strong> module has portable implementations of functions for copying files and directories.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="comment"># Copy src to dst. (cp src dst)</span></span><br><span class="line">shutil.copy(src, dst)</span><br><span class="line"><span class="comment"># Copy files, but preserve metadata (cp -p src dst)</span></span><br><span class="line">shutil.copy2(src, dst)</span><br><span class="line"><span class="comment"># Copy directory tree (cp -R src dst)</span></span><br><span class="line">shutil.copytree(src, dst)</span><br><span class="line"><span class="comment"># Move src to dst (mv src dst)</span></span><br><span class="line">shutil.move(src, dst)</span><br></pre></td></tr></table></figure><p>By default, symbolic links are followed by these commands. For example, if the source file is a symbolic link, then the destination file will be a copy of the file the link points to. If you want to copy the symbolic link instead, supply the follow_symlinks keyword argument like this:</p><p><code>shutil.copy2(src, dst, follow_symlinks=False)</code></p><p>If you want to preserve symbolic links in copied directories, do this:</p><p><code>shutil.copytree(src, dst, symlinks=True)</code></p><p>The <strong>copytree()</strong> optionally allows you to ignore certain files and directories during the copy process. To do this, you supply an <strong>ignore</strong> function that takes a directory name and filename listing as input, and returns a list of names to ignore as a result. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ignore_pyc_files</span><span class="params">(dirname, filenames)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [name <span class="keyword">in</span> filenames <span class="keyword">if</span> name.endswith(<span class="string">'.pyc'</span>)]</span><br><span class="line">shutil.copytree(src, dst, ignore=ignore_pyc_files)</span><br></pre></td></tr></table></figure><p>Since ignoring filename patterns is common, a utility function <strong>ignore_patterns()</strong> has already been provided to do it.</p><p><code>shutil.copytree(src, dst, ignore=shutil.ignore_patterns(&#39;*~&#39;,&#39;*.pyc&#39;))</code></p><p>One tricky bit about copying directories with <strong>copytree()</strong> is the handling of errors. For example, in the process of copying, the function might encounter broken symbolic links, files that can’t be accessed due to permission problems, and so on. To deal with this, all exceptions encountered are collected into a list and grouped into a single exception that gets raised at the end of the operation. Here is how you would handle it:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    shutil.copytree(src, dst)</span><br><span class="line"><span class="keyword">except</span> shutil.Error <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">for</span> src, dst, msg <span class="keyword">in</span> e.args[<span class="number">0</span>]:</span><br><span class="line">        <span class="comment"># src is source name</span></span><br><span class="line">        <span class="comment"># dst is destination name</span></span><br><span class="line">        <span class="comment"># msg is error message from exception</span></span><br><span class="line">        print(dst, src, msg)</span><br></pre></td></tr></table></figure><p>If you supply the <strong>ignore_dangling_symlinks=True</strong> keyword argument, then <strong>copytree()</strong> will ignore dangling symlinks.</p><h2 id="Adding-Logging-to-Libraries"><a href="#Adding-Logging-to-Libraries" class="headerlink" title="Adding Logging to Libraries"></a>Adding Logging to Libraries</h2><p>You would like to add a logging capability to a library, but don’t want it to interfere with programs that don’t use logging. For libraries that want to perform logging, you should create a dedicated logger object, and initially configure it as follows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># somelib.py</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">log= logging.getLogger(__name__)</span><br><span class="line">log.addHandler(logging.NullHandler())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    log.critical(<span class="string">'A critical error!'</span>)</span><br><span class="line">    log.debug(<span class="string">'A debug message'</span>)</span><br></pre></td></tr></table></figure><p>With this configuration, no logging will occur by default. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> somelib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>somelib.func()</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>However, if the logging system gets configured, log messages will start to appear.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> logging</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>logging.basicConfig()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>somelib.func()</span><br><span class="line">CRITICAL:somelib:A Critical Error!</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>Libraries present a special problem for logging, since information about the environment in which they are used isn’t known. As a general rule, you should never write library code that tries to configure the logging system on its own or which makes assumptions about an already existing logging configuration. Thus, you need to take great care to provide isolation.</p><p>The call to <strong>getLogger(__name__)</strong> creates a logger module that has the same name as the calling module. Since all modules are unique, this creates a dedicated logger that is likely to be separate from other loggers.</p><p>The <strong>log.addHandler(logging.NullHandler())</strong> operation attaches a null handler to the just created logger object. A null handler ignores all logging messages by default. Thus, if the library is used and logging is never configured, no messages or warnings will appear.</p><p>One subtle feature of this recipe is that the logging of individual libraries can be independently configured, regardless of other logging settings.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> logging</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>logging.basicConfig(level=logging.ERROR)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> somelib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>somelib.func()</span><br><span class="line">CRITICAL:somelib:A Critical Error!</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Change the logging level for 'somelib' only</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>logging.getLogger(<span class="string">'somelib'</span>).level=logging.DEBUG</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>somelib.func()</span><br><span class="line">CRITICAL:somelib:A Critical Error!</span><br><span class="line">DEBUG:somelib:A debug message</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>Here, the root logger has been configured to only output messages at the <strong>ERROR</strong> level or higher. However, the level of the logger for <strong>somelib</strong> has been separately configured to output debugging messages. That setting takes precedence over the global setting.</p><h2 id="Making-a-Stopwatch-Timer"><a href="#Making-a-Stopwatch-Timer" class="headerlink" title="Making a Stopwatch Timer"></a>Making a Stopwatch Timer</h2><p>You want to be able to record the time it takes to perform various tasks. The <strong>time</strong> module contains various functions for performing timing-related functions. However, it’s often useful to put a higher-level interface on them that mimics a stopwatch. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func= time.perf_counter)</span>:</span></span><br><span class="line">        self.elapsed= <span class="number">0.0</span></span><br><span class="line">        self._func= func</span><br><span class="line">        self._start= <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._start <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">'Already started'</span>)</span><br><span class="line">        self._start= self._func()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._start <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">'Not started'</span>)</span><br><span class="line">        end= self._func()</span><br><span class="line">        self.elapsed+= end- self._start</span><br><span class="line">        self._start= <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.elapsed= <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">running</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._start <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.start()</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">        self.stop()</span><br></pre></td></tr></table></figure><p>This class defines a timer that can be started, stopped, and reset as needed by the user. It keeps track of the total elapsed time in the <strong>elapsed</strong> attribute.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n)</span>:</span></span><br><span class="line">   <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">      n -= <span class="number">1</span></span><br><span class="line"><span class="comment"># Use 1: Explicit start/stop</span></span><br><span class="line">t = Timer()</span><br><span class="line">t.start()</span><br><span class="line">countdown(<span class="number">1000000</span>)</span><br><span class="line">t.stop()</span><br><span class="line">print(t.elapsed)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use 2: As a context manager</span></span><br><span class="line"><span class="keyword">with</span> t:</span><br><span class="line">   countdown(<span class="number">1000000</span>)</span><br><span class="line">   print(t.elapsed)</span><br></pre></td></tr></table></figure><p>One issue in making timing measurements concerns the underlying time function used to do it. As a general rule, the accuracy of timing measurements made with functions such as <strong>time.time()</strong> or <strong>time.clock()</strong> varies according to the operating system. In contrast, the <strong>time.perf_counter()</strong> function always uses the highest-resolution timer available on the system.</p><p>As shown, the time recorded by the <strong>Timer</strong> class is made according to wall-clock time, and includes all time spent sleeping. If you only want the amount of CPU time used by the process, use <strong>time.process_time()</strong> instead. For example:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">t = Timer(time.process_time)</span><br><span class="line"><span class="keyword">with</span> t:</span><br><span class="line">    countdown(<span class="number">1000000</span>)</span><br><span class="line">print(t.elapsed)</span><br></pre></td></tr></table></figure></p><h2 id="Launching-a-Web-Browser"><a href="#Launching-a-Web-Browser" class="headerlink" title="Launching a Web Browser"></a>Launching a Web Browser</h2><p>The <strong>webbrowser</strong> module can be used to launch a browser in a platform-independent manner. For example:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> webbrowser</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>webbrowser.open(<span class="string">'http://www.python.org'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>This opens the requested page using the default browser. If you want a bit more control over how the page gets opened, you can use one of the following functions:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Open the page in a new browser window</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>webbrowser.open_new(<span class="string">'http://www.python.org'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Open the page in a new browser tab</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>webbrowser.open_new_tab(<span class="string">'http://www.python.org'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><p>If you want to open a page in a specific browser, you can use the <strong>webbrowser.get()</strong> function to specify a particular browser. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = webbrowser.get(<span class="string">'firefox'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.open(<span class="string">'http://www.python.org'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.open_new_tab(<span class="string">'http://docs.python.org'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><blockquote><blockquote><blockquote></blockquote></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Accepting-Script-Input-via-Redirection-Pipes-or-Input-Files&quot;&gt;&lt;a href=&quot;#Accepting-Script-Input-via-Redirection-Pipes-or-Input-Files&quot; class=&quot;headerlink&quot; title=&quot;Accepting Script Input via Redirection, Pipes, or Input Files&quot;&gt;&lt;/a&gt;Accepting Script Input via Redirection, Pipes, or Input Files&lt;/h2&gt;&lt;p&gt;You want a script you’ve written to be able to accept input using whatever mechanism is easiest for the user. This should include piping output from a command to the script, redirecting a file into the script, or just passing a filename, or list of filenames, to the script on the command line.&lt;/p&gt;
&lt;p&gt;Python’s built-in &lt;strong&gt;fileinput&lt;/strong&gt; module makes this very simple and concise.&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C12_Concurrency</title>
    <link href="blog.whistlestop.ml/2018/12/15/C12-Concurrency/"/>
    <id>blog.whistlestop.ml/2018/12/15/C12-Concurrency/</id>
    <published>2018-12-15T10:48:09.000Z</published>
    <updated>2018-12-15T11:12:16.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Starting-and-Stopping-Threads"><a href="#Starting-and-Stopping-Threads" class="headerlink" title="Starting and Stopping Threads"></a>Starting and Stopping Threads</h2><p>The threading library can be used to execute any Python callable in its own thread. To do this, you create a <strong>Thread</strong> instance and supply the callable that you wish to execute as a target.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> time</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'T-minus'</span>, n)</span><br><span class="line"><span class="meta">... </span>        n-= <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>        time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t= Thread(target= countdown, args=(<span class="number">10</span>,))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.start()</span><br></pre></td></tr></table></figure><a id="more"></a> <p>When you create a thread instance, it doesn’t start executing until you invoke its <strong>start()</strong> method (which invokes the target function with the arguments you supplied).</p><p>Threads are executed in their own system-level thread (e.g., a POSIX thread or Windows threads) that is fully managed by the host operating system. Once started, threads run independently until the target function returns. You can query a thread instance to see if it’s still running:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> t.is_alive():</span><br><span class="line">    print(<span class="string">'Still running'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'Completed'</span>)</span><br></pre></td></tr></table></figure><p>You can also request to join with a thread, which waits for it to terminate:</p><p><code>t.join()</code></p><p>The interpreter remains running until all threads terminate. For long-running threads or background tasks that run forever, you should consider making the thread daemonic.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">t = Thread(target=countdown, args=(<span class="number">10</span>,), daemon=<span class="keyword">True</span>)</span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure><p>Daemonic threads can’t be joined. However, they are destroyed automatically when the main thread terminates.</p><p>Beyond the two operations shown, there aren’t many other things you can do with threads. For example, there are no operations to terminate a thread, signal a thread, adjust its scheduling, or perform any other high-level operations. If you want these features, you need to build them yourself.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">CountdowmTask</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self._running= <span class="keyword">True</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">terminate</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self._running= <span class="keyword">False</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, n)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">while</span> self._running <span class="keyword">and</span> n &gt; <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>            print(<span class="string">'T-minus'</span>, n)</span><br><span class="line"><span class="meta">... </span>            n-= <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>            time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c= CountdowmTask()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t= Thread(target= c.run, args=(<span class="number">10</span>, ))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.start()</span><br><span class="line">T-minus <span class="number">10</span></span><br><span class="line">T-minus <span class="number">9</span></span><br><span class="line">T-minus <span class="number">8</span></span><br><span class="line">T-minus <span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.terminate() <span class="comment"># Signal termination</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.join() <span class="comment"># Wait for actual termination (if needed)</span></span><br></pre></td></tr></table></figure><p>Due to a global interpreter lock (GIL), Python threads are restricted to an execution model that only allows one thread to execute in the interpreter at any given time. For this reason, Python threads should generally not be used for computationally intensive tasks where you are trying to achieve parallelism on multiple CPUs. They are much better suited for I/O handling and handling concurrent execution in code that performs blocking operations (e.g., waiting for I/O, waiting for results from a database, etc.).</p><p>Sometimes you will see threads defined via inheritance from the <strong>Thread</strong> class.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">CountdownThread</span><span class="params">(Thread)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line"><span class="meta">... </span>        super().__init__()</span><br><span class="line"><span class="meta">... </span>        self.n= n</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">while</span> self.n &gt; <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>            print(<span class="string">'T-minus'</span>, self.n)</span><br><span class="line"><span class="meta">... </span>            self.n-= <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>            time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=CountdownThread(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.start()</span><br></pre></td></tr></table></figure><h2 id="Determining-If-a-Thread-Has-Started"><a href="#Determining-If-a-Thread-Has-Started" class="headerlink" title="Determining If a Thread Has Started"></a>Determining If a Thread Has Started</h2><p>You’ve launched a thread, but want to know when it actually starts running. A key feature of threads is that they execute independently and nondeterministically. This can present a tricky synchronization problem if other threads in the program need to know if a thread has reached a certain point in its execution before carrying out further operations. To solve such problems, use the <strong>Event</strong> object from the threading library.</p><p><strong>Event</strong> instances are similar to a “sticky” flag that allows threads to wait for something to happen. Initially, an event is set to 0. If the event is unset and a thread waits on the event, it will block (i.e., go to sleep) until the event gets set. A thread that sets the event will wake up all of the threads that happen to be waiting (if any). If a thread waits on an event that has already been set, it merely moves on, continuing to execute.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Event</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># Code to execute in an independent thread</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n, started_evt)</span>:</span></span><br><span class="line">    print(<span class="string">'countdown starting'</span>)</span><br><span class="line">    started_evt.set()</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'T-minus'</span>, n)</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the event object that will be used to signal startup</span></span><br><span class="line">started_evt = Event()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Launch the thread and pass the startup event</span></span><br><span class="line">print(<span class="string">'Launching countdown'</span>)</span><br><span class="line">t = Thread(target=countdown, args=(<span class="number">10</span>,started_evt))</span><br><span class="line">t.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Wait for the thread to start</span></span><br><span class="line">started_evt.wait()</span><br><span class="line">print(<span class="string">'countdown is running'</span>)</span><br></pre></td></tr></table></figure><p>Event objects are best used for one-time events. That is, you create an event, threads wait for the event to be set, and once set, the Event is discarded. Although it is possible to clear an event using its clear() method, safely clearing an event and waiting for it to be set again is tricky to coordinate, and can lead to missed events, deadlock, or other problems .</p><p>If a thread is going to repeatedly signal an event over and over, you’re probably better off using a <strong>Condition</strong> object instead. For example, this code implements a periodic timer that other threads can monitor to see whenever the timer expires:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeriodicTimer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, interval)</span>:</span></span><br><span class="line">        self._interval= interval</span><br><span class="line">        self._flag= <span class="number">0</span></span><br><span class="line">        self._cv= threading.Condition()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        t= threading.Thread(target= self.run)</span><br><span class="line">        t.daemon= <span class="keyword">True</span></span><br><span class="line">        t.start()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            time.sleep(self._interval)</span><br><span class="line">            <span class="keyword">with</span> self._cv:</span><br><span class="line">                self._flag^= <span class="number">1</span></span><br><span class="line">                self._cv.notify_all()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wait_for_tick</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> self._cv:</span><br><span class="line">            last_flag= self._flag</span><br><span class="line">            <span class="keyword">while</span> last_flag == self._flag:</span><br><span class="line">                self._cv.wait()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example use of the timer</span></span><br><span class="line">ptimer= PeriodicTimer(<span class="number">5</span>)                </span><br><span class="line">ptimer.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Two threads that synchronize on the timer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(nticks)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> nticks &gt; <span class="number">0</span>:</span><br><span class="line">        ptimer.wait_for_tick()</span><br><span class="line">        print(<span class="string">'T-minus'</span>, nticks)</span><br><span class="line">        nticks-=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countup</span><span class="params">(last)</span>:</span></span><br><span class="line">    n= <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; last:</span><br><span class="line">        ptimer.wait_for_tick()</span><br><span class="line">        print(<span class="string">'Counting'</span>, n)</span><br><span class="line">        n+= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">threading.Thread(target= countdown, args=(<span class="number">10</span>,)).start()</span><br><span class="line">threading.Thread(target= countup, args=(<span class="number">5</span>,)).start()</span><br></pre></td></tr></table></figure><p>A critical feature of <strong>Event</strong> objects is that they wake all waiting threads. If you are writing a program where you only want to wake up a single waiting thread, it is probably better to use a <strong>Semaphore</strong> or <strong>Condition</strong> object instead.</p><p>For example, consider this code involving semaphores:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">(n, sema)</span>:</span></span><br><span class="line"><span class="meta">... </span>    sema.acquire()</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'Working'</span>, n)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sema= threading.Semaphore(<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nworkers= <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> n <span class="keyword">in</span> range(nworkers):</span><br><span class="line"><span class="meta">... </span>    t= threading.Thread(target= worker, args=(n, sema,))</span><br><span class="line"><span class="meta">... </span>    t.start()</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>If you run this, a pool of threads will start, but nothing happens because they’re all blocked waiting to acquire the semaphore. Each time the semaphore is released, only one worker will wake up and run. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sema.release()</span><br><span class="line">Working <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sema.release()</span><br><span class="line">Working <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sema.release()</span><br><span class="line">Working <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Communicating-Between-Threads"><a href="#Communicating-Between-Threads" class="headerlink" title="Communicating Between Threads"></a>Communicating Between Threads</h2><p>You have multiple threads in your program and you want to safely communicate or exchange data between them. Perhaps the safest way to send data from one thread to another is to use a <strong>Queue</strong> from the queue library. To do this, you create a <strong>Queue</strong> instance that is shared by the threads. Threads then use <strong>put()</strong> or <strong>get()</strong> operations to add or remove items from the queue.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="comment"># A thread that produces data</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(out_q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment"># Produce some data</span></span><br><span class="line">        ...</span><br><span class="line">        out_q.put(data)</span><br><span class="line"><span class="comment"># A thread that consumes data</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(in_q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="comment"># Get some data</span></span><br><span class="line">        data = in_q.get()</span><br><span class="line">        <span class="comment"># Process the data</span></span><br><span class="line">        ...</span><br><span class="line"><span class="comment"># Create the shared queue and launch both threads</span></span><br><span class="line">q = Queue()</span><br><span class="line">t1 = Thread(target=consumer, args=(q,))</span><br><span class="line">t2 = Thread(target=producer, args=(q,))</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br></pre></td></tr></table></figure><p><strong>Queue</strong> instances already have all of the required locking, so they can be safely shared by as many threads as you wish.</p><p>Although queues are the most common thread communication mechanism, you can build your own data structures as long as you add the required locking and synchronization. The most common way to do this is to wrap your data structures with a condition variable. For example, here is how you might build a thread-safe priority queue.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq </span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._queue= []</span><br><span class="line">        self._count= <span class="number">0</span></span><br><span class="line">        self._cv= threading.Condition()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self,item, priority)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> self._cv:</span><br><span class="line">            heapq.heappush(self._queue, (-priority, self._count, item))</span><br><span class="line">            self._count+= <span class="number">1</span></span><br><span class="line">            self._cv.notify()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> self._cv:</span><br><span class="line">            <span class="keyword">while</span> len(self._queue) == <span class="number">0</span>:</span><br><span class="line">                self._cv.wait()</span><br><span class="line">            <span class="keyword">return</span> heapq.heappop(self._queue)[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>Thread communication with a queue is a one-way and nondeterministic process. In general, there is no way to know when the receiving thread has actually received a message and worked on it. However, <strong>Queue</strong> objects do provide some basic completion features, as illustrated by the <strong>task_done()</strong> and <strong>join()</strong> methods.</p><h2 id="Locking-Critical-Sections"><a href="#Locking-Critical-Sections" class="headerlink" title="Locking Critical Sections"></a>Locking Critical Sections</h2><p>To make mutable objects safe to use by multiple threads, use Lock objects in the <strong>threading</strong> library.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SharedCounter</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, initial_value= <span class="number">0</span>)</span>:</span></span><br><span class="line">        self._value= initial_value</span><br><span class="line">        self._value_lock = threading.Lock()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">incr</span><span class="params">(self, delta= <span class="number">1</span>)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> self._value_lock:</span><br><span class="line">            self._value+= delta</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decr</span><span class="params">(self, delta= <span class="number">1</span>)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> self._value_lock:</span><br><span class="line">            self._value-= delta</span><br></pre></td></tr></table></figure><p>A <strong>Lock</strong> guarantees mutual exclusion when used with the <strong>with</strong> statement—that is, only one thread is allowed to execute the block of statements under the with statement at a time. The <strong>with</strong> statement acquires the lock for the duration of the indented statements and releases the lock when control flow exits the indented block.</p><p>In the threading library, you’ll find other synchronization primitives, such as <strong>RLock</strong> and <strong>Semaphore</strong> objects. As a general rule of thumb, these are more special purpose and should not be used for simple locking of mutable state. An <strong>RLock</strong> or re-entrant lock object is a lock that can be acquired multiple times by the same thread. It is primarily used to implement code based locking or synchronization based on a construct known as a “monitor.” With this kind of locking, only one thread is allowed to use an entire function or the methods of a class while the lock is held. For example, you could implement the <strong>SharedCounter</strong> class like this:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SharedCounter</span>:</span></span><br><span class="line">    _lock= threading.RLock()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, initial_value= <span class="number">0</span>)</span>:</span></span><br><span class="line">        self._value= initial_value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">incr</span><span class="params">(self, delta= <span class="number">1</span>)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> SharedCounter._lock:</span><br><span class="line">            self._value+= delta</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decr</span><span class="params">(self, delta= <span class="number">1</span>)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> SharedCounter._lock:</span><br><span class="line">            self.incr(-delta)</span><br></pre></td></tr></table></figure></p><h2 id="Storing-Thread-Specific-State"><a href="#Storing-Thread-Specific-State" class="headerlink" title="Storing Thread-Specific State"></a>Storing Thread-Specific State</h2><p>Sometimes in multithreaded programs, you need to store data that is only specific to the currently executing thread. To do this, create a thread-local storage object using <strong>threading.local()</strong>. Attributes stored and read on this object are only visible to the executing thread and no others.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket, AF_INET, SOCK_STREAM</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LazyConnecion</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, address, family= AF_INET, type= SOCK_STREAM)</span>:</span></span><br><span class="line">        self.address= address</span><br><span class="line">        self.family= AF_INET</span><br><span class="line">        self.type= SOCK_STREAM</span><br><span class="line">        self.local= threading.local()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(self.local, <span class="string">'sock'</span>):</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">'Already connected'</span>)</span><br><span class="line">        self.local.sock= socket(self.family, self.type)</span><br><span class="line">        self.local.sock.connect(self.address)</span><br><span class="line">        <span class="keyword">return</span> self.local.sock</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_ty, exc_val, tb)</span>:</span></span><br><span class="line">        self.local.sock.close()</span><br><span class="line">        <span class="keyword">del</span> self.local.sock</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(conn)</span>        :</span></span><br><span class="line">    <span class="keyword">with</span> conn <span class="keyword">as</span> s:</span><br><span class="line">        s.send(<span class="string">b'GET /index.html HTTP/1.0\r\n'</span>)</span><br><span class="line">        s.send(<span class="string">b'Host: www.python.org\r\n'</span>)</span><br><span class="line">        s.send(<span class="string">b'\r\n'</span>)</span><br><span class="line">        resp= <span class="string">b''</span>.join(iter(partial(s.recv, <span class="number">8192</span>), <span class="string">b''</span>))</span><br><span class="line">    print(<span class="string">'Got &#123;&#125; bytes'</span>.format(len(resp)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    conn= LazyConnecion((<span class="string">'www.python.org'</span>, <span class="number">80</span>))</span><br><span class="line">    t1= threading.Thread(target= test, args=(conn,))</span><br><span class="line">    t2= threading.Thread(target= test, args=(conn,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br></pre></td></tr></table></figure><p>The reason it works is that each thread actually creates its own dedicated socket connection (stored as <strong>self.local.sock</strong>). Thus, when the different threads perform socket operations, they don’t interfere with one another as they are being performed on dif‐ ferent sockets.</p><p>Under the covers, an instance of <strong>threading.local()</strong> maintains a separate instance dictionary for each thread. All of the usual instance operations of getting, setting, and deleting values just manipulate the per-thread dictionary. The fact that each thread uses a separate dictionary is what provides the isolation of data.</p><h2 id="Creating-a-Thread-Poo"><a href="#Creating-a-Thread-Poo" class="headerlink" title="Creating a Thread Poo"></a>Creating a Thread Poo</h2><p>You want to create a pool of worker threads for serving clients or performing other kinds of work. The <strong>concurrent.futures</strong> library has a <strong>ThreadPoolExecutor</strong> class that can be used for this purpose.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket, AF_INET, SOCK_STREAM</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo_client</span><span class="params">(sock, client_addr)</span>:</span></span><br><span class="line">    print(<span class="string">'Got connectin from'</span>, client_addr)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        msg= sock.recv(<span class="number">65536</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> msg:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        sock.sendall(msg)</span><br><span class="line">        print(<span class="string">'Client closed connection'</span>)</span><br><span class="line">        sock.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo_server</span><span class="params">(addr)</span>        :</span></span><br><span class="line">    pool= ThreadPoolExecutor(<span class="number">128</span>)</span><br><span class="line">    sock= socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    sock.bind(addr)</span><br><span class="line">    sock.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        client_sock, client_addr= sock.accept()</span><br><span class="line">        pool.submit(echo_client, client_sock, client_addr)</span><br><span class="line"></span><br><span class="line">echo_server((<span class="string">''</span>, <span class="number">16000</span>))</span><br></pre></td></tr></table></figure></p><p>If you want to manually create your own thread pool, it’s usually easy enough to do it using a <strong>Queue</strong>. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket, AF_INET, SOCK_STREAM</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo_client</span><span class="params">(q)</span>:</span></span><br><span class="line">    sock, client_addr= q.get()</span><br><span class="line">    print(<span class="string">'Got connection from'</span>, client_addr)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        msg= sock.recv(<span class="number">65536</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> msg: <span class="keyword">break</span></span><br><span class="line">        sock.sendall(msg)</span><br><span class="line">    print(<span class="string">'Client closed connection'</span>)</span><br><span class="line">    sock.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo_server</span><span class="params">(addr, nworkers)</span>:</span></span><br><span class="line">    q= Queue()</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(nworkers):</span><br><span class="line">        t= Thread(target= echo_client, args= (q,))</span><br><span class="line">        t.daemon= <span class="keyword">True</span></span><br><span class="line">        t.start()</span><br><span class="line">    sock= socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    sock.bind(addr)</span><br><span class="line">    sock.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        client_sock, client_addr= sock.accept()</span><br><span class="line">        q.put((client_sock, client_addr))</span><br><span class="line"></span><br><span class="line">echo_server((<span class="string">''</span>, <span class="number">15000</span>), <span class="number">128</span>)</span><br></pre></td></tr></table></figure><p>One advantage of using <strong>ThreadPoolExecutor</strong> over a manual implementation is that it makes it easier for the submitter to receive results from the called function. For example, you could write code like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_url</span><span class="params">(url)</span>:</span></span><br><span class="line">    u= urllib.request.urlopen(url)</span><br><span class="line">    data= u.read()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">pool= ThreadPoolExecutor(<span class="number">10</span>)</span><br><span class="line">a= pool.submit(fetch_url, <span class="string">'http://www.python.org'</span>)</span><br><span class="line">b= pool.submit(fetch_url, <span class="string">'http://www.pypy.org'</span>)</span><br><span class="line"></span><br><span class="line">x= a.result()</span><br><span class="line">y= b.result()</span><br></pre></td></tr></table></figure><p>The result objects in the example handle all of the blocking and coordination needed to get data back from the worker thread. Specifically, the operation <strong>a.result()</strong> blocks until the corresponding function has been executed by the pool and returned a value.</p><h2 id="Performing-Simple-Parallel-Programming"><a href="#Performing-Simple-Parallel-Programming" class="headerlink" title="Performing Simple Parallel Programming"></a>Performing Simple Parallel Programming</h2><p>You have a program that performs a lot of CPU-intensive work, and you want to make it run faster by having it take advantage of multiple CPUs. The <strong>concurrent.futures</strong> library provides a <strong>ProcessPoolExecutor</strong> class that can be used to execute computationally intensive functions in a separately running instance of the Python interpreter.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">from</span> concurrent <span class="keyword">import</span> futures</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_robots</span><span class="params">(filename)</span>:</span></span><br><span class="line">    robots= set()</span><br><span class="line">    <span class="keyword">with</span> gzip.open(filename) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> io.TextIOWrapper(f, encoding= <span class="string">'ascii'</span>):</span><br><span class="line">            fields= line.split()</span><br><span class="line">            <span class="keyword">if</span> fields[<span class="number">6</span>] == <span class="string">'/robots.txt'</span>:</span><br><span class="line">                robots.add(fields[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> robots</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_all_robots</span><span class="params">(logdir)</span>:</span></span><br><span class="line">    files= glob.glob(logdir+<span class="string">'/*.log.gz'</span>)</span><br><span class="line">    all_robots= set()</span><br><span class="line">    <span class="keyword">with</span> futures.ProcessPoolExecutor() <span class="keyword">as</span> pool:</span><br><span class="line">        <span class="keyword">for</span> robots <span class="keyword">in</span> pool.map(find_robots, files):</span><br><span class="line">            all_robots.update(robots)</span><br><span class="line">    <span class="keyword">return</span> all_robots</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    robots= find_all_robots(<span class="string">'logs'</span>)</span><br><span class="line">    <span class="keyword">for</span> ipaddr <span class="keyword">in</span> robots:</span><br><span class="line">        print(ipaddr)</span><br></pre></td></tr></table></figure><p>The script produces the same result but runs about 3.5 times faster on our quad-core machine. </p><p>Under the covers, a <strong>ProcessPoolExecutor</strong> creates N independent running Python interpreters where N is the number of available CPUs detected on the system. You can change the number of processes created by supplying an optional argument to <strong>ProcessPoolExecutor(N)</strong>. The pool runs until the last statement in the <strong>with</strong> block is executed,  at which point the process pool is shut down. However, the program will wait until allsubmitted work has been processed.</p><p>Work to be submitted to a pool must be defined in a function. There are two methods for submission. If you are are trying to parallelize a list comprehension or a <strong>map()</strong> operation, you use <strong>pool.map()</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A function that performs a lot of work</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(x)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="comment"># Nonparallel code</span></span><br><span class="line">results = map(work, data)</span><br><span class="line"><span class="comment"># Parallel implementation</span></span><br><span class="line"><span class="keyword">with</span> ProcessPoolExecutor() <span class="keyword">as</span> pool:</span><br><span class="line">    results = pool.map(work, data)</span><br></pre></td></tr></table></figure><p>Alternatively, you can manually submit single tasks using the <strong>pool.submit()</strong> method:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Some function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(x)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">with</span> ProcessPoolExecutor() <span class="keyword">as</span> pool:</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># Example of submitting work to the pool</span></span><br><span class="line">    future_result = pool.submit(work, arg)</span><br><span class="line">    <span class="comment"># Obtaining the result (blocks until done)</span></span><br><span class="line">    r = future_result.result()</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>If you manually submit a job, the result is an instance of <strong>Future</strong>. To obtain the actual result, you call its <strong>result()</strong> method. This blocks until the result is computed and returned by the pool.</p><p>Instead of blocking, you can also arrange to have a callback function triggered upon completion instead.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">when_done</span><span class="params">(r)</span>:</span></span><br><span class="line">    print(<span class="string">'Got:'</span>, r.result())</span><br><span class="line"><span class="keyword">with</span> ProcessPoolExecutor() <span class="keyword">as</span> pool:</span><br><span class="line">    future_result = pool.submit(work, arg)</span><br><span class="line">    future_result.add_done_callback(when_done)</span><br></pre></td></tr></table></figure></p><p>The user-supplied callback function receives an instance of <strong>Future</strong> that must be used to obtain the actual result (i.e., by calling its <strong>result()</strong> method).</p><h2 id="Using-Generators-As-an-Alternative-to-Threads"><a href="#Using-Generators-As-an-Alternative-to-Threads" class="headerlink" title="Using Generators As an Alternative to Threads"></a>Using Generators As an Alternative to Threads</h2><p>You want to implement concurrency using generators (coroutines) as an alternative to system threads. This is sometimes known as user-level threading or green threading.</p><p>To implement your own concurrency using generators, you first need a fundamental insight concerning generator functions and the <strong>yield</strong> statement. Specifically, the fundamental behavior of <strong>yield</strong> is that it causes a generator to suspend its execution. By suspending execution, it is possible to write a scheduler that treats generators as a kind of “task” and alternates their execution using a kind of cooperative task switching.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> n&gt;<span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'T-minus'</span>, n)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">yield</span> </span><br><span class="line"><span class="meta">... </span>        n-= <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'Blastoff!'</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">countup</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    x=<span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> x &lt; n:</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Counting up'</span>, x)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">yield</span> </span><br><span class="line"><span class="meta">... </span>        x+= <span class="number">1</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">TaskSheduler</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self._task_queue= deque()</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">new_task</span><span class="params">(self, task)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self._task_queue.append(task)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">while</span> self._task_queue:</span><br><span class="line"><span class="meta">... </span>            task= self._task_queue.popleft()</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>                next(task)</span><br><span class="line"><span class="meta">... </span>                self._task_queue.append(task)</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">except</span> StopIteration:</span><br><span class="line"><span class="meta">... </span>                <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sched= TaskSheduler()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sched.new_task(countdown(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sched.new_task(countdown(<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sched.new_task(countup(<span class="number">15</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sched.run()</span><br><span class="line">T-minus <span class="number">10</span></span><br><span class="line">T-minus <span class="number">5</span></span><br><span class="line">Counting up <span class="number">0</span></span><br><span class="line">T-minus <span class="number">9</span></span><br><span class="line">T-minus <span class="number">4</span></span><br><span class="line">Counting up <span class="number">1</span></span><br><span class="line">T-minus <span class="number">8</span></span><br><span class="line">T-minus <span class="number">3</span></span><br><span class="line">Counting up <span class="number">2</span></span><br><span class="line">T-minus <span class="number">7</span></span><br><span class="line">T-minus <span class="number">2</span></span><br><span class="line">Counting up <span class="number">3</span></span><br><span class="line">T-minus <span class="number">6</span></span><br><span class="line">T-minus <span class="number">1</span></span><br><span class="line">Counting up <span class="number">4</span></span><br><span class="line">T-minus <span class="number">5</span></span><br><span class="line">Blastoff!</span><br><span class="line">Counting up <span class="number">5</span></span><br><span class="line">T-minus <span class="number">4</span></span><br><span class="line">Counting up <span class="number">6</span></span><br><span class="line">T-minus <span class="number">3</span></span><br><span class="line">Counting up <span class="number">7</span></span><br><span class="line">T-minus <span class="number">2</span></span><br><span class="line">Counting up <span class="number">8</span></span><br><span class="line">T-minus <span class="number">1</span></span><br><span class="line">Counting up <span class="number">9</span></span><br><span class="line">Blastoff!</span><br><span class="line">Counting up <span class="number">10</span></span><br><span class="line">Counting up <span class="number">11</span></span><br><span class="line">Counting up <span class="number">12</span></span><br><span class="line">Counting up <span class="number">13</span></span><br><span class="line">Counting up <span class="number">14</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>In practice, you probably wouldn’t use generators to implement concurrency for something as simple as shown. Instead, you might use generators to replace the use of threads when implementing actors or network servers.</p><p>The following code illustrates the use of generators to implement a thread-free version of actors:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActorScheduler</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._actors= &#123;&#125;</span><br><span class="line">        self._msg_queue= deque()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_actor</span><span class="params">(self, name, actor)</span>:</span></span><br><span class="line">        self._msg_queue.append((actor, <span class="keyword">None</span>))</span><br><span class="line">        self._actors[name]= actor</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, name, msg)</span>:</span></span><br><span class="line">        actor= self._actors.get(name)</span><br><span class="line">        <span class="keyword">if</span> actor:</span><br><span class="line">            self._msg_queue.append((actor, msg))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self._msg_queue:</span><br><span class="line">            actor, msg= self._msg_queue.popleft()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                actor.send(msg)</span><br><span class="line">            <span class="keyword">except</span> StopIteration:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__== <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printer</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            msg= <span class="keyword">yield</span></span><br><span class="line">            print(<span class="string">'Got:'</span>, msg)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">counter</span><span class="params">(sched)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            n= <span class="keyword">yield</span></span><br><span class="line">            <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            sched.send(<span class="string">'printer'</span>, n)</span><br><span class="line">            sched.send(<span class="string">'counter'</span>, n<span class="number">-1</span>)</span><br><span class="line">    sched= ActorScheduler()</span><br><span class="line">    sched.new_actor(<span class="string">'printer'</span>, printer())</span><br><span class="line">    sched.new_actor(<span class="string">'counter'</span>, counter(sched))</span><br><span class="line">    sched.send(<span class="string">'counter'</span>, <span class="number">10</span>)</span><br><span class="line">    sched.run()</span><br><span class="line"><span class="comment">#results</span></span><br><span class="line">Got: <span class="number">10</span></span><br><span class="line">Got: <span class="number">9</span></span><br><span class="line">Got: <span class="number">8</span></span><br><span class="line">Got: <span class="number">7</span></span><br><span class="line">Got: <span class="number">6</span></span><br><span class="line">Got: <span class="number">5</span></span><br><span class="line">Got: <span class="number">4</span></span><br><span class="line">Got: <span class="number">3</span></span><br><span class="line">Got: <span class="number">2</span></span><br><span class="line">Got: <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Starting-and-Stopping-Threads&quot;&gt;&lt;a href=&quot;#Starting-and-Stopping-Threads&quot; class=&quot;headerlink&quot; title=&quot;Starting and Stopping Threads&quot;&gt;&lt;/a&gt;Starting and Stopping Threads&lt;/h2&gt;&lt;p&gt;The threading library can be used to execute any Python callable in its own thread. To do this, you create a &lt;strong&gt;Thread&lt;/strong&gt; instance and supply the callable that you wish to execute as a target.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;countdown&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; n &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;        print(&lt;span class=&quot;string&quot;&gt;&#39;T-minus&#39;&lt;/span&gt;, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;        n-= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;        time.sleep(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; threading &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Thread&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;t= Thread(target= countdown, args=(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;t.start()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C11_Network_and_Web_Programming</title>
    <link href="blog.whistlestop.ml/2018/12/15/C11-Network-and-Web-Programming/"/>
    <id>blog.whistlestop.ml/2018/12/15/C11-Network-and-Web-Programming/</id>
    <published>2018-12-15T10:47:28.000Z</published>
    <updated>2018-12-15T11:12:12.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Creating-a-TCP-Server"><a href="#Creating-a-TCP-Server" class="headerlink" title="Creating a TCP Server"></a>Creating a TCP Server</h2><p>You want to implement a server that communicates with clients using the TCP Internet protocol. An easy way to create a TCP server is to use the <strong>socketserver</strong> library.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socketserver <span class="keyword">import</span> BaseRequestHandler, TCPServer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchoHandler</span><span class="params">(BaseRequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Got connection from'</span>, self.client_address)</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            msg = self.request.recv(<span class="number">8192</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> msg:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            self.request.send(msg)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    serv = TCPServer((<span class="string">''</span>, <span class="number">20000</span>), EchoHandler)</span><br><span class="line">    serv.serve_forever()</span><br></pre></td></tr></table></figure><a id="more"></a> <p>In this code, you define a special handler class that implements a <strong>handle()</strong> method for servicing client connections. The <strong>request</strong> attribute is the underlying client socket and <strong>client_address</strong> has client address.</p><p>To test the server, run it and then open a separate Python process that connects to it:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> socket <span class="keyword">import</span> socket, AF_INET, SOCK_STREAM</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.connect((<span class="string">'localhost'</span>, <span class="number">20000</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.send(<span class="string">b'Hello'</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.recv(<span class="number">8192</span>)</span><br><span class="line"><span class="string">b'Hello'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p> Here is an example that uses the <strong>StreamRequestHandler</strong> base class to put a file-like interface on the underlying socket:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socketserver <span class="keyword">import</span> StreamRequestHandler, TCPServer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchoHandler</span><span class="params">(StreamRequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Got connection from'</span>, self.client_address)</span><br><span class="line">        <span class="comment"># self.rfile is a file-like object for reading</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> self.rfile:</span><br><span class="line">            <span class="comment"># self.wfile is a file-like object for writing</span></span><br><span class="line">            self.wfile.write(line)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    serv = TCPServer((<span class="string">''</span>, <span class="number">20000</span>), EchoHandler)</span><br><span class="line">    serv.serve_forever()</span><br></pre></td></tr></table></figure><p><strong>socketserver</strong> makes it relatively easy to create simple TCP servers. However, you should be aware that, by default, the servers are single threaded and can only serve one client at a time. If you want to handle multiple clients, either instantiate a <strong>ForkingTCPServer</strong> or <strong>ThreadingTCPServer</strong> object instead.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socketserver <span class="keyword">import</span> ThreadingTCPServer</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    serv = ThreadingTCPServer((<span class="string">''</span>, <span class="number">20000</span>), EchoHandler)</span><br><span class="line">    serv.serve_forever()</span><br></pre></td></tr></table></figure><p>One issue with forking and threaded servers is that they spawn a new process or thread on each client connection. There is no upper bound on the number of allowed clients, so a malicious hacker could potentially launch a large number of simultaneous connections in an effort to make your server explode.</p><p>You create an instance of a normal nonthreaded server, but then launch the <strong>serve_forever()</strong> method in a pool of multiple threads. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line">    NWORKERS = <span class="number">16</span></span><br><span class="line">    serv = TCPServer((<span class="string">''</span>, <span class="number">20000</span>), EchoHandler)</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(NWORKERS):</span><br><span class="line">        t = Thread(target=serv.serve_forever)</span><br><span class="line">        t.daemon = <span class="keyword">True</span></span><br><span class="line">        t.start()</span><br><span class="line">    serv.serve_forever()</span><br></pre></td></tr></table></figure><p>Normally, a <strong>TCPServer</strong> binds and activates the underlying socket upon instantiation. However, sometimes you might want to adjust the underlying socket by setting options. To do this, supply the <strong>bind_and_activate=False</strong> argument.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    serv = TCPServer((<span class="string">''</span>, <span class="number">20000</span>), EchoHandler, bind_and_activate=<span class="keyword">False</span>)</span><br><span class="line">    <span class="comment"># Set up various socket options</span></span><br><span class="line">    serv.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># Bind and activate</span></span><br><span class="line">    serv.server_bind()</span><br><span class="line">    serv.server_activate()</span><br><span class="line">    serv.serve_forever()</span><br></pre></td></tr></table></figure><p>The <strong>StreamRequestHandler</strong> class is actually a bit more flexible, and supports some features that can be enabled through the specification of additional class variables. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchoHandler</span><span class="params">(StreamRequestHandler)</span>:</span></span><br><span class="line">    <span class="comment"># Optional settings (defaults shown)</span></span><br><span class="line">    timeout = <span class="number">5</span> <span class="comment"># Timeout on all socket operations</span></span><br><span class="line">    rbufsize = <span class="number">-1</span> <span class="comment"># Read buffer size</span></span><br><span class="line">    wbufsize = <span class="number">0</span> <span class="comment"># Write buffer size</span></span><br><span class="line">    disable_nagle_algorithm = <span class="keyword">False</span> <span class="comment"># Sets TCP_NODELAY socket option</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Got connection from'</span>, self.client_address)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> self.rfile:</span><br><span class="line">                <span class="comment"># self.wfile is a file-like object for writing</span></span><br><span class="line">                self.wfile.write(line)</span><br><span class="line">        <span class="keyword">except</span> socket.timeout:</span><br><span class="line">            print(<span class="string">'Timed out!'</span>)</span><br></pre></td></tr></table></figure><p>Finally, it should be noted that most of Python’s higher-level networking modules (e.g., HTTP, XML-RPC, etc.) are built on top of the <strong>socketserver</strong> functionality. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket, AF_INET, SOCK_STREAM</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo_handler</span><span class="params">(address, client_sock)</span>:</span></span><br><span class="line">    print(<span class="string">'Got connection from &#123;&#125;'</span>.format(address))</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        msg = client_sock.recv(<span class="number">8192</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> msg:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        client_sock.sendall(msg)</span><br><span class="line">    client_sock.close()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo_server</span><span class="params">(address, backlog=<span class="number">5</span>)</span>:</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    sock.bind(address)</span><br><span class="line">    sock.listen(backlog)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        client_sock, client_addr = sock.accept()</span><br><span class="line">        echo_handler(client_addr, client_sock)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    echo_server((<span class="string">''</span>, <span class="number">20000</span>))</span><br></pre></td></tr></table></figure><h2 id="Creating-a-Simple-REST-Based-Interface"><a href="#Creating-a-Simple-REST-Based-Interface" class="headerlink" title="Creating a Simple REST-Based Interface"></a>Creating a Simple REST-Based Interface</h2><p>One of the easiest ways to build REST-based interfaces is to create a tiny library based on the WSGI standard.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> cgi</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">notfound_404</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line"><span class="meta">... </span>    start_response(<span class="string">'404 Not Found'</span>, [(<span class="string">'Content-type'</span>, <span class="string">'text/plain'</span>)])</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> [<span class="string">b'Not Found'</span>]</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">PathDispatcher</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.pathmap= &#123;&#125;</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line"><span class="meta">... </span>        path= environ(<span class="string">'PATH_INFO'</span>)</span><br><span class="line"><span class="meta">... </span>        params= cgi.FieldStorage(environ[<span class="string">'wsgi.input'</span>], environ= environ)</span><br><span class="line"><span class="meta">... </span>        method= environ[<span class="string">'REQUEST_METHOD'</span>].lower()</span><br><span class="line"><span class="meta">... </span>        environ[<span class="string">'params'</span>]= &#123;key: params.getvalue(key) <span class="keyword">for</span> key <span class="keyword">in</span> params&#125;</span><br><span class="line"><span class="meta">... </span>        handler= self.pathmap.get((method, path), notfound_404)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> handler(environ, start_response)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(self, method, path, function)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.pathmap[method.lower(), path] = function</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> function</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>To use this dispatcher, you simply write different handlers, such as the following:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">_hello_resp = <span class="string">'''\</span></span><br><span class="line"><span class="string">   &lt;html&gt;</span></span><br><span class="line"><span class="string">      &lt;head&gt;</span></span><br><span class="line"><span class="string">         &lt;title&gt;Hello &#123;name&#125;&lt;/title&gt;</span></span><br><span class="line"><span class="string">      &lt;/head&gt;</span></span><br><span class="line"><span class="string">      &lt;body&gt;</span></span><br><span class="line"><span class="string">         &lt;h1&gt;Hello &#123;name&#125;!&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;/body&gt;</span></span><br><span class="line"><span class="string">   &lt;/html&gt;'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">   start_response(<span class="string">'200 OK'</span>, [ (<span class="string">'Content-type'</span>,<span class="string">'text/html'</span>)])</span><br><span class="line">   params = environ[<span class="string">'params'</span>]</span><br><span class="line">   resp = _hello_resp.format(name=params.get(<span class="string">'name'</span>))</span><br><span class="line">   <span class="keyword">yield</span> resp.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">_localtime_resp = <span class="string">'''\</span></span><br><span class="line"><span class="string">   &lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="string">   &lt;time&gt;</span></span><br><span class="line"><span class="string">       &lt;year&gt;&#123;t.tm_year&#125;&lt;/year&gt;</span></span><br><span class="line"><span class="string">       &lt;month&gt;&#123;t.tm_mon&#125;&lt;/month&gt;</span></span><br><span class="line"><span class="string">       &lt;day&gt;&#123;t.tm_mday&#125;&lt;/day&gt;</span></span><br><span class="line"><span class="string">       &lt;hour&gt;&#123;t.tm_hour&#125;&lt;/hour&gt;</span></span><br><span class="line"><span class="string">       &lt;minute&gt;&#123;t.tm_min&#125;&lt;/minute&gt;</span></span><br><span class="line"><span class="string">       &lt;second&gt;&#123;t.tm_sec&#125;&lt;/second&gt;</span></span><br><span class="line"><span class="string">   &lt;/time&gt;'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">localtime</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">   start_response(<span class="string">'200 OK'</span>, [ (<span class="string">'Content-type'</span>, <span class="string">'application/xml'</span>) ])</span><br><span class="line">   resp = _localtime_resp.format(t=time.localtime())</span><br><span class="line">   <span class="keyword">yield</span> resp.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">   <span class="keyword">from</span> resty <span class="keyword">import</span> PathDispatcher</span><br><span class="line">   <span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line">   <span class="comment"># Create the dispatcher and register functions</span></span><br><span class="line">   dispatcher = PathDispatcher()</span><br><span class="line">   dispatcher.register(<span class="string">'GET'</span>, <span class="string">'/hello'</span>, hello_world)</span><br><span class="line">   dispatcher.register(<span class="string">'GET'</span>, <span class="string">'/localtime'</span>, localtime)</span><br><span class="line">   <span class="comment"># Launch a basic server</span></span><br><span class="line">   httpd = make_server(<span class="string">''</span>, <span class="number">8080</span>, dispatcher)</span><br><span class="line">   print(<span class="string">'Serving on port 8080...'</span>)</span><br><span class="line">   httpd.serve_forever()</span><br></pre></td></tr></table></figure><p>To test your server, you can interact with it using a browser or <strong>urllib</strong>. For example:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>u = urlopen(<span class="string">'http://localhost:8080/hello?name=Guido'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>u = urlopen(<span class="string">'http://localhost:8080/localtime'</span>)</span><br></pre></td></tr></table></figure></p><p>In WSGI, you simply implement applications in the form of a callable that accepts this calling convention:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cgi</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wsgi_app</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><p>The <strong>environ</strong> argument is a dictionary that contains values inspired by the CGI interface provided by various web servers such as Apache.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wsgi_app</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    method = environ[<span class="string">'REQUEST_METHOD'</span>]</span><br><span class="line">    path = environ[<span class="string">'PATH_INFO'</span>]</span><br><span class="line">    <span class="comment"># Parse the query parameters</span></span><br><span class="line">    params = cgi.FieldStorage(environ[<span class="string">'wsgi.input'</span>], environ=environ)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>The <strong>start_response</strong> argument is a function that must be called to initiate a response. The first argument is the resulting HTTP status. The second argument is a list of (<strong>name</strong>, <strong>value</strong>) tuples that make up the HTTP headers of the response. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wsgi_app</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    start_response(<span class="string">'200 OK'</span>, [(<span class="string">'Content-type'</span>, <span class="string">'text/plain'</span>)])</span><br></pre></td></tr></table></figure><p>Although WSGI applications are commonly defined as a function, as shown, an instance may also be used as long as it implements a suitable <strong>__call__()</strong> method. For example:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIApplication</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span></span></span><br><span class="line"><span class="function">        ...</span></span><br></pre></td></tr></table></figure></p><p>This technique has been used to create the <strong>PathDispatcher</strong> class in the recipe. The dispatcher does nothing more than manage a dictionary mapping (<strong>method</strong>, <strong>path</strong>) pairs to handler functions. When a request arrives, the <strong>method</strong> and <strong>path</strong> are extracted and used to dispatch to a handler.  In addition, any query variables are parsed and put into a dictionary that is stored as <strong>environ[‘params’]</strong>.</p><h2 id="Implementing-a-Simple-Remote-Procedure-Call-with-XML-RPC"><a href="#Implementing-a-Simple-Remote-Procedure-Call-with-XML-RPC" class="headerlink" title="Implementing a Simple Remote Procedure Call with XML-RPC"></a>Implementing a Simple Remote Procedure Call with XML-RPC</h2><p>You want an easy way to execute functions or methods in Python programs running on remote machines.<br>Perhaps the easiest way to implement a simple remote procedure call mechanism is to use XML-RPC.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xmlrpc.server <span class="keyword">import</span> SimpleXMLRPCServer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyValueServer</span>:</span></span><br><span class="line">    _rpc_methods_ = [<span class="string">'get'</span>, <span class="string">'set'</span>, <span class="string">'delete'</span>, <span class="string">'exists'</span>, <span class="string">'keys'</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, address)</span>:</span></span><br><span class="line">        self._data = &#123;&#125;</span><br><span class="line">        self._serv = SimpleXMLRPCServer(address, allow_none=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> self._rpc_methods_:</span><br><span class="line">            self._serv.register_function(getattr(self, name))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._data[name]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, name, value)</span>:</span></span><br><span class="line">        self._data[name] = value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self._data[name]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exists</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> name <span class="keyword">in</span> self._data</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">keys</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> list(self._data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serve_forever</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._serv.serve_forever()</span><br><span class="line"><span class="comment"># Example</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    kvserv = KeyValueServer((<span class="string">''</span>, <span class="number">15000</span>))</span><br><span class="line">    kvserv.serve_forever()</span><br></pre></td></tr></table></figure><p>Here is how you would access the server remotely from a client:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> xmlrpc.client <span class="keyword">import</span> ServerProxy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = ServerProxy(<span class="string">'http://localhost:15000'</span>, allow_none=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.set(<span class="string">'foo'</span>, <span class="string">'bar'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.set(<span class="string">'spam'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.keys()</span><br><span class="line">[<span class="string">'spam'</span>, <span class="string">'foo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.get(<span class="string">'foo'</span>)</span><br><span class="line"><span class="string">'bar'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.get(<span class="string">'spam'</span>)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.delete(<span class="string">'spam'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.exists(<span class="string">'spam'</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>XML-RPC can be an extremely easy way to set up a simple remote procedure call service. All you need to do is create a server instance, register functions with it using the <strong>register_function()</strong> method, and then launch it using the <strong>serve_forever()</strong> method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xmlrpc.server <span class="keyword">import</span> SimpleXMLRPCServer</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line">serv = SimpleXMLRPCServer((<span class="string">''</span>, <span class="number">15000</span>))</span><br><span class="line">serv.register_function(add)</span><br><span class="line">serv.serve_forever()</span><br></pre></td></tr></table></figure><h2 id="Communicating-Simply-Between-Interpreters"><a href="#Communicating-Simply-Between-Interpreters" class="headerlink" title="Communicating Simply Between Interpreters"></a>Communicating Simply Between Interpreters</h2><p>You are running multiple instances of the Python interpreter, possibly on different machines, and you would like to exchange data between interpreters using messages.</p><p>It is easy to communicate between interpreters if you use the <strong>multiprocessing.connection</strong> module. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing.connection <span class="keyword">import</span> Listener</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo_client</span><span class="params">(conn)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            msg = conn.recv()</span><br><span class="line">            conn.send(msg)</span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        print(<span class="string">'Connection closed'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo_server</span><span class="params">(address, authkey)</span>:</span></span><br><span class="line">    serv = Listener(address, authkey=authkey)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            client = serv.accept()</span><br><span class="line">            echo_client(client)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            traceback.print_exc()</span><br><span class="line">echo_server((<span class="string">''</span>, <span class="number">25000</span>), authkey=<span class="string">b'peekaboo'</span>)</span><br></pre></td></tr></table></figure><p>Here is a simple example of a client connecting to the server and sending various messages:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> multiprocessing.connection <span class="keyword">import</span> Client</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Client((<span class="string">'localhost'</span>, <span class="number">25000</span>), authkey=<span class="string">b'peekaboo'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.send(<span class="string">'hello'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.recv()</span><br><span class="line"><span class="string">'hello'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.send(<span class="number">42</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.recv()</span><br><span class="line"><span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.send([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.recv()</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>Unlike a low-level socket, messages are kept intact (each object sent using <strong>send()</strong> is received in its entirety with <strong>recv()</strong>). In addition, objects are serialized using <strong>pickle</strong>. So, any object compatible with <strong>pickle</strong> can be sent or received over the connection.</p><p>If you know that the interpreters are going to be running on the same machine, you can use alternative forms of networking, such as UNIX domain sockets or Windows named pipes. To create a connection using a UNIX domain socket, simply change the address to a filename such as this:<br><code>s = Listener(&#39;/tmp/myconn&#39;, authkey=b&#39;peekaboo&#39;)</code></p><p>To create a connection using a Windows named pipe, use a filename such as this:<br><code>s = Listener(r&#39;\\.\pipe\myconn&#39;, authkey=b&#39;peekaboo&#39;)</code></p><p>As a general rule, you would not be using <strong>multiprocessing</strong> to implement public-facing services. The <strong>authkey</strong> parameter to <strong>Client()</strong> and <strong>Listener()</strong> is there to help authenticate the end points of the connection.</p><p>Don’t use <strong>multiprocessing</strong> if you need more low-level control over aspects of the connection. For example, if you needed to support timeouts, nonblocking I/O, or anything similar, you’re probably better off using a different library or implementing such features on top of sockets instead.</p><h2 id="Implementing-Remote-Procedure-Calls"><a href="#Implementing-Remote-Procedure-Calls" class="headerlink" title="Implementing Remote Procedure Calls"></a>Implementing Remote Procedure Calls</h2><p>You want to implement simple remote procedure call (RPC) on top of a message passing layer, such as sockets, multiprocessing connections, or ZeroMQ.</p><p>RPC is easy to implement by encoding function requests, arguments, and return values using <strong>pickle</strong>, and passing the pickled byte strings between interpreters. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">RPCHandler</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self._functions= &#123;&#125;</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">register_function</span><span class="params">(self, func)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self._functions[func.__name__] = func</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">handle_connection</span><span class="params">(self, connection)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="meta">... </span>                func_name, args, kwargs= pickle.loads(connection.recv())</span><br><span class="line"><span class="meta">... </span>                <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>                    r= self._functions[func_name](*arg, **kwargs)</span><br><span class="line"><span class="meta">... </span>                    connection.send(pickle.dumps(r))</span><br><span class="line"><span class="meta">... </span>                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="meta">... </span>                    connetion.send(pickle.dumps(e))</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">except</span> EOFError:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">pass</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>To use this handler, you need to add it into a messaging server. There are many possible choices, but the <strong>multiprocessing</strong> library provides a simple option. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> multiprocessing.connection <span class="keyword">import</span> Listener</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">rpc_server</span><span class="params">(handler, address, authkey)</span>:</span></span><br><span class="line"><span class="meta">... </span>    sock= Listener(address, authkey= authkey)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="meta">... </span>        client= sock.accept()</span><br><span class="line"><span class="meta">... </span>        t= Thread(target= handler.handle_connection, args=(client,))</span><br><span class="line"><span class="meta">... </span>        t.daemon= <span class="keyword">True</span></span><br><span class="line"><span class="meta">... </span>        t.start()</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x+y</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x- y</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>handler= RPCHandler()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>handler.register_function(add)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>handler.register_function(sub)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rpc_server(handler, (<span class="string">'localhost'</span>, <span class="number">17000</span>), authkey= <span class="string">b'peekaboo'</span>)</span><br></pre></td></tr></table></figure><p>To access the server from a remote client, you need to create a corresponding RPC proxy class that forwards requests. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import pickle</span><br><span class="line">&gt;&gt;&gt; class RPCProxy:</span><br><span class="line">...     def __init__(self, connection):</span><br><span class="line">...             self._connection= connection</span><br><span class="line">...     def __getattr__(self, name):</span><br><span class="line">...             def do_rpc(*args, **kwargs):</span><br><span class="line">...                     self._connection.send(pickle.dumps((name, args, kwargs)))</span><br><span class="line">...                     results= pickle.loads(self._connection.recv())</span><br><span class="line">...                     if isinstance(result, Exception):</span><br><span class="line">...                             raise result</span><br><span class="line">...                     return result</span><br><span class="line">...             return do_rpc</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; from multiprocessing.connection import Client</span><br><span class="line">&gt;&gt;&gt; c=Client((&apos;localhost&apos;, 17000), authkey= b&apos;peekaboo&apos;)</span><br><span class="line">&gt;&gt;&gt; proxy= RPCProxy(c)</span><br><span class="line">&gt;&gt;&gt; proxy.add(2,3)</span><br><span class="line">-1</span><br><span class="line">&gt;&gt;&gt; proxy.sub([1, 2], 4)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line"> File &quot;rpcserver.py&quot;, line 37, in do_rpc</span><br><span class="line"> raise result</span><br><span class="line">TypeError: unsupported operand type(s) for -: &apos;list&apos; and &apos;int&apos;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>The general idea of the <strong>RPCHandler</strong> and <strong>RPCProxy</strong> classes is relatively simple. If a client wants to call a remote function, such as <strong>foo(1, 2, z=3)</strong>, the proxy class creates a tuple <strong>(‘foo’, (1, 2), {‘z’: 3})</strong> that contains the function name and arguments. This tuple is pickled and sent over the connection. This is performed in the <strong>do_rpc()</strong> closure that’s returned by the <strong>__getattr__()</strong> method of <strong>RPCProxy</strong>. </p><h2 id="Authenticating-Clients-Simply"><a href="#Authenticating-Clients-Simply" class="headerlink" title="Authenticating Clients Simply"></a>Authenticating Clients Simply</h2><p>You want a simple way to authenticate the clients connecting to servers in a distributed system, but don’t need the complexity of something like SSL.</p><p>Simple but effective authentication can be performed by implementing a connection handshake using the <strong>hmac</strong> module.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hmac</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">client_authenticate</span><span class="params">(connection, secret_key)</span>:</span></span><br><span class="line"><span class="meta">... </span>    message= connection.recv(<span class="number">32</span>)</span><br><span class="line"><span class="meta">... </span>    hash= hmac.new(secret_key, message)</span><br><span class="line"><span class="meta">... </span>    digest= hash.digest()</span><br><span class="line"><span class="meta">... </span>    connection.send(digest)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">server_authenticate</span><span class="params">(connection, secret_key)</span>:</span></span><br><span class="line"><span class="meta">... </span>    message= os.urandom(<span class="number">32</span>)</span><br><span class="line"><span class="meta">... </span>    connection.send(message)</span><br><span class="line"><span class="meta">... </span>    hash= hmac.new(secret_key, message)</span><br><span class="line"><span class="meta">... </span>    digest= hash.digest()</span><br><span class="line"><span class="meta">... </span>    response= connection.recv(len(digest))</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> hmac.compare_digest(digest, response)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>The general idea is that upon connection, the server presents the client with a message of random bytes (returned by <strong>os.urandom()</strong>, in this case). The client and server both compute a cryptographic hash of the random data using <strong>hmac</strong> and a secret key known only to both ends. The client sends its computed digest back to the server, where it is compared and used to decide whether or not to accept or reject the connection.</p><p>Comparison of resulting digests should be performed using the <strong>hmac.compare_digest()</strong> function. This function has been written in a way that avoids timing-analysisbased attacks and should be used instead of a normal comparison operator (<strong>==</strong>).</p><p>To use these functions, you would incorporate them into existing networking or messaging code. For example, with sockets, the server code might look something like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> socket <span class="keyword">import</span> socket, AF_INET, SOCK_STREAM</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>secret_key= <span class="string">b'peekaboo'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">echo_handler</span><span class="params">(client_sock)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> <span class="keyword">not</span> server_authenticate(client_sock, secret_key):</span><br><span class="line"><span class="meta">... </span>        client_sock.close()</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="meta">... </span>        msg= client_sock.recv(<span class="number">8192</span>)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> <span class="keyword">not</span> msg:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">break</span></span><br><span class="line"><span class="meta">... </span>        client_sock.sendall(msg)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">echo_server</span><span class="params">(address)</span>:</span></span><br><span class="line"><span class="meta">... </span>    s= socket(AF_INET, SOCK_STREAM)</span><br><span class="line"><span class="meta">... </span>    s.bind(address)</span><br><span class="line"><span class="meta">... </span>    s.listen(<span class="number">5</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="meta">... </span>        c, a= s.accept()</span><br><span class="line"><span class="meta">... </span>        echo_handler(c)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>echo_server((<span class="string">''</span>, <span class="number">18000</span>))</span><br></pre></td></tr></table></figure><p>Within a client, you would do this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket, AF_INET, SOCK_STREAM</span><br><span class="line">secret_key = <span class="string">b'peekaboo'</span></span><br><span class="line">s = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">'localhost'</span>, <span class="number">18000</span>))</span><br><span class="line">client_authenticate(s, secret_key)</span><br><span class="line">s.send(<span class="string">b'Hello World'</span>)</span><br><span class="line">resp = s.recv(<span class="number">1024</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Adding-SSL-to-Network-Services"><a href="#Adding-SSL-to-Network-Services" class="headerlink" title="Adding SSL to Network Services"></a>Adding SSL to Network Services</h2><p>The <strong>ssl</strong> module provides support for adding SSL to low-level socket connections. In particular, the <strong>ssl.wrap_socket()</strong> function takes an existing socket and wraps an SSL layer around it. </p><p>A simple echo server that presents a server certificate to connecting clients:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket, AF_INET, SOCK_STREAM</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line">KEYFILE= <span class="string">'server_key.pem'</span></span><br><span class="line">CERTFILE= <span class="string">'server_cert.pem'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo_client</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data= s.recv(<span class="number">8192</span>)</span><br><span class="line">        <span class="keyword">if</span> data== <span class="string">b''</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        s.send(data)</span><br><span class="line">    s.close()</span><br><span class="line">    print(<span class="string">'Connection closed'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">echo_server</span><span class="params">(address)</span>:</span></span><br><span class="line">    s= socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    s.bind(address)</span><br><span class="line">    s.listen(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    s_ssl= ssl.wrap_socket(s, keyfile= KEYFILE, certfile= CERTFILE, server_side= <span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            c, a= s_ssl.accept()</span><br><span class="line">            print(<span class="string">'Got connection'</span>, c, a)</span><br><span class="line">            echo_client(c)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'&#123;&#125;: &#123;&#125;'</span>.format(e.__class__.__name__, e))</span><br><span class="line"></span><br><span class="line">echo_server((<span class="string">''</span>, <span class="number">20000</span>))</span><br></pre></td></tr></table></figure><p>Here’s an interactive session that shows how to connect to the server as a client. The client requires the server to present its certificate and verifies it:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from socket import socket, AF_INET, SOCK_STREAM</span><br><span class="line">&gt;&gt;&gt; import ssl</span><br><span class="line">&gt;&gt;&gt; s = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">&gt;&gt;&gt; s_ssl = ssl.wrap_socket(s,</span><br><span class="line">... cert_reqs=ssl.CERT_REQUIRED,</span><br><span class="line">... ca_certs = &apos;server_cert.pem&apos;)</span><br><span class="line">&gt;&gt;&gt; s_ssl.connect((&apos;localhost&apos;, 20000))</span><br><span class="line">&gt;&gt;&gt; s_ssl.send(b&apos;Hello World?&apos;)</span><br><span class="line">12</span><br><span class="line">&gt;&gt;&gt; s_ssl.recv(8192)</span><br><span class="line">b&apos;Hello World?&apos;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>The problem with all of this low-level socket hacking is that it doesn’t play well with existing network services already implemented in the standard library. For example, most server code (HTTP, XML-RPC, etc.) is actually based on the <strong>socketserver</strong> library. Client code is also implemented at a higher level. It is possible to add SSL to existing services, but a slightly different approach is needed.</p><p>First, for servers, SSL can be added through the use of a mixin class like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SSLMixin</span>:</span></span><br><span class="line">    <span class="string">'''Mixin class that adds support for SSL to existing servers based</span></span><br><span class="line"><span class="string"> on the socketserver module.'''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, keyfile= None, certfile= None, ca_certs= None, cert_reqs= ssl.CERT_NONE, **kwargs)</span>:</span></span><br><span class="line">        self._keyfile= keyfile</span><br><span class="line">        self._certfile= certfile</span><br><span class="line">        self._ca_certs= ca_certs</span><br><span class="line">        self._cert_reqs= cert_reqs</span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_request</span><span class="params">(self)</span>:</span></span><br><span class="line">        client, addr= super().get_request()</span><br><span class="line">        client_ssl= ssl.wrap_socket(client, keyfile= self._keyfile,</span><br><span class="line">                                            certfile=self._certfile,</span><br><span class="line">                                            ca_certs= self._ca_certs,</span><br><span class="line">                                            cert_reqs= self._cert_reqs,</span><br><span class="line">                                            server_side= <span class="keyword">True</span>    )</span><br><span class="line">        <span class="keyword">return</span> client_ssl, addr</span><br></pre></td></tr></table></figure><p>To use this mixin class, you can mix it with other server classes. For example, here’s an example of defining an XML-RPC server that operates over SSL:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> xmlrpc.server <span class="keyword">import</span> SimpleXMLRPCServer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SSLSimpleXMLRPCServer</span><span class="params">(SSLMixin, SimpleXMLRPCServer)</span>:</span> <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><p>Here’s the XML-RPC server modified only slightly to use SSL:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyValueServer</span>:</span></span><br><span class="line">    _rpc_methods= [<span class="string">'get'</span>, <span class="string">'set'</span>, <span class="string">'delete'</span>, <span class="string">'exists'</span>, <span class="string">'keys'</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        self._data= &#123;&#125;</span><br><span class="line">        self._serv= SSLSimpleXMLRPCServer(*args, allow_none= <span class="keyword">True</span>, **kwargs)</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> self._rpc_methods:</span><br><span class="line">            self._serv.register_function(getattr(self, name))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, name)</span>:</span> self._data[name]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">(self, name, value)</span>:</span> self._data[name]= value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, name)</span>:</span> <span class="keyword">del</span> self._data[name]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exists</span><span class="params">(self, name)</span>:</span> <span class="keyword">return</span> name <span class="keyword">in</span> self._data</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">keys</span><span class="params">(self)</span>:</span> <span class="keyword">return</span> list(self._data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serve_forever</span><span class="params">(self)</span>:</span> self._serv.serve_forever()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__== <span class="string">'__main__'</span>:</span><br><span class="line">    KEYFILE= <span class="string">'server_key.pem'</span></span><br><span class="line">    CERTFILE= <span class="string">'server_cert.pem'</span></span><br><span class="line">    kvserv= KeyValueServer((<span class="string">''</span>, <span class="number">15000</span>), keyfile= KEYFILE, certfile= CERTFILE)</span><br><span class="line">    kvserv.serve_forever()</span><br></pre></td></tr></table></figure><p>To use this server, you can connect using the normal xmlrpc.client module. Just specify a https: in the URL. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> xmlrpc.client <span class="keyword">import</span> ServerProxy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = ServerProxy(<span class="string">'https://localhost:15000'</span>, allow_none=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.set(<span class="string">'foo'</span>,<span class="string">'bar'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.set(<span class="string">'spam'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.keys()</span><br><span class="line">[<span class="string">'spam'</span>, <span class="string">'foo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.get(<span class="string">'foo'</span>)</span><br><span class="line"><span class="string">'bar'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.get(<span class="string">'spam'</span>)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.delete(<span class="string">'spam'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.exists(<span class="string">'spam'</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Creating-a-TCP-Server&quot;&gt;&lt;a href=&quot;#Creating-a-TCP-Server&quot; class=&quot;headerlink&quot; title=&quot;Creating a TCP Server&quot;&gt;&lt;/a&gt;Creating a TCP Server&lt;/h2&gt;&lt;p&gt;You want to implement a server that communicates with clients using the TCP Internet protocol. An easy way to create a TCP server is to use the &lt;strong&gt;socketserver&lt;/strong&gt; library.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; socketserver &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; BaseRequestHandler, TCPServer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;EchoHandler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BaseRequestHandler)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&#39;Got connection from&#39;&lt;/span&gt;, self.client_address)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            msg = self.request.recv(&lt;span class=&quot;number&quot;&gt;8192&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; msg:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.request.send(msg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    serv = TCPServer((&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20000&lt;/span&gt;), EchoHandler)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    serv.serve_forever()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C09_Metaprogramming</title>
    <link href="blog.whistlestop.ml/2018/12/15/C09-Metaprogramming/"/>
    <id>blog.whistlestop.ml/2018/12/15/C09-Metaprogramming/</id>
    <published>2018-12-15T10:46:45.000Z</published>
    <updated>2018-12-15T11:12:08.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Putting-a-Wrapper-Around-a-Function"><a href="#Putting-a-Wrapper-Around-a-Function" class="headerlink" title="Putting a Wrapper Around a Function"></a>Putting a Wrapper Around a Function</h2><p>If you ever need to wrap a function with extra code, define a decorator function. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> time</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">timethis</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">... </span>    @wraps(func)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>        start= time.time()</span><br><span class="line"><span class="meta">... </span>        result= func(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>        end= time.time()</span><br><span class="line"><span class="meta">... </span>        print(func.__name__, end- start)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> result</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> wrapper</span><br><span class="line">...</span><br></pre></td></tr></table></figure><a id="more"></a> <p>Here is an example of using the decorator:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>@timethis</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>        n-= <span class="number">1</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>countdown(<span class="number">100000</span>)</span><br><span class="line">countdown <span class="number">0.012996196746826172</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>countdown(<span class="number">10000000</span>)</span><br><span class="line">countdown <span class="number">0.8619716167449951</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>The return value of a decorator is almost always the result of calling <strong>func(*args, **kwargs)</strong>, where <strong>func</strong> is the original unwrapped function.</p><p>The use of the decorator <strong>@wraps(func)</strong> in the solution is an easy to forget but important technicality related to preserving function metadata.</p><h2 id="Preserving-Function-Metadata-When-Writing-Decorators"><a href="#Preserving-Function-Metadata-When-Writing-Decorators" class="headerlink" title="Preserving Function Metadata When Writing Decorators"></a>Preserving Function Metadata When Writing Decorators</h2><p>Whenever you define a decorator, you should always remember to apply the <strong>@wraps</strong> decorator from the <strong>functools</strong> library to the underlying wrapper function.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>@timethis</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n:int)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">'''</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    Counts down</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    '''</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>        n -= <span class="number">1</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>countdown(<span class="number">100000</span>)</span><br><span class="line">countdown <span class="number">0.008917808532714844</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>countdown.__name__</span><br><span class="line"><span class="string">'countdown'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>countdown.__doc__</span><br><span class="line"><span class="string">'\n\tCounts down\n\t'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>countdown.__annotations__</span><br><span class="line">&#123;<span class="string">'n'</span>: &lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;&#125;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>Copying decorator metadata is an important part of writing decorators. If you forget to use <strong>@wraps</strong>, you’ll find that the decorated function loses all sorts of useful information. For instance, if omitted, the metadata in the last example would look like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>countdown.__name__</span><br><span class="line"><span class="string">'wrapper'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>countdown.__doc__</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>countdown.__annotations__</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>An important feature of the <strong>@wraps</strong> decorator is that it makes the wrapped function available to you in the <strong>__wrapped__</strong> attribute.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>countdown.__wrapped__(<span class="number">100000</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>The presence of the <strong>__wrapped__</strong> attribute also makes decorated functions properly expose the underlying signature of the wrapped function. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> inspect <span class="keyword">import</span> signature</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(signature(countdown))</span><br><span class="line">(n:int)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Unwrapping-a-Decorator"><a href="#Unwrapping-a-Decorator" class="headerlink" title="Unwrapping a Decorator"></a>Unwrapping a Decorator</h2><p>Assuming that the decorator has been implemented properly using <strong>@wraps</strong>, you can usually gain access to the original function by accessing the <strong>__wrapped__</strong> attribute. </p><p>If multiple decorators have been applied to a function, the behavior of accessing <strong>__wrapped__</strong> is currently undefined and should probably be avoided.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">decorator1</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">... </span>    @wraps(func)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Decorator 1'</span>)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">decorator2</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">... </span>    @wraps(func)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Decorator 2'</span>)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@decorator1</span><br><span class="line"><span class="meta">... </span>@decorator2</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span> <span class="keyword">return</span> x+ y</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">Decorator <span class="number">1</span></span><br><span class="line">Decorator <span class="number">2</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add.__wrapped__(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">Decorator <span class="number">2</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add.__wrapped__.__wrapped__(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>Be aware that not all decorators utilize <strong>@wraps</strong>, and thus, they may not work as described. In particular, the built-in decorators <strong>@staticmethod</strong> and <strong>@classmethod</strong> create descriptor objects that don’t follow this convention (instead, they store the original function in a <strong>__func__</strong> attribute).</p><h2 id="Defining-a-Decorator-That-Takes-Arguments"><a href="#Defining-a-Decorator-That-Takes-Arguments" class="headerlink" title="Defining a Decorator That Takes Arguments"></a>Defining a Decorator That Takes Arguments</h2><p>Suppose you want to write a decorator that adds logging to a function, but allows the user to specify the logging level and other details as arguments. Here is how you might define the decorator:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> logging</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">logged</span><span class="params">(level, name= None, message= None)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">'''</span></span><br><span class="line"><span class="string"><span class="meta">... </span>Add logging to a function. level is the logging</span></span><br><span class="line"><span class="string"><span class="meta">... </span> level, name is the logger name, and message is the</span></span><br><span class="line"><span class="string"><span class="meta">... </span> log message. If name and message aren't specified,</span></span><br><span class="line"><span class="string"><span class="meta">... </span> they default to the function's module and name.</span></span><br><span class="line"><span class="string"><span class="meta">... </span> '''</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">... </span>        logname= name <span class="keyword">if</span> name <span class="keyword">else</span> func.__module__</span><br><span class="line"><span class="meta">... </span>        log= logging.getLogger(logname)</span><br><span class="line"><span class="meta">... </span>        logmsg= message <span class="keyword">if</span> message <span class="keyword">else</span> func.__name__</span><br><span class="line"><span class="meta">... </span>        </span><br><span class="line"><span class="meta">... </span>        @wraps(func)</span><br><span class="line"><span class="meta">... </span>        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>            log.log(level, logmsg)</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> decorate</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>The outermost function <strong>logged()</strong> accepts the desired arguments and simply makes them available to the inner functions of the decorator. The inner function <strong>decorate()</strong> accepts a function and puts a wrapper around it as normal. The key part is that the wrapper is allowed to use the arguments passed to <strong>logged()</strong>.</p><h2 id="Defining-a-Decorator-with-User-Adjustable-Attributes"><a href="#Defining-a-Decorator-with-User-Adjustable-Attributes" class="headerlink" title="Defining a Decorator with User Adjustable Attributes"></a>Defining a Decorator with User Adjustable Attributes</h2><p>You want to write a decorator function that wraps a function, but has user adjustable attributes that can be used to control the behavior of the decorator at runtime.</p><p>Here is a solution that expands on the last recipe by introducing accessor functions that change internal variables through the use of <strong>nonlocal</strong> variable declarations. The accessor functions are then attached to the wrapper function as function attributes.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">attach_wrapper</span><span class="params">(obj, func= None)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> func <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> partial(attach_wrapper, obj)</span><br><span class="line"><span class="meta">... </span>    setattr(obj, func.__name__, func)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> func</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">logged</span><span class="params">(level, name= None, message= None)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">... </span>        logname= name <span class="keyword">if</span> name <span class="keyword">else</span> func.__name__</span><br><span class="line"><span class="meta">... </span>        log= logging.getLogger(logname)</span><br><span class="line"><span class="meta">... </span>        logmsg= message <span class="keyword">if</span> message <span class="keyword">else</span> func.__name__</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>        @wraps(func)</span><br><span class="line"><span class="meta">... </span>        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>            log.log(level, logmsg)</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>        @attach_wrapper(wrapper)</span><br><span class="line"><span class="meta">... </span>        <span class="function"><span class="keyword">def</span> <span class="title">set_level</span><span class="params">(newlevel)</span>:</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">nonlocal</span> level</span><br><span class="line"><span class="meta">... </span>            level= newlevel</span><br><span class="line"><span class="meta">... </span>        @attach_wrapper(wrapper)</span><br><span class="line"><span class="meta">... </span>        <span class="function"><span class="keyword">def</span> <span class="title">set_message</span><span class="params">(newmsg)</span>:</span></span><br><span class="line"><span class="meta">... </span>            <span class="keyword">nonlocal</span> logmsg</span><br><span class="line"><span class="meta">... </span>            logmsg= newmsg</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> decorate</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Here is an interactive session that shows the various attributes being changed after definition:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>@logged(logging.DEBUG)</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x+y</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>logging.basicConfig(level= logging.DEBUG)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">DEBUG:add:add</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add.set_message(<span class="string">'Add called'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">DEBUG:add:Add called</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add.set_level(logging.WARNING)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">WARNING:add:Add called</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>The key to this recipe lies in the accessor functions [e.g., <strong>set_message()</strong> and <strong>set_level()</strong>] that get attached to the wrapper as attributes. Each of these accessors allows internal parameters to be adjusted through the use of <strong>nonlocal</strong> assignments.</p><p>An amazing feature of this recipe is that the accessor functions will propagate through multiple levels of decoration (if all of your decorators utilize <a href="mailto:**@functools.wraps" target="_blank" rel="noopener">**@functools.wraps</a>**).<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt; <span class="function"><span class="keyword">def</span> <span class="title">timethis</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">... </span>    @wraps(func)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>        start= time.time()</span><br><span class="line"><span class="meta">... </span>        result= func(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>        end= time.time()</span><br><span class="line"><span class="meta">... </span>        print(func.__name__, end- start)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> result</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@timethis</span><br><span class="line"><span class="meta">... </span>@logged(logging.DEBUG)</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>        n-= <span class="number">1</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>countdown(<span class="number">10000</span>)</span><br><span class="line">DEBUG:countdown:countdown</span><br><span class="line">countdown <span class="number">0.0149993896484375</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>countdown.set_level(logging.WARNING)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>countdown.set_message(<span class="string">'Counting down to 0'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>countdown(<span class="number">10000</span>)</span><br><span class="line">WARNING:countdown:Counting down to <span class="number">0</span></span><br><span class="line">countdown <span class="number">0.0010001659393310547</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>You’ll also find that it all still works exactly the same way if the decorators are composed in the opposite order, like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logged(logging.DEBUG)</span></span><br><span class="line"><span class="meta">@timethis</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n)</span>:</span></span><br><span class="line"> <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line"> n -= <span class="number">1</span></span><br></pre></td></tr></table></figure><p>One extremely subtle facet of this recipe is the choice to use accessor functions in the first place. For example, you might consider an alternative formulation solely based on direct access to function attributes like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@wraps(func)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    wrapper.log.log(wrapper.level, wrapper.logmsg)</span><br><span class="line">    <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"><span class="comment"># Attach adjustable attributes</span></span><br><span class="line">wrapper.level = level</span><br><span class="line">wrapper.logmsg = logmsg</span><br><span class="line">wrapper.log = log</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>This approach would work to a point, but only if it was the topmost decorator. If you had another decorator applied on top (such as the <strong>@timethis</strong> example), it would shadow the underlying attributes and make them unavailable for modification. The use of accessor functions avoids this limitation.</p><h2 id="Defining-a-Decorator-That-Takes-an-Optional-Argument"><a href="#Defining-a-Decorator-That-Takes-an-Optional-Argument" class="headerlink" title="Defining a Decorator That Takes an Optional Argument"></a>Defining a Decorator That Takes an Optional Argument</h2><p>You would like to write a single decorator that can be used without arguments, such as <strong>@decorator</strong>, or with optional arguments, such as <strong>@decorator(x,y,z)</strong>.</p><p>Here is a variant of the logging code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">logged</span><span class="params">(func= None, *, level= logging.DEBUG, name= None, message= None)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> func <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> partial(logged, level= level, name= name, message= message)</span><br><span class="line"><span class="meta">... </span>    logname= name <span class="keyword">if</span> name <span class="keyword">else</span> func.__module__</span><br><span class="line"><span class="meta">... </span>    log= logging.getLogger(logname)</span><br><span class="line"><span class="meta">... </span>    logmsg= message <span class="keyword">if</span> message <span class="keyword">else</span> func.__name__</span><br><span class="line"><span class="meta">... </span>    @wraps(func)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>        log.log(level, logmsg)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="comment"># Example use</span></span><br><span class="line"><span class="meta">@logged</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"><span class="meta">@logged(level=logging.CRITICAL, name='example')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Spam!'</span>)</span><br></pre></td></tr></table></figure><p>As you can see from the example, the decorator can be used in both a simple form (i.e.,<strong>@logged</strong>) or with optional arguments supplied.</p><p>For a decorator taking arguments such as this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logged(level=logging.CRITICAL, name='example')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Spam!'</span>)</span><br></pre></td></tr></table></figure><p>The calling sequence is as follows:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Spam!'</span>)</span><br><span class="line">spam = logged(level=logging.CRITICAL, name=<span class="string">'example'</span>)(spam)</span><br></pre></td></tr></table></figure></p><p>On the initial invocation of <strong>logged()</strong>, the function to be wrapped is not passed. Thus, in the decorator, it has to be optional. This, in turn, forces the other arguments to be specified by keyword. Furthermore, when arguments are passed, a decorator is supposed to return a function that accepts the function and wraps it. To do this, the solution uses a clever trick involving <strong>functools.partial</strong>. Specifically, it simply returns a partially applied version of itself where all arguments are fixed except for the function to be wrapped. </p><h2 id="Enforcing-Type-Checking-on-a-Function-Using-a-Decorator"><a href="#Enforcing-Type-Checking-on-a-Function-Using-a-Decorator" class="headerlink" title="Enforcing Type Checking on a Function Using a Decorator"></a>Enforcing Type Checking on a Function Using a Decorator</h2><p>You want to optionally enforce type checking of function arguments as a kind of assertion or contract.</p><p>Here is an implementation of the <strong>@typeassert</strong> decorator:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> inspect <span class="keyword">import</span> signature</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">typeassert</span><span class="params">(*ty_args, **ty_kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> <span class="keyword">not</span> __debug__:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> func</span><br><span class="line"><span class="meta">... </span>        sig= signature(func)</span><br><span class="line"><span class="meta">... </span>        bound_types=sig.bind_partial(*ty_args, **ty_kwargs).arguments</span><br><span class="line"><span class="meta">... </span>        </span><br><span class="line"><span class="meta">... </span>        @wraps(func)</span><br><span class="line"><span class="meta">... </span>        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>            bound_values= sig.bind(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">for</span> name, value <span class="keyword">in</span> bound_values.arguments.items():</span><br><span class="line"><span class="meta">... </span>                <span class="keyword">if</span> name <span class="keyword">in</span> bound_types:</span><br><span class="line"><span class="meta">... </span>                    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, bound_types[name]):</span><br><span class="line"><span class="meta">... </span>                        <span class="keyword">raise</span> TypeError(<span class="string">'Argument &#123;&#125; must be &#123;&#125;'</span>.format(name, bound_types[name]))</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> decorate</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>You will find that this decorator is rather flexible, allowing types to be specified for all or a subset of a function’s arguments. Moreover, types can be specified by position or by keyword.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>@typeassert(int, z=int)</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(x, y, z=<span class="number">42</span>)</span>:</span></span><br><span class="line"><span class="meta">... </span>print(x, y, z)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam(<span class="number">1</span>, <span class="string">'hello'</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">1</span> hello <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam(<span class="number">1</span>, <span class="string">'hello'</span>, <span class="string">'world'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"> File <span class="string">"contract.py"</span>, line <span class="number">33</span>, <span class="keyword">in</span> wrapper</span><br><span class="line">TypeError: Argument z must be &lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>In the solution, the following code fragment returns the function unmodified if the value of the global <strong>__debug__</strong> variable is set to <strong>False</strong>.</p><p><strong>inspect.signature()</strong> function, it allows you to extract signature information from a callable.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(x,y,z=<span class="number">42</span>)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sig= signature(spam)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sig)</span><br><span class="line">(x, y, z=<span class="number">42</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sig.parameters</span><br><span class="line">mappingproxy(OrderedDict([(<span class="string">'x'</span>, &lt;Parameter <span class="string">"x"</span>&gt;), (<span class="string">'y'</span>, &lt;Parameter <span class="string">"y"</span>&gt;), (<span class="string">'z'</span>, &lt;Parameter <span class="string">"z=42"</span>&gt;)]))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sig.parameters[<span class="string">'x'</span>].name</span><br><span class="line"><span class="string">'x'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sig.parameters[<span class="string">'x'</span>].default</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">inspect</span>.<span class="title">_empty</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">sig</span>.<span class="title">parameters</span>['<span class="title">z</span>'].<span class="title">default</span></span></span><br><span class="line"><span class="class">42</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">sig</span>.<span class="title">parameters</span>['<span class="title">x</span>'].<span class="title">kind</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">_ParameterKind</span>.<span class="title">POSITIONAL_OR_KEYWORD</span>:</span> <span class="number">1</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sig.parameters[<span class="string">'z'</span>].kind</span><br><span class="line">&lt;_ParameterKind.POSITIONAL_OR_KEYWORD: <span class="number">1</span>&gt;</span><br></pre></td></tr></table></figure><p>We use the <strong>bind_partial()</strong> method of signatures to perform a partial binding of the supplied types to argument names.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; bound_types= sig.bind_partial(int, z= int)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bound_types</span><br><span class="line">&lt;BoundArguments (x=&lt;class 'int'&gt;, z=&lt;class 'int'&gt;)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bound_types.arguments</span><br><span class="line">OrderedDict([('x', &lt;class 'int'&gt;), ('z', &lt;class 'int'&gt;)])</span><br></pre></td></tr></table></figure><p>The most important part of the binding is the creation of the ordered dictionary <strong>bound_types.arguments</strong>. This dictionary maps the argument names to the supplied values in the same order as the function signature.</p><p>In the actual wrapper function made by the decorator, the <strong>sig.bind()</strong> method is used. <strong>bind()</strong> is like <strong>bind_partial()</strong> except that it does not allow for missing arguments.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bound_values= sig.bind(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bound_values.arguments</span><br><span class="line">OrderedDict([(<span class="string">'x'</span>, <span class="number">1</span>), (<span class="string">'y'</span>, <span class="number">2</span>), (<span class="string">'z'</span>, <span class="number">3</span>)])</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Defining-Decorators-As-Classes"><a href="#Defining-Decorators-As-Classes" class="headerlink" title="Defining Decorators As Classes"></a>Defining Decorators As Classes</h2><p>To define a decorator as an instance, you need to make sure it implements the <strong>__call__()</strong> and <strong>__get__()</strong> methods. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Profiles</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line"><span class="meta">... </span>        wraps(func)(self)</span><br><span class="line"><span class="meta">... </span>        self.ncalls= <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.ncalls += <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self.__wrapped__(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, cls)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> self</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> types.MethodType(self, instance)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>To use this class, you use it like a normal decorator, either inside or outside of a class:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>@Profiles</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x +y</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Spam</span>:</span></span><br><span class="line"><span class="meta">... </span>    @Profiles</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self, x)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(self, x)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add.ncalls</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=Spam()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.bar(<span class="number">1</span>)</span><br><span class="line">&lt;__main__.Spam object at <span class="number">0x03D8BEF0</span>&gt; <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.bar(<span class="number">2</span>)</span><br><span class="line">&lt;__main__.Spam object at <span class="number">0x03D8BEF0</span>&gt; <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.bar.ncalls</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Spam.bar.ncalls</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>First, the use of the <strong>functools.wraps()</strong> function serves the same purpose here as it does in normal decorators—namely to copy important metadata from the wrapped function to the callable instance.</p><p>Second, it is common to overlook the <strong>__get__()</strong> method shown in the solution. If you omit the <strong>__get__()</strong> and keep all of the other code the same, you’ll find that bizarre things happen when you try to invoke decorated instance methods.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Spam()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.bar(<span class="number">3</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">TypeError: spam() missing <span class="number">1</span> required positional argument: <span class="string">'x'</span></span><br></pre></td></tr></table></figure><p>The reason it breaks is that whenever functions implementing methods are looked up in a class, their <strong>__get__()</strong> method is invoked as part of the descriptor protocol.  In this case, the purpose of <strong>__get__()</strong> is to create a bound method object (which ultimately supplies the self argument to the method). Here is an example that illustrates the underlying mechanics:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Spam()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">grok</span><span class="params">(self, x)</span>:</span></span><br><span class="line"><span class="meta">... </span><span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>grok.__get__(s, Spam)</span><br><span class="line">&lt;bound method Spam.grok of &lt;__main__.Spam object at <span class="number">0x100671e90</span>&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>In this recipe, the <strong>__get__()</strong> method is there to make sure bound method objects get created properly. <strong>__get__()</strong>creates a bound method manually for use here. Bound methods only get created if an instance is being used. If the method is accessed on a class, the instance argument to <strong>__get__()</strong> is set to None and the Profiled instance itself is just returned.</p><p>If you want to avoid some of this of this mess, you might consider an alternative formulation of the decorator using closures and <strong>nonlocal</strong> variables.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">profiles</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">... </span>    ncalls= <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    @wraps(func)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">nonlocal</span> ncalls</span><br><span class="line"><span class="meta">... </span>        ncalls+= <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>    wrapper.ncalls= <span class="keyword">lambda</span>: ncalls</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@profiles</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x + y</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>This example almost works in exactly the same way except that access to <strong>ncalls</strong> is now provided through a function attached as a function attribute. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add.ncalls()</span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Applying-Decorators-to-Class-and-Static-Methods"><a href="#Applying-Decorators-to-Class-and-Static-Methods" class="headerlink" title="Applying Decorators to Class and Static Methods"></a>Applying Decorators to Class and Static Methods</h2><p>Applying decorators to class and static methods is straightforward, but make sure that your decorators are applied before <strong>@classmethod</strong> or <strong>@staticmethod</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">timethis</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">... </span>    @wraps(func)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>        start= time.time()</span><br><span class="line"><span class="meta">... </span>        r= func(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>        end= time.time()</span><br><span class="line"><span class="meta">... </span>        print(end- start)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> r</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> wrapper</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>If you get the order of decorators wrong, you’ll get an error. For example, if you use the following:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spam</span>:</span></span><br><span class="line">    ...</span><br><span class="line"><span class="meta">    @timethis</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">static_method</span><span class="params">(n)</span>:</span></span><br><span class="line">        print(n)</span><br><span class="line">        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            n -= <span class="number">1</span></span><br></pre></td></tr></table></figure><p>Then the static method will crash:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Spam.static_method(<span class="number">1000000</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"> File <span class="string">"timethis.py"</span>, line <span class="number">6</span>, <span class="keyword">in</span> wrapper</span><br><span class="line"> start = time.time()</span><br><span class="line">TypeError: <span class="string">'staticmethod'</span> object <span class="keyword">is</span> <span class="keyword">not</span> callable</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>One situation where this recipe is of critical importance is in defining class and static methods in abstract base classes, if you want to define an abstract class method, you can use this code:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(metaclass=ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><h2 id="Writing-Decorators-That-Add-Arguments-to-Wrapped-Functions"><a href="#Writing-Decorators-That-Add-Arguments-to-Wrapped-Functions" class="headerlink" title="Writing Decorators That Add Arguments to Wrapped Functions"></a>Writing Decorators That Add Arguments to Wrapped Functions</h2><p>Extra arguments can be injected into the calling signature using keyword-only arguments:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">optional_debug</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">... </span>    @wraps(func)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, debug= False, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> debug:</span><br><span class="line"><span class="meta">... </span>            print(<span class="string">'Calling'</span>, func.__name__)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@optional_debug</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(a, b, c)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>, debug= <span class="keyword">True</span>)</span><br><span class="line">Calling spam</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>One tricky part here concerns a potential name clash between the added argument and the arguments of the function being wrapped. For example, if the <strong>@optional_debug</strong> decorator was applied to a function that already had a debug argument, then it would break. If that’s a concern, an extra check could be added:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">optional_debug</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> <span class="string">'debug'</span> <span class="keyword">in</span> inspect.getargspec(func).args:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">raise</span> TypeError(<span class="string">'debug argument already defined'</span>)</span><br><span class="line"><span class="meta">... </span>    @wraps(func)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, debug= False, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> debug:</span><br><span class="line"><span class="meta">... </span>            print(<span class="string">'Calling'</span>, func.__name__)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> wrapper</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>A final refinement to this recipe concerns the proper management of function signatures. An astute programmer will realize that the signature of wrapped functions is wrong. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>@optional_debug</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></span><br><span class="line"><span class="meta">... </span><span class="keyword">return</span> x+y</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> inspect</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(inspect.signature(add))</span><br><span class="line">(x, y)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>This can be fixed by making the following modification:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">optional_debug</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> <span class="string">'debug'</span> <span class="keyword">in</span> inspect.getargspec(func).args:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">raise</span> TypeError(<span class="string">'debug argument already defined'</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>    @wraps(func)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, debug= False, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> debug:</span><br><span class="line"><span class="meta">... </span>            print(<span class="string">'Calling'</span>, func.__name__)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>    sig= inspect.signature(func)</span><br><span class="line"><span class="meta">... </span>    params= list(sig.parameters.values())</span><br><span class="line"><span class="meta">... </span>    params.append(inspect.Parameter(<span class="string">'debug'</span>, inspect.Parameter.KEYWORD_ONLY, default= <span class="keyword">False</span>))</span><br><span class="line"><span class="meta">... </span>    wrapper.__signature__= sig.replace(parameters= params)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>With this change, the signature of the wrapper will now correctly reflect the presence of the debug argument. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>@optional_debug</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></span><br><span class="line"><span class="meta">... </span><span class="keyword">return</span> x+y</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(inspect.signature(add))</span><br><span class="line">(x, y, *, debug=<span class="keyword">False</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Using-Decorators-to-Patch-Class-Definitions"><a href="#Using-Decorators-to-Patch-Class-Definitions" class="headerlink" title="Using Decorators to Patch Class Definitions"></a>Using Decorators to Patch Class Definitions</h2><p>You want to inspect or rewrite portions of a class definition to alter its behavior, but without using<br>inheritance or metaclasses.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">log_getattribute</span><span class="params">(cls)</span>:</span></span><br><span class="line"><span class="meta">... </span>    orig_attribute= cls.__getattribute__</span><br><span class="line"><span class="meta">... </span>    </span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">new_getattribute</span><span class="params">(self, name)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'getting:'</span>, name)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> orig_attribute(self, name)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>    cls.__getattribute__= new_getattribute</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> cls</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@log_getattribute</span><br><span class="line"><span class="meta">... </span><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.x= x</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=A(<span class="number">44</span>)</span><br><span class="line">getting: __dict__</span><br><span class="line">getting: __class__</span><br><span class="line">getting: __dict__</span><br><span class="line">getting: __dict__</span><br><span class="line">getting: __dict__</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.x</span><br><span class="line">getting: x</span><br><span class="line"><span class="number">44</span></span><br><span class="line">getting: __dict__</span><br><span class="line">getting: __class__</span><br><span class="line">getting: __dict__</span><br><span class="line">getting: __dict__</span><br><span class="line">getting: __dict__</span><br><span class="line">getting: spam</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.spam()</span><br><span class="line">getting: spam</span><br></pre></td></tr></table></figure><p>An alternative implementation of the solution might involve inheritance, as in the following:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">LoggedGetattribute</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, name)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'getting:'</span>, name)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> super().__getattribute__(name)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(LoggedGetattribute)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.x= x</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=A(<span class="number">4</span>)</span><br><span class="line">getting: __dict__</span><br><span class="line">getting: __class__</span><br><span class="line">getting: __dict__</span><br><span class="line">getting: __dict__</span><br><span class="line">getting: __dict__</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.x</span><br><span class="line">getting: x</span><br><span class="line"><span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Using-a-Metaclass-to-Control-Instance-Creation"><a href="#Using-a-Metaclass-to-Control-Instance-Creation" class="headerlink" title="Using a Metaclass to Control Instance Creation"></a>Using a Metaclass to Control Instance Creation</h2><p>You want to change the way in which instances are created in order to implement singletons, caching, or other similar features.</p><p>As Python programmers know, if you define a class, you call it like a function to create instances. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spam</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">    self.name = name</span><br><span class="line">a = Spam(<span class="string">'Guido'</span>)</span><br><span class="line">b = Spam(<span class="string">'Diana'</span>)</span><br></pre></td></tr></table></figure><p>If you want to customize this step, you can do it by defining a metaclass and reimplementing its <strong>__call__()</strong> method in some way. </p><p>Now, suppose you want to implement the singleton pattern:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(type)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.__instance= <span class="keyword">None</span></span><br><span class="line"><span class="meta">... </span>        super().__init__(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> self.__instance <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line"><span class="meta">... </span>            self.__instance= super().__call__(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> self.__instance</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> self.__instance</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Spam</span><span class="params">(metaclass= Singleton)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Creating Spam'</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>In this case, only one instance ever gets created. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=Spam()</span><br><span class="line">Creating Spam</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=Spam()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=Spam()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> c</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>Suppose you want to create cached instances:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> weakref</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Cached</span><span class="params">(type)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>        super().__init__(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>        self.__cache= weakref.WeakValueDictionary()</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> args <span class="keyword">in</span> self.__cache:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> self.__cache[args]</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>            obj= super().__call__(*args)</span><br><span class="line"><span class="meta">... </span>            self.__cache[args]= obj</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> obj</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Spam</span><span class="params">(metaclass= Cached)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Creating Spam(&#123;!r&#125;)'</span>.format(name))</span><br><span class="line"><span class="meta">... </span>        self.name= name</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=Spam(<span class="string">'Guido'</span>)</span><br><span class="line">Creating Spam(<span class="string">'Guido'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=Spam(<span class="string">'Guido'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=Spam(<span class="string">'Diana'</span>)</span><br><span class="line">Creating Spam(<span class="string">'Diana'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.cc=<span class="string">'de'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.cc</span><br><span class="line"><span class="string">'de'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Capturing-Class-Attribute-Definition-Order"><a href="#Capturing-Class-Attribute-Definition-Order" class="headerlink" title="Capturing Class Attribute Definition Order"></a>Capturing Class Attribute Definition Order</h2><p>You want to automatically record the order in which attributes and methods are defined inside a class body so that you can use it in various operations (e.g., serializing, mapping to databases, etc.).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Typed</span>:</span></span><br><span class="line"><span class="meta">... </span>    _expected_type= type(<span class="keyword">None</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name= None)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self._name= name</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, self._expected_type):</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">raise</span> TypeError(<span class="string">'Expected '</span>+ str(self._expected_type))</span><br><span class="line"><span class="meta">... </span>        instance.__dict__[self._name]= value</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Integer</span><span class="params">(Typed)</span>:</span> _expected_type = int</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Float</span><span class="params">(Typed)</span>:</span> _expected_type = float</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">String</span><span class="params">(Typed)</span>:</span> _expected_type = str</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">OrderedMeta</span><span class="params">(type)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, clsname, bases, clsdict)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'cls:&#123;&#125;\nclsname: &#123;&#125;\nbases: &#123;&#125;\nclsdict: &#123;&#125;'</span>.format(cls, clsname,bases,clsdict))</span><br><span class="line"><span class="meta">... </span>        d= dict(clsdict)</span><br><span class="line"><span class="meta">... </span>        order=[]</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">for</span> name, value <span class="keyword">in</span> clsdict.items():</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">if</span> isinstance(value, Typed):</span><br><span class="line"><span class="meta">... </span>                value._name= name</span><br><span class="line"><span class="meta">... </span>                order.append(name)</span><br><span class="line"><span class="meta">... </span>        d[<span class="string">'_order'</span>] = order</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> type.__new__(cls, clsname, bases, d)</span><br><span class="line"><span class="meta">... </span>    </span><br><span class="line"><span class="meta">... </span>    @classmethod</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__prepare__</span><span class="params">(cls, clsname, bases)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> OrderedDict()</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>In this metaclass, the definition order of descriptors is captured by using an <strong>OrderedDict</strong> during the execution of the class body. The resulting order of names is then extracted from the dictionary and stored into a class attribute <strong>_order</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Structure</span><span class="params">(metaclass= OrderedMeta)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">as_csv</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">','</span>.join(str(getattr(self, name)) <span class="keyword">for</span> name <span class="keyword">in</span> self._order)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">cls:&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">OrderedMeta</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">clsname</span>:</span> Structure</span><br><span class="line">bases: ()</span><br><span class="line">clsdict: OrderedDict([(<span class="string">'__module__'</span>, <span class="string">'__main__'</span>), (<span class="string">'__qualname__'</span>, <span class="string">'Structure'</span>), (<span class="string">'as_csv'</span>, &lt;function Structure.as_csv at <span class="number">0x0399F108</span>&gt;)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Stock</span><span class="params">(Structure)</span>:</span></span><br><span class="line"><span class="meta">... </span>    name= String()</span><br><span class="line"><span class="meta">... </span>    shares=Integer()</span><br><span class="line"><span class="meta">... </span>    price= Float()</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, shares, price)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.name= name</span><br><span class="line"><span class="meta">... </span>        self.shares= shares</span><br><span class="line"><span class="meta">... </span>        self.price= price</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">cls:&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">OrderedMeta</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">clsname</span>:</span> Stock</span><br><span class="line">bases: (&lt;class '__main__.Structure'&gt;,)</span><br><span class="line">clsdict: OrderedDict([(<span class="string">'__module__'</span>, <span class="string">'__main__'</span>), (<span class="string">'__qualname__'</span>, <span class="string">'Stock'</span>), (<span class="string">'name'</span>, &lt;__main__.String object at <span class="number">0x039A4370</span>&gt;), (<span class="string">'shares'</span>, &lt;__main__.Integer object at <span class="number">0x039A46B0</span>&gt;), (<span class="string">'price'</span>, &lt;__main__.Float object at <span class="number">0x039A47B0</span>&gt;), (<span class="string">'__init__'</span>, &lt;function Stock.__init__ at <span class="number">0x0399F660</span>&gt;)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s= Stock(<span class="string">'ff'</span>,<span class="number">12</span>,<span class="number">3.5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name</span><br><span class="line"><span class="string">'ff'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.as_csv()</span><br><span class="line"><span class="string">'ff,12,3.5'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t= Stock(<span class="number">3</span>,<span class="number">3</span>,<span class="number">3.5</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">6</span>, <span class="keyword">in</span> __init__</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">7</span>, <span class="keyword">in</span> __set__</span><br><span class="line">TypeError: Expected &lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>The entire key to this recipe is the <strong>__prepare__()</strong> method, which is defined in the <strong>OrderedMeta</strong> metaclass. This method is invoked immediately at the start of a class definition with the class name and base classes. It must then return a mapping object to use when processing the class body. By returning an <strong>OrderedDict</strong> instead of a normal dictionary, the resulting definition order is easily captured.</p><p>It is possible to extend this functionality even further if you are willing to make your own dictionary-like objects. For example, consider this variant of the solution that rejects duplicate definitions:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">NoDupOrderedDict</span><span class="params">(OrderedDict)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, clsname)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.clsname= clsname</span><br><span class="line"><span class="meta">... </span>        super().__init__()</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, name, value)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> name <span class="keyword">in</span> self:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">raise</span> TypeError(<span class="string">'&#123;&#125; already defined in &#123;&#125;'</span>.format(name, self.clsname))</span><br><span class="line"><span class="meta">... </span>        super().__setitem__(name, value)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">OrderedMeta</span><span class="params">(type)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, clsname, bases, clsdict)</span>:</span></span><br><span class="line"><span class="meta">... </span>        d= dict(clsdict)</span><br><span class="line"><span class="meta">... </span>        d[<span class="string">'_order'</span>]= [name <span class="keyword">for</span> name <span class="keyword">in</span> clsdict <span class="keyword">if</span> name[<span class="number">0</span>]!= <span class="string">'_'</span>]</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> type.__new__(cls, clsname, bases, d)</span><br><span class="line"><span class="meta">... </span>    </span><br><span class="line"><span class="meta">... </span>    @classmethod</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__prepare__</span><span class="params">(cls, clsname, bases)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> NoDupOrderedDict(clsname)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Here’s what happens if you use this metaclass and make a class with duplicate entries:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(metaclass= OrderedMeta)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">3</span>, <span class="keyword">in</span> A</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">7</span>, <span class="keyword">in</span> __setitem__</span><br><span class="line">TypeError: spam already defined <span class="keyword">in</span> A</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Defining-a-Metaclass-That-Takes-Optional-Arguments"><a href="#Defining-a-Metaclass-That-Takes-Optional-Arguments" class="headerlink" title="Defining a Metaclass That Takes Optional Arguments"></a>Defining a Metaclass That Takes Optional Arguments</h2><p>In custom metaclasses, additional keyword arguments can be supplied, like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spam</span><span class="params">(metaclass=MyMeta, debug=True, synchronize=True)</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>To support such keyword arguments in a metaclass, make sure you define them on the <strong>__prepare__()</strong>, <strong>__new__()</strong>, and <strong>__init__()</strong> methods using keyword-only arguments, like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMeta</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="comment"># Optional</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__prepare__</span><span class="params">(cls, name, bases, *, debug=False, synchronize=False)</span>:</span></span><br><span class="line">        <span class="comment"># Custom processing</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="keyword">return</span> super().__prepare__(name, bases)</span><br><span class="line">    <span class="comment"># Required</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name, bases, ns, *, debug=False, synchronize=False)</span>:</span></span><br><span class="line">        <span class="comment"># Custom processing</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> super().__new__(cls, name, bases, ns)</span><br><span class="line">    <span class="comment"># Required</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, bases, ns, *, debug=False, synchronize=False)</span>:</span></span><br><span class="line">        <span class="comment"># Custom processing</span></span><br><span class="line">        ...</span><br><span class="line">        super().__init__(name, bases, ns)</span><br></pre></td></tr></table></figure><p>The <strong>__prepare__()</strong> method is called first and used to create the class namespace prior to the body of any class definition being processed. Normally, this method simply returns a dictionary or other mapping object. The <strong>__new__()</strong> method is used to instantiate the resulting type object. It is called after the class body has been fully executed. The <strong>__init__()</strong> method is called last and used to perform any additional initialization steps.</p><p>When writing metaclasses, it is somewhat common to only define a <strong>__new__()</strong> or <strong>__init__()</strong> method, but not both. However, if extra keyword arguments are going to be accepted, then both methods must be provided and given compatible signatures. The default <strong>__prepare__()</strong> method accepts any set of keyword arguments, but ignores them. You only need to define it yourself if the extra arguments would somehow affect management of the class namespace creation.</p><h2 id="Enforcing-an-Argument-Signature-on-args-and-kwargs"><a href="#Enforcing-an-Argument-Signature-on-args-and-kwargs" class="headerlink" title="Enforcing an Argument Signature on *args and **kwargs"></a>Enforcing an Argument Signature on *args and **kwargs</h2><p>You’ve written a function or method that uses <strong>*args</strong> and <strong>**kwargs</strong>, so that it can be general purpose, but you would also like to check the passed arguments to see if they match a specific function calling signature. Two classes, <strong>Signature</strong> and <strong>Parameter</strong>, are of particular interest here. Here is an interactive example of creating a function signature:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> inspect <span class="keyword">import</span> Signature, Parameter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>params=[Parameter(<span class="string">'x'</span>, Parameter.POSITIONAL_OR_KEYWORD),</span><br><span class="line"><span class="meta">... </span>        Parameter(<span class="string">'y'</span>, Parameter.POSITIONAL_OR_KEYWORD, default= <span class="number">2</span>),</span><br><span class="line"><span class="meta">... </span>        Parameter(<span class="string">'z'</span>, Parameter.KEYWORD_ONLY, default= <span class="keyword">None</span>)</span><br><span class="line"><span class="meta">... </span>        ]</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sig= Signature(params)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sig)</span><br><span class="line">(x, y=<span class="number">2</span>, *, z=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure></p><p>Once you have a signature object, you can easily bind it to <strong>*args</strong> and <strong>**kwargs</strong> using the signature’s <strong>bind()</strong> method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>    bound_values= sig.bind(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> name, value <span class="keyword">in</span> bound_values.arguments.items():</span><br><span class="line"><span class="meta">... </span>        print(name, value)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(y=<span class="number">2</span>, x=<span class="number">1</span>)</span><br><span class="line">x <span class="number">1</span></span><br><span class="line">y <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line"> File <span class="string">"/usr/local/lib/python3.3/inspect.py"</span>, line <span class="number">1972</span>, <span class="keyword">in</span> _bind</span><br><span class="line"> <span class="keyword">raise</span> TypeError(<span class="string">'too many positional arguments'</span>)</span><br><span class="line">TypeError: too many positional arguments</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(y=<span class="number">2</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line"> File <span class="string">"/usr/local/lib/python3.3/inspect.py"</span>, line <span class="number">1961</span>, <span class="keyword">in</span> _bind</span><br><span class="line"> <span class="keyword">raise</span> TypeError(msg) <span class="keyword">from</span> <span class="keyword">None</span></span><br><span class="line">TypeError: <span class="string">'x'</span> parameter lacking default value</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>, y=<span class="number">2</span>, x=<span class="number">3</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line"> File <span class="string">"/usr/local/lib/python3.3/inspect.py"</span>, line <span class="number">1985</span>, <span class="keyword">in</span> _bind</span><br><span class="line"> <span class="string">'&#123;arg!r&#125;'</span>.format(arg=param.name))</span><br><span class="line">TypeError: multiple values <span class="keyword">for</span> argument <span class="string">'x'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>Here is a more concrete example of enforcing function signatures. In this code, a base class has defined an extremely general-purpose version of <strong>__init__()</strong>, but subclasses are expected to supply an expected signature.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">make_sig</span><span class="params">(*names)</span>:</span></span><br><span class="line"><span class="meta">... </span>    params=[Parameter(name, Parameter.POSITIONAL_OR_KEYWORD) <span class="keyword">for</span> name <span class="keyword">in</span> names]</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> Signature(parameters=params)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Structure</span>:</span></span><br><span class="line"><span class="meta">... </span>    __signature__= make_sig()</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>        bound_values= self.__signature__.bind(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">for</span> name, value <span class="keyword">in</span> bound_values.arguments.items():</span><br><span class="line"><span class="meta">... </span>            setattr(self, name, value)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Stock</span><span class="params">(Structure)</span>:</span></span><br><span class="line"><span class="meta">... </span>    __signature__= make_sig(<span class="string">'name'</span>, <span class="string">'shares'</span>, <span class="string">'price'</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">(Structure)</span>:</span></span><br><span class="line"><span class="meta">... </span>    __signature__= make_sig(<span class="string">'x'</span>, <span class="string">'y'</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> inspect</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(inspect.signature(Stock))</span><br><span class="line">(name, shares, price)</span><br></pre></td></tr></table></figure><p>The use of functions involving <strong>*args</strong> and <strong>**kwargs</strong> is very common when trying to make general-purpose libraries, write decorators or implement proxies. However, one downside of such functions is that if you want to implement your own argument checking, it can quickly become an unwieldy mess.</p><p>In the last example of the solution, it might make sense to create signature objects through the use of a custom metaclass.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">StructureMeta</span><span class="params">(type)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, clsname, bases, clsdict)</span>:</span></span><br><span class="line"><span class="meta">... </span>        clsdict[<span class="string">'__signature__'</span>]= make_sig(*clsdict.get(<span class="string">'_fields'</span>, []))</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> super().__new__(cls, clsname, bases, clsdict)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Structure</span><span class="params">(metaclass= StructureMeta)</span>:</span></span><br><span class="line"><span class="meta">... </span>    _fields=[]</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>        bound_values= self.__signature__.bind(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">for</span> name, value <span class="keyword">in</span> bound_values.arguments.items():</span><br><span class="line"><span class="meta">... </span>            setattr(self, name, value)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Stock</span><span class="params">(Structure)</span>:</span></span><br><span class="line"><span class="meta">... </span>    _fields=[<span class="string">'name'</span>, <span class="string">'shares'</span>, <span class="string">'price'</span>]</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">(Structure)</span>:</span></span><br><span class="line"><span class="meta">... </span>    _fields= [<span class="string">'x'</span>, <span class="string">'y'</span>]</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>inspect.signature(Stock)</span><br><span class="line">&lt;Signature (name, shares, price)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(inspect.signature(Point))</span><br><span class="line">(x, y)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>When defining custom signatures, it is often useful to store the signature in a special attribute <strong>__signature__</strong>, as shown. If you do this, code that uses the inspect module to perform introspection will see the signature and report it as the calling convention.</p><h2 id="Enforcing-Coding-Conventions-in-Classes"><a href="#Enforcing-Coding-Conventions-in-Classes" class="headerlink" title="Enforcing Coding Conventions in Classes"></a>Enforcing Coding Conventions in Classes</h2><p>A key feature of a metaclass is that it allows you to examine the contents of a class at the time of definition. Inside the redefined <strong>__init__()</strong> method, you are free to inspect the class dictionary, base classes, and more. Moreover, once a metaclass has been specified for a class, it gets inherited by all of the subclasses. Thus, a sneaky framework builder can specify a metaclass for one of the top-level classes in a large hierarchy and capture the definition of all classes under it.</p><p>Here is a metaclass that rejects any class definition containing methods with mixed-case names:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">NoMixedCaseMeta</span><span class="params">(type)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, clsname, bases, clsdict)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(clsdict)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">for</span> name <span class="keyword">in</span> clsdict:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">if</span> name.lower() != name:</span><br><span class="line"><span class="meta">... </span>                <span class="keyword">raise</span> TypeError(<span class="string">'Bad attribute name: '</span>+name)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> super().__new__(cls, clsname, bases, clsdict)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Root</span><span class="params">(metaclass= NoMixedCaseMeta)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line">&#123;<span class="string">'__qualname__'</span>: <span class="string">'Root'</span>, <span class="string">'__module__'</span>: <span class="string">'__main__'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(Root)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">fooBar</span><span class="params">(self)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line">&#123;<span class="string">'__qualname__'</span>: <span class="string">'B'</span>, <span class="string">'__module__'</span>: <span class="string">'__main__'</span>, <span class="string">'fooBar'</span>: &lt;function B.fooBar at <span class="number">0x0399FF60</span>&gt;&#125;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">6</span>, <span class="keyword">in</span> __new__</span><br><span class="line">TypeError: Bad attribute name: fooBar</span><br></pre></td></tr></table></figure><p>As a more advanced and useful example, here is a metaclass that checks the definition of redefined methods to make sure they have the same calling signature as the original method in the superclass.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> inspect <span class="keyword">import</span> signature</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> logging</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MatchSignaturesMeta</span><span class="params">(type)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, clsname, bases, clsdict)</span>:</span></span><br><span class="line"><span class="meta">... </span>        super().__init__(clsname, bases, clsdict)</span><br><span class="line"><span class="meta">... </span>        sup=super(self, self)</span><br><span class="line"><span class="meta">... </span>        print(clsdict.items())</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">for</span> name, value <span class="keyword">in</span> clsdict.items():</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">if</span> name.startswith(<span class="string">'_'</span>) <span class="keyword">or</span> <span class="keyword">not</span> callable(value):</span><br><span class="line"><span class="meta">... </span>                <span class="keyword">continue</span></span><br><span class="line"><span class="meta">... </span>            prev_dfn= getattr(sup, name, <span class="keyword">None</span>)</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">if</span> prev_dfn:</span><br><span class="line"><span class="meta">... </span>                prev_sig= signature(prev_dfn)</span><br><span class="line"><span class="meta">... </span>                val_sig= signature(value)</span><br><span class="line"><span class="meta">... </span>                <span class="keyword">if</span> prev_sig != val_sig:</span><br><span class="line"><span class="meta">... </span>                    logging.warning(<span class="string">'Signature mismatch in %s. %s != %s'</span>, value.__qualname__, prev_sig, val_sig)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Root</span><span class="params">(metaclass= MatchSignaturesMeta)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line">dict_items([(<span class="string">'__qualname__'</span>, <span class="string">'Root'</span>), (<span class="string">'__module__'</span>, <span class="string">'__main__'</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Root)</span>:</span> </span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self, x, y)</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self, x, *, z)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line">dict_items([(<span class="string">'foo'</span>, &lt;function A.foo at <span class="number">0x039A8270</span>&gt;), (<span class="string">'spam'</span>, &lt;function A.spam at <span class="number">0x039A8228</span>&gt;), (<span class="string">'__qualname__'</span>, <span class="string">'A'</span>), (<span class="string">'__module__'</span>, <span class="string">'__main__'</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>super(A, A)</span><br><span class="line">&lt;super: &lt;class 'A'&gt;, &lt;A object&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self, a, b)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self,x, z)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line">dict_items([(<span class="string">'foo'</span>, &lt;function B.foo at <span class="number">0x039A88E8</span>&gt;), (<span class="string">'spam'</span>, &lt;function B.spam at <span class="number">0x039A88A0</span>&gt;), (<span class="string">'__qualname__'</span>, <span class="string">'B'</span>), (<span class="string">'__module__'</span>, <span class="string">'__main__'</span>)])</span><br><span class="line">WARNING:root:Signature mismatch <span class="keyword">in</span> B.foo. (self, x, y) != (self, a, b)</span><br><span class="line">WARNING:root:Signature mismatch <span class="keyword">in</span> B.spam. (self, x, *, z) != (self, x, z)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>As a more advanced and useful example, here is a metaclass that checks the definition of redefined methods to make sure they have the same calling signature as the original method in the superclass.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MatchSignaturesMeta</span><span class="params">(type)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, clsname, bases, clsdict)</span>:</span></span><br><span class="line"><span class="meta">... </span>        super().__init__(clsname, bases, clsdict)</span><br><span class="line"><span class="meta">... </span>        sup=super(self, self)</span><br><span class="line"><span class="meta">... </span>        print(clsdict.items())</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">for</span> name, value <span class="keyword">in</span> clsdict.items():</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">if</span> name.startswith(<span class="string">'_'</span>) <span class="keyword">or</span> <span class="keyword">not</span> callable(value):</span><br><span class="line"><span class="meta">... </span>                <span class="keyword">continue</span></span><br><span class="line"><span class="meta">... </span>            prev_dfn= getattr(sup, name, <span class="keyword">None</span>)</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">if</span> prev_dfn:</span><br><span class="line"><span class="meta">... </span>                prev_sig= signature(prev_dfn)</span><br><span class="line"><span class="meta">... </span>                val_sig= signature(value)</span><br><span class="line"><span class="meta">... </span>                <span class="keyword">if</span> prev_sig != val_sig:</span><br><span class="line"><span class="meta">... </span>                    logging.warning(<span class="string">'Signature mismatch in %s. %s != %s'</span>, value.__qualname__, prev_sig, val_sig)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Root</span><span class="params">(metaclass= MatchSignaturesMeta)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line">dict_items([(<span class="string">'__qualname__'</span>, <span class="string">'Root'</span>), (<span class="string">'__module__'</span>, <span class="string">'__main__'</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Root)</span>:</span> </span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self, x, y)</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self, x, *, z)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line">dict_items([(<span class="string">'foo'</span>, &lt;function A.foo at <span class="number">0x039A8270</span>&gt;), (<span class="string">'spam'</span>, &lt;function A.spam at <span class="number">0x039A8228</span>&gt;), (<span class="string">'__qualname__'</span>, <span class="string">'A'</span>), (<span class="string">'__module__'</span>, <span class="string">'__main__'</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>super(A, A)</span><br><span class="line">&lt;super: &lt;class 'A'&gt;, &lt;A object&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self, a, b)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self,x, z)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line">dict_items([(<span class="string">'foo'</span>, &lt;function B.foo at <span class="number">0x039A88E8</span>&gt;), (<span class="string">'spam'</span>, &lt;function B.spam at <span class="number">0x039A88A0</span>&gt;), (<span class="string">'__qualname__'</span>, <span class="string">'B'</span>), (<span class="string">'__module__'</span>, <span class="string">'__main__'</span>)])</span><br><span class="line">WARNING:root:Signature mismatch <span class="keyword">in</span> B.foo. (self, x, y) != (self, a, b)</span><br><span class="line">WARNING:root:Signature mismatch <span class="keyword">in</span> B.spam. (self, x, *, z) != (self, x, z)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>The choice of redefining <strong>__new__()</strong> or <strong>__init__()</strong> in a metaclass depends on how you want to work with the resulting class. <strong>__new__()</strong> is invoked prior to class creation and is typically used when a metaclass wants to alter the class definition in some way (by changing the contents of the class dictionary). The <strong>__init__()</strong> method is invoked after a class has been created, and is useful if you want to write code that works with the fully formed class object. In the last example, this is essential since it is using the super() function to search for prior definitions. This only works once the class instance has been created and the underlying method resolution order has been set.</p><p>The line of code that uses <strong>super(self, self)</strong> is not a typo. When working with a metaclass, it’s important to realize that the <strong>self</strong> is actually a class object. So, that statement is actually being used to find definitions located further up the class hierarchy that make up the parents of <strong>self</strong>.</p><h2 id="Defining-Classes-Programmatically"><a href="#Defining-Classes-Programmatically" class="headerlink" title="Defining Classes Programmatically"></a>Defining Classes Programmatically</h2><p>You can use the function <strong>types.new_class()</strong> to instantiate new class objects. All you need to do is provide the name of the class, tuple of parent classes, keyword arguments, and a callback that populates the class dictionary with members.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, shares, price)</span>:</span></span><br><span class="line"><span class="meta">... </span>    self.name= name</span><br><span class="line"><span class="meta">... </span>    self.shares= shares</span><br><span class="line"><span class="meta">... </span>    self.price= price</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">cost</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> self.shares * self.price</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cls_dict=&#123; <span class="string">'__init__'</span>: __init__,</span><br><span class="line"><span class="meta">... </span>          <span class="string">'cost'</span>: cost&#125;</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> types</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Stock= types.new_class(<span class="string">'Stock'</span>, (), &#123;&#125;, <span class="keyword">lambda</span> ns: ns.update(cls_dict))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Stock.__module__= __name__</span><br></pre></td></tr></table></figure><p>This makes a normal class object that works just like you expect:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s= Stock(<span class="string">'Acme'</span>, <span class="number">10</span>, <span class="number">4.4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">&lt;__main__.Stock object at <span class="number">0x0399CE70</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.cost()</span><br><span class="line"><span class="number">44.0</span></span><br></pre></td></tr></table></figure><p>A subtle facet of the solution is the assignment to <strong>Stock.__module__</strong> after the call to <strong>types.new_class()</strong>. Whenever a class is defined, its <strong>__module__</strong> attribute contains the name of the module in which it was defined. This name is used to produce the output made by methods such as <strong>__repr__()</strong>. It’s also used by various libraries, such as <strong>pickle</strong>. Thus, in order for the class you make to be “proper,” you need to make sure this attribute is set accordingly.</p><p>If the class you want to create involves a different metaclass, it would be specified in the third argument to <strong>types.new_class()</strong>. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> abc</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Stock= types.new_class(<span class="string">'Stock'</span>, (), &#123;<span class="string">'metaclass'</span>: abc.ABCMeta&#125;, <span class="keyword">lambda</span> ns: ns.update(cls_dict))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Stock.__module__= __name__</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Stock</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Stock</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(Stock)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">abc</span>.<span class="title">ABCMeta</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>The fourth argument to <strong>new_class()</strong> is the most mysterious, but it is a function that receives the mapping object being used for the class namespace as input. This is normally a dictionary, but it’s actually whatever object gets returned by the <strong>__prepare__()</strong> method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> operator</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> types</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">named_tuple</span><span class="params">(classname, fieldnames)</span>:</span></span><br><span class="line"><span class="meta">... </span>    cls_dict= &#123;name: property(operator.itemgetter(n)) <span class="keyword">for</span> n, name <span class="keyword">in</span> enumerate(fieldnames)&#125;</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> len(args) != len(fieldnames):</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">raise</span> TypeError(<span class="string">'Expected &#123;&#125; arguments'</span>.format(len(fieldnames)))</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> tuple.__new__(cls, args)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>    cls_dict[<span class="string">'__new__'</span>]= __new__</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>    cls= types.new_class(classname, (tuple,),&#123;&#125;,<span class="keyword">lambda</span> ns: ns.update(cls_dict))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>    cls.__module__= sys._getframe(<span class="number">1</span>).f_globals[<span class="string">'__name__'</span>]</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> cls</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>The last part of this code uses a so-called “frame hack” involving <strong>sys._getframe()</strong> to obtain the module name of the caller.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Point= named_tuple(<span class="string">'Point'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Point</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Point</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; p= Point(4,5)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(p)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.x</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.x= <span class="number">3</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: can<span class="string">'t set attribute</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(p)</span></span><br><span class="line"><span class="string">(4, 5)</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; Point(2,3,4)</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "&lt;stdin&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string">  File "&lt;stdin&gt;", line 6, in __new__</span></span><br><span class="line"><span class="string">TypeError: Expected 2 arguments</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>You might be inclined to create a class directly by instantiating a metaclass directly. For example:</p><p><code>Stock = type(&#39;Stock&#39;, (), cls_dict)</code></p><p>The problem is that this approach skips certain critical steps, such as invocation of the metaclass <strong>__prepare__()</strong> method. By using types.new_class() instead, you ensure that all of the necessary initialization steps get carried out. For instance, the callback function that’s given as the fourth argument to <strong>types.new_class()</strong> receives the mapping object that’s returned by the <strong>__prepare__()</strong> method.</p><p>If you only want to carry out the preparation step, use <strong>types.prepare_class()</strong>. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> types</span><br><span class="line">metaclass, kwargs, ns = types.prepare_class(<span class="string">'Stock'</span>, (), &#123;<span class="string">'metaclass'</span>: type&#125;)</span><br></pre></td></tr></table></figure><p>This finds the appropriate metaclass and invokes its <strong>__prepare__()</strong> method. The metaclass, remaining keyword arguments, and prepared namespace are then returned.</p><h2 id="Initializing-Class-Members-at-Definition-Time"><a href="#Initializing-Class-Members-at-Definition-Time" class="headerlink" title="Initializing Class Members at Definition Time"></a>Initializing Class Members at Definition Time</h2><p>Performing initialization or setup actions at the time of class definition is a classic use of metaclasses. Essentially, a metaclass is triggered at the point of a definition, at which point you can perform additional steps.</p><p>Here is an example that uses this idea to create classes similar to named tuples from the <strong>collections</strong> module:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> operator</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">StructTupleMeta</span><span class="params">(type)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>        super().__init__(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">for</span> n, name <span class="keyword">in</span> enumerate(cls._fields):</span><br><span class="line"><span class="meta">... </span>            setattr(cls, name, property(operator.itemgetter(n)))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">StructTuple</span><span class="params">(tuple, metaclass= StructTupleMeta)</span>:</span></span><br><span class="line"><span class="meta">... </span>    _fields= []</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> len(args) != len(cls._fields):</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">raise</span> ValueError(<span class="string">'&#123;&#125; arguments required'</span>.format(len(cls._fields)))</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> super().__new__(cls, args)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Stock</span><span class="params">(StructTuple)</span>:</span></span><br><span class="line"><span class="meta">... </span>    _fields= [<span class="string">'name'</span>, <span class="string">'shares'</span>, <span class="string">'price'</span>]</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">(StructTuple)</span>:</span></span><br><span class="line"><span class="meta">... </span>    _fields= [<span class="string">'x'</span>, <span class="string">'y'</span>]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Here’s how they work:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Stock(<span class="string">'ACME'</span>, <span class="number">50</span>, <span class="number">91.1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">(<span class="string">'ACME'</span>, <span class="number">50</span>, <span class="number">91.1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s[<span class="number">0</span>]</span><br><span class="line"><span class="string">'ACME'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name</span><br><span class="line"><span class="string">'ACME'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.shares * s.price</span><br><span class="line"><span class="number">4555.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.shares = <span class="number">23</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: can<span class="string">'t set attribute</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>In this recipe, the <strong>StructTupleMeta</strong> class takes the listing of attribute names in the <strong>_fields</strong> class attribute and turns them into property methods that access a particular tuple slot. The <strong>operator.itemgetter()</strong> function creates an accessor function and the <strong>property()</strong> function turns it into a property.</p><p>The trickiest part of this recipe is knowing when the different initialization steps occur. The <strong>__init__()</strong> method in <strong>StructTupleMeta</strong> is only called once for each class that is defined. The <strong>cls</strong> argument is the class that has just been defined. Essentially, the code is using the <strong>_fields</strong> class variable to take the newly defined class and add some new parts to it.</p><p>The <strong>StructTuple</strong> class serves as a common base class for users to inherit from. The <strong>__new__()</strong> method in that class is responsible for making new instances. The use of <strong>__new__()</strong> here is a bit unusual, but is partly related to the fact that we’re modifying the calling signature of tuples so that we can create instances with code that uses a normal looking calling convention like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = Stock(<span class="string">'ACME'</span>, <span class="number">50</span>, <span class="number">91.1</span>) <span class="comment"># OK</span></span><br><span class="line">s = Stock((<span class="string">'ACME'</span>, <span class="number">50</span>, <span class="number">91.1</span>)) <span class="comment"># Error</span></span><br></pre></td></tr></table></figure><p>Unlike <strong>__init__()</strong>, the <strong>__new__()</strong> method gets triggered before an instance is created. Since tuples are immutable, it’s not possible to make any changes to them once they have been created. An <strong><strong>init</strong>()</strong> function gets triggered too late in the instance creation process to do what we want. That’s why <strong>__new__()</strong> has been defined.</p><h2 id="Implementing-Multiple-Dispatch-with-Function-Annotations"><a href="#Implementing-Multiple-Dispatch-with-Function-Annotations" class="headerlink" title="Implementing Multiple Dispatch with Function Annotations"></a>Implementing Multiple Dispatch with Function Annotations</h2><p>You’ve learned about function argument annotations and you have a thought that you might be able to use them to implement multiple-dispatch (method overloading) based on types.</p><p>Here is the start of a solution that does just that, using a combination of metaclasses and descriptors:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"><span class="keyword">import</span> types</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiMethod</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Represents a single multimethod.</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self._methods = &#123;&#125;</span><br><span class="line">        self.__name__ = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(self, meth)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        Register a new method as a multimethod</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        sig = inspect.signature(meth)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Build a type-signature from the method's annotations</span></span><br><span class="line">        types = []</span><br><span class="line">        <span class="keyword">for</span> name, parm <span class="keyword">in</span> sig.parameters.items():</span><br><span class="line">            <span class="keyword">if</span> name == <span class="string">'self'</span>: </span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> parm.annotation <span class="keyword">is</span> inspect.Parameter.empty:</span><br><span class="line">                <span class="keyword">raise</span> TypeError(</span><br><span class="line">                    <span class="string">'Argument &#123;&#125; must be annotated with a type'</span>.format(name)</span><br><span class="line">                    )</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> isinstance(parm.annotation, type):</span><br><span class="line">                <span class="keyword">raise</span> TypeError(</span><br><span class="line">                    <span class="string">'Argument &#123;&#125; annotation must be a type'</span>.format(name)</span><br><span class="line">                    )</span><br><span class="line">            <span class="keyword">if</span> parm.default <span class="keyword">is</span> <span class="keyword">not</span> inspect.Parameter.empty:</span><br><span class="line">                self._methods[tuple(types)] = meth</span><br><span class="line">            types.append(parm.annotation)</span><br><span class="line"></span><br><span class="line">        self._methods[tuple(types)] = meth</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        Call a method based on type signature of the arguments</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        types = tuple(type(arg) <span class="keyword">for</span> arg <span class="keyword">in</span> args[<span class="number">1</span>:])</span><br><span class="line">        meth = self._methods.get(types, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">if</span> meth:</span><br><span class="line">            <span class="keyword">return</span> meth(*args)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'No matching method for types &#123;&#125;'</span>.format(types))</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, cls)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        Descriptor method needed to make calls work in a class</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> types.MethodType(self, instance)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiDict</span><span class="params">(dict)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Special dictionary to build multimethods in a metaclass</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self:</span><br><span class="line">            <span class="comment"># If key already exists, it must be a multimethod or callable</span></span><br><span class="line">            current_value = self[key]</span><br><span class="line">            <span class="keyword">if</span> isinstance(current_value, MultiMethod):</span><br><span class="line">                current_value.register(value)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                mvalue = MultiMethod(key)</span><br><span class="line">                mvalue.register(current_value)</span><br><span class="line">                mvalue.register(value)</span><br><span class="line">                super().__setitem__(key, mvalue)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            super().__setitem__(key, value)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultipleMeta</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Metaclass that allows multiple dispatch of methods</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, clsname, bases, clsdict)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> type.__new__(cls, clsname, bases, dict(clsdict))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__prepare__</span><span class="params">(cls, clsname, bases)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> MultiDict()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Some example classes that use multiple dispatch</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spam</span><span class="params">(metaclass=MultipleMeta)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self, x:int, y:int)</span>:</span></span><br><span class="line">        print(<span class="string">'Bar 1:'</span>, x, y)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self, s:str, n:int = <span class="number">0</span>)</span>:</span></span><br><span class="line">        print(<span class="string">'Bar 2:'</span>, s, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example: overloaded __init__</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span><span class="params">(metaclass=MultipleMeta)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, year: int, month:int, day:int)</span>:</span></span><br><span class="line">        self.year = year</span><br><span class="line">        self.month = month</span><br><span class="line">        self.day = day</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        t = time.localtime()</span><br><span class="line">        self.__init__(t.tm_year, t.tm_mon, t.tm_mday)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Spam()</span><br><span class="line">    s.bar(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    s.bar(<span class="string">'hello'</span>)</span><br><span class="line">    s.bar(<span class="string">'hello'</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s.bar(<span class="number">2</span>, <span class="string">'hello'</span>)</span><br><span class="line">    <span class="keyword">except</span> TypeError <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Overloaded __init__</span></span><br><span class="line">    d = Date(<span class="number">2012</span>, <span class="number">12</span>, <span class="number">21</span>)</span><br><span class="line">    print(d.year, d.month, d.day)</span><br><span class="line">    <span class="comment"># Get today's date</span></span><br><span class="line">    e = Date()</span><br><span class="line">print(e.year, e.month, e.day)</span><br></pre></td></tr></table></figure><p>The main idea in the implementation is relatively simple. The <strong>MutipleMeta</strong> metaclass uses its <strong>__prepare__()</strong> method to supply a custom class dictionary as an instance of <strong>MultiDict</strong>. Unlike a normal dictionary, <strong>MultiDict</strong> checks to see whether entries already exist when items are set. If so, the duplicate entries get merged together inside an instance of MultiMethod.</p><p>Instances of <strong>MultiMethod</strong> collect methods by building a mapping from type signatures to functions. During construction, function annotations are used to collect these signatures and build the mapping. This takes place in the <strong>MultiMethod.register()</strong> method. One critical part of this mapping is that for multimethods, types must be specified on all of the arguments or else an error occurs.</p><p>To make <strong>MultiMethod</strong> instances emulate a callable, the <strong>__call__()</strong> method is implemented. This method builds a type tuple from all of the arguments except self, looks up the method in the internal map, and invokes the appropriate method. The <strong>__get__()</strong> is required to make <strong>MultiMethod</strong> instances operate correctly inside class definitions. In the implementation, it’s being used to create proper bound methods. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = s.bar</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">&lt;bound method Spam.bar of &lt;__main__.Spam object at <span class="number">0x1006a46d0</span>&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.__self__</span><br><span class="line">&lt;__main__.Spam object at <span class="number">0x1006a46d0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.__func__</span><br><span class="line">&lt;__main__.MultiMethod object at <span class="number">0x1006a4d50</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">Bar <span class="number">1</span>: <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b(<span class="string">'hello'</span>)</span><br><span class="line">Bar <span class="number">2</span>: hello <span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>As an alternative to using metaclasses and annotations, it is possible to implement a similar recipe using decorators. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> types</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">multimethod</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        self._methods = &#123;&#125;</span><br><span class="line">        self.__name__ = func.__name__</span><br><span class="line">        self._default = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">match</span><span class="params">(self, *types)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(func)</span>:</span></span><br><span class="line">            ndefaults = len(func.__defaults__) <span class="keyword">if</span> func.__defaults__ <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> range(ndefaults+<span class="number">1</span>):</span><br><span class="line">                self._methods[types[:len(types) - n]] = func</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">return</span> register</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">        types = tuple(type(arg) <span class="keyword">for</span> arg <span class="keyword">in</span> args[<span class="number">1</span>:])</span><br><span class="line">        meth = self._methods.get(types, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">if</span> meth:</span><br><span class="line">            <span class="keyword">return</span> meth(*args)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self._default(*args)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, cls)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> types.MethodType(self, instance)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example use</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spam</span>:</span></span><br><span class="line"><span class="meta">    @multimethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">        <span class="comment"># Default method called if no match</span></span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'No matching method for bar'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @bar.match(int, int)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        print(<span class="string">'Bar 1:'</span>, x, y)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @bar.match(str, int)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self, s, n = <span class="number">0</span>)</span>:</span></span><br><span class="line">        print(<span class="string">'Bar 2:'</span>, s, n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    s = Spam()</span><br><span class="line">    s.bar(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    s.bar(<span class="string">'hello'</span>)</span><br><span class="line">    s.bar(<span class="string">'hello'</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s.bar(<span class="number">2</span>, <span class="string">'hello'</span>)</span><br><span class="line">    <span class="keyword">except</span> TypeError <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br></pre></td></tr></table></figure><h2 id="Avoiding-Repetitive-Property-Methods"><a href="#Avoiding-Repetitive-Property-Methods" class="headerlink" title="Avoiding Repetitive Property Methods"></a>Avoiding Repetitive Property Methods</h2><p>You are writing classes where you are repeatedly having to define property methods that perform common tasks, such as type checking. You would like to simplify the code so there is not so much code repetition.</p><p>One possible approach is to make a function that simply defines the property for you and returns it. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">typed_property</span><span class="params">(name, expected_type)</span>:</span></span><br><span class="line"><span class="meta">... </span>    storage_name= <span class="string">'_'</span>+ name</span><br><span class="line"><span class="meta">... </span>    @property</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">prop</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> getattr(self, storage_name)</span><br><span class="line"><span class="meta">... </span>    @prop.setter</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">prop</span><span class="params">(self, value)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, expected_type):</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">raise</span> TypeError(<span class="string">'&#123;&#125; must be a &#123;&#125;'</span>.format(name, expected_type))</span><br><span class="line"><span class="meta">... </span>        setattr(self, storage_name, value)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> prop</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line"><span class="meta">... </span>    name = typed_property(<span class="string">'name'</span>, str)</span><br><span class="line"><span class="meta">... </span>    age= typed_property(<span class="string">'age'</span>, int)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.name= name</span><br><span class="line"><span class="meta">... </span>        self.age= age</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>The <strong>typed_property()</strong> function in this example may look a little weird, but it’s really just generating the property code for you and returning the resulting property object. Thus, when it’s used in a class, it operates exactly as if the code appearing inside <strong>typed_property()</strong> was placed into the class definition itself. Even though the property getter and setter methods are accessing local variables such as <strong>name</strong>, <strong>expected_type</strong>, and <strong>storage_name</strong>, that is fine—those values are held behind the scenes in a closure.</p><p>This recipe can be tweaked in an interesting manner using the <strong>functools.partial()</strong> function.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line">String = partial(typed_property, expected_type=str)</span><br><span class="line">Integer = partial(typed_property, expected_type=int)</span><br><span class="line"><span class="comment"># Example:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name = String(<span class="string">'name'</span>)</span><br><span class="line">    age = Integer(<span class="string">'age'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br></pre></td></tr></table></figure><h2 id="Defining-Context-Managers-the-Easy-Way"><a href="#Defining-Context-Managers-the-Easy-Way" class="headerlink" title="Defining Context Managers the Easy Way"></a>Defining Context Managers the Easy Way</h2><p>One of the most straightforward ways to write a new context manager is to use the <strong>@contextmanager</strong> decorator in the <strong>contextlib</strong> module.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> time</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@contextmanager</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">timtethis</span><span class="params">(label)</span>:</span></span><br><span class="line"><span class="meta">... </span>    start= time.time()</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">yield</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">finally</span>:</span><br><span class="line"><span class="meta">... </span>        end=time.time()</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'&#123;&#125;: &#123;&#125;'</span>.format(label, end- start))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> timtethis(<span class="string">'counting'</span>):</span><br><span class="line"><span class="meta">... </span>    n= <span class="number">100000</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>        n -= <span class="number">1</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line">counting: <span class="number">0.014844417572021484</span></span><br></pre></td></tr></table></figure><p>In the <strong>timethis()</strong> function, all of the code prior to the yield executes as the <strong>__enter__()</strong> method of a context manager. All of the code after the yield executes as the <strong>__exit__()</strong> method. If there was an exception, it is raised at the <strong>yield</strong> statement.</p><p>Here is a slightly more advanced context manager that implements a kind of transaction on a list object:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>@contextmanager</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">list_transaction</span><span class="params">(orig_list)</span>:</span></span><br><span class="line"><span class="meta">... </span>    working= list(orig_list)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">yield</span> working</span><br><span class="line"><span class="meta">... </span>    orig_list[:]= working</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> list_transaction(items) <span class="keyword">as</span> working:</span><br><span class="line"><span class="meta">... </span>    working.append(<span class="number">4</span>)</span><br><span class="line"><span class="meta">... </span>    working.append(<span class="number">5</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p>Normally, to write a context manager, you define a class with an <strong>__enter__()</strong> and <strong>__exit__()</strong> method:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">timethis</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, label)</span>:</span></span><br><span class="line">        self.label = label</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.start = time.time()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_ty, exc_val, exc_tb)</span>:</span></span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">'&#123;&#125;: &#123;&#125;'</span>.format(self.label, end - self.start))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Putting-a-Wrapper-Around-a-Function&quot;&gt;&lt;a href=&quot;#Putting-a-Wrapper-Around-a-Function&quot; class=&quot;headerlink&quot; title=&quot;Putting a Wrapper Around a Function&quot;&gt;&lt;/a&gt;Putting a Wrapper Around a Function&lt;/h2&gt;&lt;p&gt;If you ever need to wrap a function with extra code, define a decorator function. &lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; functools &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; wraps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;timethis&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(func)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    @wraps(func)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*args, **kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;        start= time.time()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;        result= func(*args, **kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;        end= time.time()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;        print(func.__name__, end- start)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; wrapper&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C08_Classes_and_Objects</title>
    <link href="blog.whistlestop.ml/2018/12/15/C08-Classes-and-Objects/"/>
    <id>blog.whistlestop.ml/2018/12/15/C08-Classes-and-Objects/</id>
    <published>2018-12-15T10:45:58.000Z</published>
    <updated>2018-12-15T11:12:02.968Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Changing-the-String-Representation-of-Instances"><a href="#Changing-the-String-Representation-of-Instances" class="headerlink" title="Changing the String Representation of Instances"></a>Changing the String Representation of Instances</h2><p>To change the string representation of an instance, define the <strong>__str__()</strong> and <strong>__repr__()</strong> methods.<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Pair</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.x= x</span><br><span class="line"><span class="meta">... </span>        self.y =y</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">'Pair(&#123;0.x!r&#125;, &#123;0.y!r&#125;)'</span>.format(self)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">'(&#123;0.x!s&#125;, &#123;0.y!s&#125;)'</span>.format(self)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p= Pair(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p</span><br><span class="line">Pair(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(p)</span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'p is &#123;0!r&#125;'</span>.format(p))</span><br><span class="line">p <span class="keyword">is</span> Pair(<span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure></p><p>Specifically, the special <strong>!r</strong> formatting code indicates that the output of  <strong>__repr__()</strong> should be used instead of <strong>__str__()</strong>.</p><p>The use of format() in the solution might look a little funny, but the format code <strong>{0.x}</strong> specifies the x-attribute of argument 0.</p><h2 id="Customizing-String-Formatting"><a href="#Customizing-String-Formatting" class="headerlink" title="Customizing String Formatting"></a>Customizing String Formatting</h2><p>To customize string formatting, define the <strong>__format__()</strong> method on a class. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>_formats = &#123;</span><br><span class="line"><span class="meta">... </span> <span class="string">'ymd'</span> : <span class="string">'&#123;d.year&#125;-&#123;d.month&#125;-&#123;d.day&#125;'</span>,</span><br><span class="line"><span class="meta">... </span> <span class="string">'mdy'</span> : <span class="string">'&#123;d.month&#125;/&#123;d.day&#125;/&#123;d.year&#125;'</span>,</span><br><span class="line"><span class="meta">... </span> <span class="string">'dmy'</span> : <span class="string">'&#123;d.day&#125;/&#123;d.month&#125;/&#123;d.year&#125;'</span></span><br><span class="line"><span class="meta">... </span> &#125;</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Date</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, year, month, day)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.year= year</span><br><span class="line"><span class="meta">... </span>        self.month= month</span><br><span class="line"><span class="meta">... </span>        self.day= day</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__format__</span><span class="params">(self,code)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> code == <span class="string">''</span>:</span><br><span class="line"><span class="meta">... </span>            code= <span class="string">'ymd'</span></span><br><span class="line"><span class="meta">... </span>        fmt= _formats[code]</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> fmt.format(d= self)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Instances of the <strong>Date</strong> class now support formatting operations such as the following:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d= Date(<span class="number">2012</span>,<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>format(d)</span><br><span class="line"><span class="string">'2012-3-5'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>format(d,<span class="string">'mdy'</span>)</span><br><span class="line"><span class="string">'3/5/2012'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'The date is &#123;:ymd&#125;'</span>.format(d)</span><br><span class="line"><span class="string">'The date is 2012-3-5'</span></span><br></pre></td></tr></table></figure><p>The <strong>__format__()</strong> method provides a hook into Python’s string formatting functionality. It’s important to emphasize that the interpretation of format codes is entirely up to the class itself. Thus, the codes can be almost anything at all. </p><h2 id="Making-Objects-Support-the-Context-Management-Protocol"><a href="#Making-Objects-Support-the-Context-Management-Protocol" class="headerlink" title="Making Objects Support the Context-Management Protocol"></a>Making Objects Support the Context-Management Protocol</h2><p>In order to make an object compatible with the with statement, you need to implement <strong>__enter__()</strong> and <strong>__exit__()</strong> methods</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket, AF_INET, SOCK_STREAM</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">LazyConnection</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, address, family= AF_INET, type= SOCK_STREAM)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.address= address</span><br><span class="line"><span class="meta">... </span>        self.family= AF_INET</span><br><span class="line"><span class="meta">... </span>        self.type= SOCK_STREAM</span><br><span class="line"><span class="meta">... </span>        self.sock= <span class="keyword">None</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> self.sock <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">raise</span> RuntimeError(<span class="string">'Already connected'</span>)</span><br><span class="line"><span class="meta">... </span>        self.sock= socket(self.family, self.type)</span><br><span class="line"><span class="meta">... </span>        self.sock.connect(self.address)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self.sock</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_ty, exc_val, tb)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.sock.close()</span><br><span class="line"><span class="meta">... </span>        self.sock= <span class="keyword">None</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>The key feature of this class is that it represents a network connection, but it doesn’t actually do anything initially (e.g., it doesn’t establish a connection). Instead, the connection is established and closed using the <strong>with</strong> statement.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cnn= LazyConnection((<span class="string">'www.python.org'</span>, <span class="number">80</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> cnn <span class="keyword">as</span> s:</span><br><span class="line"><span class="meta">... </span>    s.send(<span class="string">b'GET /index.html HTTP/1.0\r\n'</span>)</span><br><span class="line"><span class="meta">... </span>    s.send(<span class="string">b'\r\n'</span>)</span><br><span class="line"><span class="meta">... </span>    resp = <span class="string">b''</span>.join(iter(partial(s.recv, <span class="number">8192</span>), <span class="string">b''</span>))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">26</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>In fact, the three arguments to the <strong>__exit__()</strong> method contain the exception type, value, and traceback for pending exceptions (if any). The <strong>__exit__()</strong> method can choose to use the exception information in some way or to ignore it by doing nothing and returning <strong>None</strong> as a result. If <strong>__exit__()</strong> returns <strong>True</strong>, the exception is cleared as if nothing happened and the program continues executing statements immediately after the with block.</p><p>One subtle aspect of this recipe is whether or not the <strong>LazyConnection</strong> class allows nested use of the connection with multiple with statements. You can work around this limitation with a slightly different implementation, as shown here:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">LazyConnection</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, address, family= AF_INET, type= SOCK_STREAM)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.address= address</span><br><span class="line"><span class="meta">... </span>        self.family= AF_INET</span><br><span class="line"><span class="meta">... </span>        self.type= SOCK_STREAM</span><br><span class="line"><span class="meta">... </span>        self.connections= []</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        sock= socket(self.family, self.type)</span><br><span class="line"><span class="meta">... </span>        sock.connect(self.address)</span><br><span class="line"><span class="meta">... </span>        self.connections.append(sock)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> sock</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_ty, exc_val, tb)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.connections.pop().close()</span><br><span class="line"><span class="meta">... </span>        </span><br><span class="line"><span class="meta">... </span></span><br><span class="line">conn = LazyConnection((<span class="string">'www.python.org'</span>, <span class="number">80</span>))</span><br><span class="line"><span class="keyword">with</span> conn <span class="keyword">as</span> s1:</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">with</span> conn <span class="keyword">as</span> s2:</span><br><span class="line">        ...</span><br><span class="line">         <span class="comment"># s1 and s2 are independent sockets</span></span><br></pre></td></tr></table></figure><h2 id="Saving-Memory-When-Creating-a-Large-Number-of-Instances"><a href="#Saving-Memory-When-Creating-a-Large-Number-of-Instances" class="headerlink" title="Saving Memory When Creating a Large Number of Instances"></a>Saving Memory When Creating a Large Number of Instances</h2><p>For classes that primarily serve as simple data structures, you can often greatly reduce the memory footprint of instances by adding the <strong>__slots__</strong> attribute to the class definition.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; <span class="class"><span class="keyword">class</span> <span class="title">Date</span>:</span></span><br><span class="line"><span class="meta">... </span>    __slots__=[<span class="string">'year'</span>, <span class="string">'month'</span>,<span class="string">'day'</span>]</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, year, month, day)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.year= year</span><br><span class="line"><span class="meta">... </span>        self.month= month</span><br><span class="line"><span class="meta">... </span>        self.day= day</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=Date(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&lt;__main__.Date object at <span class="number">0x010C0D50</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.exp=<span class="number">4</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'Date'</span> object has no attribute <span class="string">'exp'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.__dict__</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'Date'</span> object has no attribute <span class="string">'__dict__'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>vars(d)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: vars() argument must have __dict__ attribute</span><br></pre></td></tr></table></figure><p> A side effect of using slots is that it is no longer possible to add new attributes to instances—you are restricted to only those attribute names listed in the <strong>__slots__</strong> specifier.</p><h2 id="Encapsulating-Names-in-a-Class"><a href="#Encapsulating-Names-in-a-Class" class="headerlink" title="Encapsulating Names in a Class"></a>Encapsulating Names in a Class</h2><p>Rather than relying on language features to encapsulate data, Python programmers are expected to observe certain naming conventions concerning the intended usage of data and methods. The first convention is that any name that starts with a single leading underscore (<strong>_</strong>) should always be assumed to be internal implementation.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._internal = <span class="number">0</span> <span class="comment"># An internal attribute</span></span><br><span class="line">        self.public = <span class="number">1</span> <span class="comment"># A public attribute</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">public_method</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        A public method</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">         ...</span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">_internal_method</span><span class="params">(self)</span>:</span></span><br><span class="line">         ...</span><br></pre></td></tr></table></figure><p>Python doesn’t actually prevent someone from accessing internal names. However, doing so is considered impolite, and may result in fragile code. It should be noted, too, that the use of the leading underscore is also used for module names and module-level functions. For example, if you ever see a module name that starts with a leading underscore (e.g., <strong>_socket</strong>), it’s internal implementation. </p><p>You may also encounter the use of two leading underscores (<strong>__</strong>) on names within class definitions. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__private = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__private_method</span><span class="params">(self)</span>:</span></span><br><span class="line">         ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">public_method</span><span class="params">(self)</span>:</span></span><br><span class="line">        ...</span><br><span class="line">        self.__private_method()</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>The use of double leading underscores causes the name to be mangled to something else. Specifically, the private attributes in the preceding class get renamed to <strong>_B__private</strong> and <strong>_B__private_method</strong>, respectively. At this point, you might ask what purpose such name mangling serves. The answer is inheritance—such attributes cannot be overridden via inheritance.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(B)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.__private = <span class="number">1</span> <span class="comment"># Does not override B.__private</span></span><br><span class="line">    <span class="comment"># Does not override B.__private_method()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__private_method</span><span class="params">(self)</span>:</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></p><p>Here, the private names <strong>__private</strong> and <strong>__private_method</strong> get renamed to <strong>_C__private</strong> and <strong>_C__private_method</strong>, which are different than the mangled names in the base class <strong>B</strong>.</p><h2 id="Creating-Managed-Attributes"><a href="#Creating-Managed-Attributes" class="headerlink" title="Creating Managed Attributes"></a>Creating Managed Attributes</h2><p>A simple way to customize access to an attribute is to define it as a “property.” </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, first_name)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.first_name= first_name</span><br><span class="line"><span class="meta">... </span>    @property</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">first_name</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self._first_name</span><br><span class="line"><span class="meta">... </span>    @first_name.setter</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">first_name</span><span class="params">(self,value)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, str):</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">raise</span> TypeError(<span class="string">'Expected a string'</span>)</span><br><span class="line"><span class="meta">... </span>        self._first_name= value</span><br><span class="line"><span class="meta">... </span>    @first_name.deleter</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">first_name</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">raise</span> AttributeError(<span class="string">'Can not delete attribute'</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = Person(<span class="string">'Guido'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.first_name</span><br><span class="line"><span class="string">'Guido'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.first_name=<span class="number">42</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">10</span>, <span class="keyword">in</span> first_name</span><br><span class="line">TypeError: Expected a string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a.first_name</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">14</span>, <span class="keyword">in</span> first_name</span><br><span class="line">AttributeError: Can <span class="keyword">not</span> delete attribute</span><br></pre></td></tr></table></figure><p>When implementing a property, the underlying data (if any) still needs to be stored somewhere. Thus, in the get and set methods, you see direct manipulation of a <strong>_first_name</strong> attribute, which is where the actual data lives. In addition, you may ask why the <strong>__init__()</strong> method sets <strong>self.first_name</strong> instead of <strong>self._first_name</strong>. In this example, the entire point of the property is to apply type checking when setting an attribute. Thus, chances are you would also want such checking to take place during initialization. By setting <strong>self.first_name</strong>, the set operation uses the setter method (as opposed to bypassing it by accessing <strong>self._first_name</strong>).</p><p>A property attribute is actually a collection of methods bundled together. If you inspect a class with a property, you can find the raw methods in the <strong>fget</strong>, <strong>fset</strong>, and <strong>fdel</strong> attributes of the property itself. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Person.first_name.fget</span><br><span class="line">&lt;function Person.first_name at <span class="number">0x1006a60e0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Person.first_name.fset</span><br><span class="line">&lt;function Person.first_name at <span class="number">0x1006a6170</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Person.first_name.fdel</span><br><span class="line">&lt;function Person.first_name at <span class="number">0x1006a62e0</span>&gt;</span><br></pre></td></tr></table></figure><p>Properties can also be a way to define computed attributes. These are attributes that are not actually stored, but computed on demand. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, radius)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.radius= radius</span><br><span class="line"><span class="meta">... </span>    @property</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> math.pi * self.radius ** <span class="number">2</span></span><br><span class="line"><span class="meta">... </span>    @property</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">perimeter</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="number">2</span> * math.pi * self.radius</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c= Circle(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.radius</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.area</span><br><span class="line"><span class="number">28.274333882308138</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.area= <span class="number">4</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: can<span class="string">'t set attribute</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>Don’t write Python code that features a lot of repetitive property definitions. For example:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, first_name, last_name)</span>:</span></span><br><span class="line">        self.first_name = first_name</span><br><span class="line">        self.last_name = last_name</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">first_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._first_name</span><br><span class="line"><span class="meta">    @first_name.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">first_name</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, str):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'Expected a string'</span>)</span><br><span class="line">        self._first_name = value</span><br><span class="line">    <span class="comment"># Repeated property code, but for a different name (bad!)</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">last_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._last_name</span><br><span class="line"><span class="meta">    @last_name.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">last_name</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, str):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'Expected a string'</span>)</span><br><span class="line">        self._last_name = value</span><br></pre></td></tr></table></figure></p><p>Code repetition leads to bloated, error prone, and ugly code. As it turns out, there are much better ways to achieve the same thing using descriptors or closures. </p><h2 id="Calling-a-Method-on-a-Parent-Class"><a href="#Calling-a-Method-on-a-Parent-Class" class="headerlink" title="Calling a Method on a Parent Class"></a>Calling a Method on a Parent Class</h2><p>To call a method in a parent (or superclass), use the super() function. A very common use of <strong>super()</strong> is in the handling of the <strong>__init__()</strong> method to make sure that parents are properly initialized:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.x = <span class="number">0</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.y = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>Another common use of <strong>super()</strong> is in code that overrides any of Python’s special methods. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        self._obj = obj</span><br><span class="line">    <span class="comment"># Delegate attribute lookup to internal obj</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> getattr(self._obj, name)</span><br><span class="line">    <span class="comment"># Delegate attribute assignment</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> name.startswith(<span class="string">'_'</span>):</span><br><span class="line">            super().__setattr__(name, value) <span class="comment"># Call original __setattr__</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            setattr(self._obj, name, value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Base.__init__'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        print(<span class="string">'A.__init__'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        print(<span class="string">'B.__init__'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A,B)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__() <span class="comment"># Only one call to super() here</span></span><br><span class="line">        print(<span class="string">'C.__init__'</span>)</span><br></pre></td></tr></table></figure><p>You’ll find that each <strong>__init__()</strong> method only gets called once:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = C()</span><br><span class="line">Base.__init__</span><br><span class="line">B.__init__</span><br><span class="line">A.__init__</span><br><span class="line">C.__init__</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>For every class that you define, Python computes what’s known as a method resolution order (MRO) list. The MRO list is simply a linear ordering of all the base classes. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>C.__mro__</span><br><span class="line">(&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;,</span><br><span class="line">&lt;class '__main__.Base'&gt;, &lt;class 'object'&gt;)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>When you use the <strong>super()</strong> function, Python continues its search starting with the next class on the MRO. As long as every redefined method consistently uses <strong>super()</strong> and only calls it once, control will ultimately work its way through the entire MRO list and each method will only be called once. </p><p>A somewhat surprising aspect of <strong>super()</strong> is that it doesn’t necessarily go to the direct parent of a class next in the MRO and that you can even use it in a class with no direct parent at all. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'A.spam'</span>)</span><br><span class="line">        super().spam()</span><br></pre></td></tr></table></figure><p>If you try to use this class, you’ll find that it’s completely broken:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = A()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.spam()</span><br><span class="line">A.spam</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">4</span>, <span class="keyword">in</span> spam</span><br><span class="line">AttributeError: <span class="string">'super'</span> object has no attribute <span class="string">'spam'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>Watch what happens if you start using the class with multiple inheritance:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'B.spam'</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A,B)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = C()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.spam()</span><br><span class="line">A.spam</span><br><span class="line">B.spam</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>Here you see that the use of <strong>super().spam()</strong> in class A has, in fact, called the <strong>spam()</strong> method in class <strong>B</strong>—a class that is completely unrelated to <strong>A</strong>! This is all explained by the MRO of class <strong>C</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>C.__mro__</span><br><span class="line">(&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;,</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">object</span>'&gt;)</span></span><br><span class="line"><span class="class">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Extending-a-Property-in-a-Subclass"><a href="#Extending-a-Property-in-a-Subclass" class="headerlink" title="Extending a Property in a Subclass"></a>Extending a Property in a Subclass</h2><p>Within a subclass, you want to extend the functionality of a property defined in a parent class.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.name= name</span><br><span class="line"><span class="meta">... </span>    @property</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self._name</span><br><span class="line"><span class="meta">... </span>    @name.setter</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self, value)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, str):</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">raise</span> TypeError(<span class="string">'Expected a string'</span>)</span><br><span class="line"><span class="meta">... </span>        self._name = value</span><br><span class="line"><span class="meta">... </span>    @name.deleter</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">raise</span> AttributeError(<span class="string">'Can not delete attribute'</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Here is an example of a class that inherits from <strong>Person</strong> and extends the <strong>name</strong> property with new functionality.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">SubPerson</span><span class="params">(Person)</span>:</span></span><br><span class="line"><span class="meta">... </span>    @property</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Getting name'</span>)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> super().name</span><br><span class="line"><span class="meta">... </span>    @name.setter</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self, value)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Setting name to '</span>, value)</span><br><span class="line"><span class="meta">... </span>        super(SubPerson, SubPerson).name.__set__(self, value)</span><br><span class="line"><span class="meta">... </span>    @name.deleter</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Deleting name'</span>)</span><br><span class="line"><span class="meta">... </span>        super(SubPerson, SubPerson).name.__delete__(self)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Here is an example of the new class in use:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = SubPerson(<span class="string">'Guido'</span>)</span><br><span class="line">Setting name to Guido</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name</span><br><span class="line">Getting name</span><br><span class="line"><span class="string">'Guido'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">'Larry'</span></span><br><span class="line">Setting name to Larry</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="number">42</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"> File <span class="string">"example.py"</span>, line <span class="number">16</span>, <span class="keyword">in</span> name</span><br><span class="line"> <span class="keyword">raise</span> TypeError(<span class="string">'Expected a string'</span>)</span><br><span class="line">TypeError: Expected a string</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p> The use of <strong>super(SubPerson, SubPerson).name.__set__(self, value)</strong> in the setter function is no mistake. To delegate to the previous implementation of the setter, control needs to pass through the <strong>__set__()</strong> method of the previously defined name property. However, the only way to get to this method is to access it as a class variable instead of an instance variable. This is what happens with the <strong>super(SubPerson, SubPerson)</strong> operation.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">SubPerson</span><span class="params">(Person)</span>:</span></span><br><span class="line"><span class="meta">... </span>    @Person.name.getter</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Getting name'</span>)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> super().name</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>When you do this, all of the previously defined methods of the property are copied, and the getter function is replaced. It now works as expected:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = SubPerson(<span class="string">'Guido'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name</span><br><span class="line">Getting name</span><br><span class="line"><span class="string">'Guido'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">'Larry'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name</span><br><span class="line">Getting name</span><br><span class="line"><span class="string">'Larry'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="number">42</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"> File <span class="string">"example.py"</span>, line <span class="number">16</span>, <span class="keyword">in</span> name</span><br><span class="line"> <span class="keyword">raise</span> TypeError(<span class="string">'Expected a string'</span>)</span><br><span class="line">TypeError: Expected a string</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>It’s worth noting that the first technique shown in this recipe can also be used to extend a descriptor.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">String</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.name= name</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, cls)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> self</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> instance.__dict__[self.name]</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, str):</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">raise</span> TypeError(<span class="string">'Expected a string'</span>)</span><br><span class="line"><span class="meta">... </span>        instance.__dict__[self.name]= value</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line"><span class="meta">... </span>    name= String(<span class="string">'name'</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.name= name</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">SubPerson</span><span class="params">(Person)</span>:</span></span><br><span class="line"><span class="meta">... </span>    @property</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Getting name'</span>)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> super().name</span><br><span class="line"><span class="meta">... </span>    @name.setter</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self, value)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Setting name to'</span>, value)</span><br><span class="line"><span class="meta">... </span>        super(SubPerson, SubPerson).name.__set__(self, value)</span><br><span class="line"><span class="meta">... </span>    @name.deleter</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Deleting name'</span>)</span><br><span class="line"><span class="meta">... </span>        super(SubPerson, SubPerson).name.__delete__(self)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s= SubPerson(<span class="string">'gu'</span>)</span><br><span class="line">Setting name to gu</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name=<span class="string">'rr'</span></span><br><span class="line">Setting name to rr</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Creating-a-New-Kind-of-Class-or-Instance-Attribute"><a href="#Creating-a-New-Kind-of-Class-or-Instance-Attribute" class="headerlink" title="Creating a New Kind of Class or Instance Attribute"></a>Creating a New Kind of Class or Instance Attribute</h2><p>If you want to create an entirely new kind of instance attribute, define its functionality in the form of a descriptor class. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Descriptor attribute for an integer type-checked attribute</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Integer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, cls)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> instance.__dict__[self.name]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, int):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'Expected an int'</span>)</span><br><span class="line">        instance.__dict__[self.name] = value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, instance)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> instance.__dict__[self.name]</span><br></pre></td></tr></table></figure><p>A descriptor is a class that implements the three core attribute access operations (<strong>get</strong>, <strong>set</strong>, and <strong>delete</strong>) in the form of <strong>__get__()</strong>, <strong>__set__()</strong>, and <strong>__delete__()</strong> special methods. These methods work by receiving an instance as input. The underlying dictionary of the instance is then manipulated as appropriate.</p><p>To use a descriptor, instances of the descriptor are placed into a class definition as class variables. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>:</span></span><br><span class="line">    x = Integer(<span class="string">'x'</span>)</span><br><span class="line">    y = Integer(<span class="string">'y'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Point(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.x <span class="comment"># Calls Point.x.__get__(p,Point)</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.y = <span class="number">5</span> <span class="comment"># Calls Point.y.__set__(p, 5)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.x = <span class="number">2.3</span> <span class="comment"># Calls Point.x.__set__(p, 2.3)</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"> File <span class="string">"descrip.py"</span>, line <span class="number">12</span>, <span class="keyword">in</span> __set__</span><br><span class="line"> <span class="keyword">raise</span> TypeError(<span class="string">'Expected an int'</span>)</span><br><span class="line">TypeError: Expected an int</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>As input, each method of a descriptor receives the instance being manipulated. To carry out the requested operation, the underlying instance dictionary (the <strong>__dict__</strong> attribute) is manipulated as appropriate. The <strong>self.name</strong> attribute of the descriptor holds the dictionary key being used to store the actual data in the instance dictionary.</p><p>The implementation of the <strong>__get__()</strong> method is trickier than it seems:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Descriptor attribute for an integer type-checked attribute</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Integer</span>:</span></span><br><span class="line">    ...</span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, cls)</span>:</span></span><br><span class="line">         <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">             <span class="keyword">return</span> self</span><br><span class="line">         <span class="keyword">else</span>:</span><br><span class="line">             <span class="keyword">return</span> instance.__dict__[self.name]</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure><p>The reason <strong>__get__()</strong> looks somewhat complicated is to account for the distinction between instance variables and class variables. If a descriptor is accessed as a class variable, the instance argument is set to None. In this case, it is standard practice to simply return the descriptor instance itself.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typed</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, expected_type)</span>:</span></span><br><span class="line">        self.name= name</span><br><span class="line">        self.expected_type= expected_type</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, cls)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> instance.__dict__[self.name]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, self.expected_type):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'Expected '</span>+ str(self.expected_type))</span><br><span class="line">        instance.__dict__[self.name]= value</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">typeassert</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> name, expected_type <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            setattr(cls, name, Typed(name, expected_type))</span><br><span class="line">        <span class="keyword">return</span> cls</span><br><span class="line">    <span class="keyword">return</span> decorate</span><br><span class="line"><span class="meta">@typeassert(name= str, shares= int, price= float)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stock</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, shares, price)</span>:</span></span><br><span class="line">        self.name= name</span><br><span class="line">        self.shares= shares</span><br><span class="line">        self.price= price</span><br></pre></td></tr></table></figure><p>Finally, it should be stressed that you would probably not write a descriptor if you simply want to customize the access of a single attribute of a specific class. For that, it’s easier to use a property instead. Descriptors are more useful in situations where there will be a lot of code reuse.</p><h2 id="Using-Lazily-Computed-Properties"><a href="#Using-Lazily-Computed-Properties" class="headerlink" title="Using Lazily Computed Properties"></a>Using Lazily Computed Properties</h2><p>You’d like to define a read-only attribute as a property that only gets computed on access. However, once accessed, you’d like the value to be cached and not recomputed on each access.</p><p>An efficient way to define a lazy attribute is through the use of a descriptor class.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">lazyproperty</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.func= func</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, cls)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> self</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>            value= self.func(instance)</span><br><span class="line"><span class="meta">... </span>            setattr(instance, self.func.__name__, value)</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> value</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>To utilize this code, you would use it in a class such as the following:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> math</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Circle</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, radius)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.radius= radius</span><br><span class="line"><span class="meta">... </span>    @lazyproperty</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Computing area'</span>)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> math.pi * self.radius ** <span class="number">2</span></span><br><span class="line"><span class="meta">... </span>    @lazyproperty</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">perimeter</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Computing perimeter'</span>)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="number">2</span> * math.pi * self.radius</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>An interactive session that illustrates how it works:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Circle(<span class="number">4.0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.radius</span><br><span class="line"><span class="number">4.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.area</span><br><span class="line">Computing area</span><br><span class="line"><span class="number">50.26548245743669</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.area</span><br><span class="line"><span class="number">50.26548245743669</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.perimeter</span><br><span class="line">Computing perimeter</span><br><span class="line"><span class="number">25.132741228718345</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.perimeter</span><br><span class="line"><span class="number">25.132741228718345</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>When a descriptor is placed into a class definition, its <strong>__get__()</strong>, <strong>__set__()</strong>, and <strong>__delete__()</strong> methods get triggered on attribute access. However, if a descriptor only defines a <strong>__get__()</strong> method, it has a much weaker binding than usual. In particular, the<strong>__get__()</strong> method only fires if the attribute being accessed is not in the underlying instance dictionary.</p><p>One possible downside to this recipe is that the computed value becomes mutable after it’s created. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.area</span><br><span class="line">Computing area</span><br><span class="line"><span class="number">50.26548245743669</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.area = <span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.area</span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure><p>You can use a slightly less efficient implementation:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">lazyproperty</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">... </span>    name= <span class="string">'_lazy_'</span>+ func.__name__</span><br><span class="line"><span class="meta">... </span>    @property</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">lazy</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> hasattr(self, name):</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> getattr(self, name)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>            value= func(self)</span><br><span class="line"><span class="meta">... </span>            setattr(self, name, value)</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> value</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> lazy</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c= Circle(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.area</span><br><span class="line">Computing area</span><br><span class="line"><span class="number">50.26548245743669</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.area</span><br><span class="line"><span class="number">50.26548245743669</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c._lazy_area</span><br><span class="line"><span class="number">50.26548245743669</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c._lazy_area= <span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.area</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.area=<span class="number">45</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: can<span class="string">'t set attribute</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Simplifying-the-Initialization-of-Data-Structures"><a href="#Simplifying-the-Initialization-of-Data-Structures" class="headerlink" title="Simplifying the Initialization of Data Structures"></a>Simplifying the Initialization of Data Structures</h2><p>You can often generalize the initialization of data structures into a single <strong>__init__()</strong> function defined in a common base class.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Structure</span>:</span></span><br><span class="line"><span class="meta">... </span>    _fields= []</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> len(args) != len(self._fields):</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">raise</span> TypeError(<span class="string">'Expected &#123;&#125; arguments'</span>.format(len(self._fields)))</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">for</span> name, value <span class="keyword">in</span> zip(self._fields, args):</span><br><span class="line"><span class="meta">... </span>            setattr(self, name, value)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Stock</span><span class="params">(Structure)</span>:</span></span><br><span class="line"><span class="meta">... </span>    _fields= [<span class="string">'name'</span>, <span class="string">'shares'</span>, <span class="string">'price'</span>]</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Points</span><span class="params">(Structure)</span>:</span></span><br><span class="line"><span class="meta">... </span>    _fields= [<span class="string">'x'</span>, <span class="string">'y'</span>]</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Circle</span><span class="params">(Structure)</span>:</span></span><br><span class="line"><span class="meta">... </span>    _fields=[<span class="string">'radius'</span>]</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> math.pi * self.radius ** <span class="number">2</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s= Stock(<span class="string">'Acme'</span>, <span class="number">80</span>, <span class="number">90</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=Circle(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.area()</span><br><span class="line"><span class="number">28.274333882308138</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s= Stock(<span class="string">'Acme'</span>, <span class="number">80</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">5</span>, <span class="keyword">in</span> __init__</span><br><span class="line">TypeError: Expected <span class="number">3</span> arguments</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>This technique of defining a general purpose <strong>__init__()</strong> method can be extremely useful if you’re ever writing a program built around a large number of small data structures.</p><p>One subtle aspect of the implementation concerns the mechanism used to set value using the <strong>setattr()</strong> function. Instead of doing that, you might be inclined to directly access the instance dictionary. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Structure</span>:</span></span><br><span class="line">     <span class="comment"># Class variable that specifies expected fields</span></span><br><span class="line">    _fields= []</span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">         <span class="keyword">if</span> len(args) != len(self._fields):</span><br><span class="line">             <span class="keyword">raise</span> TypeError(<span class="string">'Expected &#123;&#125; arguments'</span>.format(len(self._fields)))</span><br><span class="line">         <span class="comment"># Set the arguments (alternate)</span></span><br><span class="line">         self.__dict__.update(zip(self._fields,args))</span><br></pre></td></tr></table></figure><p>Although this works, it’s often not safe to make assumptions about the implementation of a subclass. If a subclass decided to use <strong>__slots__</strong> or wrap a specific attribute with a property (or descriptor), directly acccessing the instance dictionary would break. </p><p>It should be noted that it is also possible to automatically initialize instance variables using a utility function and a so-called “frame hack.”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">init_fromlocals</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">... </span>    locs= sys._getframe(<span class="number">1</span>).f_locals</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> k, v <span class="keyword">in</span> locs.items():</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> k != <span class="string">'self'</span>:</span><br><span class="line"><span class="meta">... </span>            setattr(self, k, v)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Stock</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, shares, price)</span>:</span></span><br><span class="line"><span class="meta">... </span>        init_fromlocals(self)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>In this variation, the <strong>init_fromlocals()</strong> function uses <strong>sys._getframe()</strong> to peek at the local variables of the calling method. If used as the first step of an <strong>__init__()</strong> method, the local variables will be the same as the passed arguments and can be easily used to set attributes with the same names. Although this approach avoids the problem of getting the right calling signature in IDEs, it runs more than 50% slower than the solution provided in the recipe, requires more typing, and involves more sophisticated magic behind the scenes.</p><h2 id="Defining-an-Interface-or-Abstract-Base-Class"><a href="#Defining-an-Interface-or-Abstract-Base-Class" class="headerlink" title="Defining an Interface or Abstract Base Class"></a>Defining an Interface or Abstract Base Class</h2><p>You want to define a class that serves as an interface or abstract base class from which you can perform type checking and ensure that certain methods are implemented in subclasses.</p><p>To define an abstract base class, use the abc module. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">IStream</span><span class="params">(metaclass= ABCMeta)</span>:</span></span><br><span class="line"><span class="meta">... </span>    @abstractmethod</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(self, maxbytes= <span class="number">-1</span>)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span>    @abstractmethod</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(self, data)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=IStream()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: Can<span class="string">'t instantiate abstract class IStream with abstract methods read, write</span></span><br></pre></td></tr></table></figure><p>ABCs allow other classes to be registered as implementing the required interface. For example, you can do this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="comment"># Register the built-in I/O classes as supporting our interface</span></span><br><span class="line">IStream.register(io.IOBase)</span><br><span class="line"><span class="comment"># Open a normal file and type check</span></span><br><span class="line">f = open(<span class="string">'foo.txt'</span>)</span><br><span class="line">isinstance(f, IStream) <span class="comment"># Returns True</span></span><br></pre></td></tr></table></figure><p>It should be noted that <strong>@abstractmethod</strong> can also be applied to static methods, class methods, and properties. You just need to make sure you apply it in the proper sequence where <strong>@abstractmethod</strong> appears immediately before the function definition.</p><p>Predefined abstract base classes are found in various places in the standard library. The <strong>collections</strong> module defines a variety of ABCs related to containers and iterators (sequences, mappings, sets, etc.), the <strong>numbers</strong> library defines ABCs related to numeric objects (integers, floats, rationals, etc.), and the <strong>io</strong> library defines ABCs related to I/O handling.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="comment"># Check if x is a sequence</span></span><br><span class="line"><span class="keyword">if</span> isinstance(x, collections.Sequence):</span><br><span class="line">    ...</span><br><span class="line"><span class="comment"># Check if x is iterable</span></span><br><span class="line"><span class="keyword">if</span> isinstance(x, collections.Iterable):</span><br><span class="line">     ...</span><br><span class="line"><span class="comment"># Check if x has a size</span></span><br><span class="line"><span class="keyword">if</span> isinstance(x, collections.Sized):</span><br><span class="line">     ...</span><br><span class="line"><span class="comment"># Check if x is a mapping</span></span><br><span class="line"><span class="keyword">if</span> isinstance(x, collections.Mapping):</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure></p><p>It should be noted that, as of this writing, certain library modules don’t make use of these predefined ABCs as you might expect. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"><span class="keyword">import</span> numbers</span><br><span class="line">x = Decimal(<span class="string">'3.4'</span>)</span><br><span class="line">isinstance(x, numbers.Real) <span class="comment"># Returns False</span></span><br></pre></td></tr></table></figure><h2 id="Implementing-a-Data-Model-or-Type-System"><a href="#Implementing-a-Data-Model-or-Type-System" class="headerlink" title="Implementing a Data Model or Type System"></a>Implementing a Data Model or Type System</h2><p>You want to define various kinds of data structures, but want to enforce constraints on the values that are allowed to be assigned to certain attributes.</p><p>The following code illustrates the use of descriptors to implement a system type and value checking framework:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Base class. Uses a descriptor to set a value</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Descriptor</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=None, **opts)</span>:</span></span><br><span class="line">         self.name = name</span><br><span class="line">         <span class="keyword">for</span> key, value <span class="keyword">in</span> opts.items():</span><br><span class="line">             setattr(self, key, value)</span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">         instance.__dict__[self.name] = value</span><br><span class="line"><span class="comment"># Descriptor for enforcing types</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typed</span><span class="params">(Descriptor)</span>:</span></span><br><span class="line">     expected_type = type(<span class="keyword">None</span>)</span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">         <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, self.expected_type):</span><br><span class="line">             <span class="keyword">raise</span> TypeError(<span class="string">'expected '</span> + str(self.expected_type))</span><br><span class="line">         super().__set__(instance, value)</span><br><span class="line"><span class="comment"># Descriptor for enforcing values</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unsigned</span><span class="params">(Descriptor)</span>:</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">         <span class="keyword">if</span> value &lt; <span class="number">0</span>:</span><br><span class="line">             <span class="keyword">raise</span> ValueError(<span class="string">'Expected &gt;= 0'</span>)</span><br><span class="line">         super().__set__(instance, value)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaxSized</span><span class="params">(Descriptor)</span>:</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=None, **opts)</span>:</span></span><br><span class="line">         <span class="keyword">if</span> <span class="string">'size'</span> <span class="keyword">not</span> <span class="keyword">in</span> opts:</span><br><span class="line">             <span class="keyword">raise</span> TypeError(<span class="string">'missing size option'</span>)</span><br><span class="line">         super().__init__(name, **opts)</span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">         <span class="keyword">if</span> len(value) &gt;= self.size:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'size must be &lt; '</span> + str(self.size))</span><br><span class="line">         super().__set__(instance, value)</span><br></pre></td></tr></table></figure><p>These classes should be viewed as basic building blocks from which you construct a data model or type system. Continuing, here is some code that implements some different kinds of data:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Integer</span><span class="params">(Typed)</span>:</span></span><br><span class="line">    expected_type = int</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnsignedInteger</span><span class="params">(Integer, Unsigned)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Float</span><span class="params">(Typed)</span>:</span></span><br><span class="line">    expected_type = float</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnsignedFloat</span><span class="params">(Float, Unsigned)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span><span class="params">(Typed)</span>:</span></span><br><span class="line">    expected_type = str</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SizedString</span><span class="params">(String, MaxSized)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>Using these type objects, it is now possible to define a class such as this: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stock</span>:</span></span><br><span class="line"> <span class="comment"># Specify constraints</span></span><br><span class="line">    name = SizedString(<span class="string">'name'</span>,size=<span class="number">8</span>)</span><br><span class="line">    shares = UnsignedInteger(<span class="string">'shares'</span>)</span><br><span class="line">    price = UnsignedFloat(<span class="string">'price'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, shares, price)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.shares = shares</span><br><span class="line">        self.price = price</span><br></pre></td></tr></table></figure><p>With the constraints in place, you’ll find that assigning of attributes is now validated. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Stock(<span class="string">'ACME'</span>, <span class="number">50</span>, <span class="number">91.1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.name</span><br><span class="line"><span class="string">'ACME'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.shares = <span class="number">75</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.shares = <span class="number">-10</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"> File <span class="string">"example.py"</span>, line <span class="number">17</span>, <span class="keyword">in</span> __set__</span><br><span class="line"> super().__set__(instance, value)</span><br><span class="line"> File <span class="string">"example.py"</span>, line <span class="number">23</span>, <span class="keyword">in</span> __set__</span><br><span class="line"> <span class="keyword">raise</span> ValueError(<span class="string">'Expected &gt;= 0'</span>)</span><br><span class="line">ValueError: Expected &gt;= <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.price = <span class="string">'a lot'</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"> File <span class="string">"example.py"</span>, line <span class="number">16</span>, <span class="keyword">in</span> __set__</span><br><span class="line"> <span class="keyword">raise</span> TypeError(<span class="string">'expected '</span> + str(self.expected_type))</span><br><span class="line">TypeError: expected &lt;<span class="class"><span class="keyword">class</span> '<span class="title">float</span>'&gt;</span></span><br><span class="line">&gt;&gt;&gt; s.name = 'ABRACADABRA'</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"> File <span class="string">"example.py"</span>, line <span class="number">17</span>, <span class="keyword">in</span> __set__</span><br><span class="line"> super().__set__(instance, value)</span><br><span class="line"> File <span class="string">"example.py"</span>, line <span class="number">35</span>, <span class="keyword">in</span> __set__</span><br><span class="line"> <span class="keyword">raise</span> ValueError(<span class="string">'size must be &lt; '</span> + str(self.size))</span><br><span class="line">ValueError: size must be &lt; <span class="number">8</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>There are some techniques that can be used to simplify the specification of constraints in classes. One approach is to use a class decorator, like this:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Class decorator to apply constraints</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_attributes</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> kwargs.items():</span><br><span class="line">            <span class="keyword">if</span> isinstance(value, Descriptor):</span><br><span class="line">                value.name = key</span><br><span class="line">                setattr(cls, key, value)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                setattr(cls, key, value(key))</span><br><span class="line">        <span class="keyword">return</span> cls</span><br><span class="line">    <span class="keyword">return</span> decorate</span><br><span class="line"><span class="comment"># Example</span></span><br><span class="line"><span class="meta">@check_attributes(name=SizedString(size=8), shares=UnsignedInteger, price=UnsignedFloat)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stock</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, shares, price)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.shares = shares</span><br><span class="line">        self.price = price</span><br></pre></td></tr></table></figure></p><p>Another approach to simplify the specification of constraints is to use a metaclass. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A metaclass that applies checking</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">checkedmeta</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, clsname, bases, methods)</span>:</span></span><br><span class="line">        <span class="comment"># Attach attribute names to the descriptors</span></span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> methods.items():</span><br><span class="line">            <span class="keyword">if</span> isinstance(value, Descriptor):</span><br><span class="line">                value.name = key</span><br><span class="line">        <span class="keyword">return</span> type.__new__(cls, clsname, bases, methods)</span><br><span class="line"><span class="comment"># Example</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stock</span><span class="params">(metaclass=checkedmeta)</span>:</span></span><br><span class="line">    name = SizedString(size=<span class="number">8</span>)</span><br><span class="line">    shares = UnsignedInteger()</span><br><span class="line">    price = UnsignedFloat()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, shares, price)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.shares = shares</span><br><span class="line">        self.price = price</span><br></pre></td></tr></table></figure><p>First, in the Descriptor base class, you will notice that there is a <strong>__set__()</strong> method, but no corresponding <strong>__get__()</strong>. If a descriptor will do nothing more than extract an identically named value from the underlying instance dictionary, defining <strong>__get__()</strong> is unnecessary. In fact, defining <strong>__get__()</strong> will just make it run slower. Thus, this recipe only focuses on the implementation of <strong>__set__()</strong>.</p><p>The overall design of the various descriptor classes is based on mixin classes. For example, the <strong>Unsigned</strong> and <strong>MaxSized</strong> classes are meant to be mixed with the other descriptor classes derived from <strong>Typed</strong>. To handle a specific kind of data type, multiple inheritance is used to combine the desired functionality.</p><p>The definitions of the various type classes such as <strong>Integer</strong>, <strong>Float</strong>, and <strong>String</strong> illustrate a useful technique of using class variables to customize an implementation. The <strong>Typed</strong> descriptor merely looks for an <strong>expected_type</strong> attribute that is provided by each of those subclasses.</p><p>As a final twist, a class decorator approach can also be used as a replacement for mixin classes, multiple inheritance, and tricky use of the <strong>super()</strong> function. Here is an alternative formulation of this recipe that uses class decorators:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Base class. Uses a descriptor to set a value</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Descriptor</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=None, **opts)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> opts.items():</span><br><span class="line">            setattr(self, key, value)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        instance.__dict__[self.name] = value</span><br><span class="line"><span class="comment"># Decorator for applying type checking</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Typed</span><span class="params">(expected_type, cls=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> cls <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">lambda</span> cls: Typed(expected_type, cls)</span><br><span class="line">    super_set = cls.__set__</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, expected_type):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'expected '</span> + str(expected_type))</span><br><span class="line">        super_set(self, instance, value)</span><br><span class="line">    cls.__set__ = __set__</span><br><span class="line">    <span class="keyword">return</span> cls</span><br><span class="line"><span class="comment"># Decorator for unsigned values</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Unsigned</span><span class="params">(cls)</span>:</span></span><br><span class="line">    super_set = cls.__set__</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'Expected &gt;= 0'</span>)</span><br><span class="line">        super_set(self, instance, value)</span><br><span class="line">    cls.__set__ = __set__</span><br><span class="line">    <span class="keyword">return</span> cls</span><br><span class="line"><span class="comment"># Decorator for allowing sized values</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MaxSized</span><span class="params">(cls)</span>:</span></span><br><span class="line">    super_init = cls.__init__</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=None, **opts)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'size'</span> <span class="keyword">not</span> <span class="keyword">in</span> opts:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'missing size option'</span>)</span><br><span class="line">        super_init(self, name, **opts)</span><br><span class="line">    cls.__init__ = __init__</span><br><span class="line">    super_set = cls.__set__</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(value) &gt;= self.size:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'size must be &lt; '</span> + str(self.size))</span><br><span class="line">        super_set(self, instance, value)</span><br><span class="line">    cls.__set__ = __set__</span><br><span class="line">    <span class="keyword">return</span> cls</span><br><span class="line"><span class="comment"># Specialized descriptors</span></span><br><span class="line"><span class="meta">@Typed(int)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Integer</span><span class="params">(Descriptor)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">@Unsigned</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnsignedInteger</span><span class="params">(Integer)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">@Typed(float)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Float</span><span class="params">(Descriptor)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">@Unsigned</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnsignedFloat</span><span class="params">(Float)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">@Typed(str)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">String</span><span class="params">(Descriptor)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">@MaxSized</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SizedString</span><span class="params">(String)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><h2 id="Implementing-Custom-Containers"><a href="#Implementing-Custom-Containers" class="headerlink" title="Implementing Custom Containers"></a>Implementing Custom Containers</h2><p>The collections library defines a variety of abstract base classes that are extremely useful when implementing custom container classes. To illustrate, suppose you want your class to support iteration. To do that, simply start by having it inherit from <strong>collections.Iterable</strong>, as follows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(collections.Iterable)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>The special feature about inheriting from collections.Iterable is that it ensures you implement all of the required special methods. If you don’t, you’ll get an error upon instantiation:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = A()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: Can<span class="string">'t instantiate abstract class A with abstract methods __iter__</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>Other notable classes defined in collections include <strong>Sequence</strong>, <strong>MutableSequence</strong>, <strong>Mapping</strong>, <strong>MutableMapping</strong>, <strong>Set</strong>, and <strong>MutableSet</strong>. Many of these classes form hierarchies with increasing levels of functionality (e.g., one such hierarchy is <strong>Container</strong>, <strong>Iterable</strong>, <strong>Sized</strong>, <strong>Sequence</strong>, and <strong>MutableSequence</strong>). Again, simply instantiate any of these classes to see what methods need to be implemented to make a custom container with that behavior:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> collections</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>collections.Sequence()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: Can<span class="string">'t instantiate abstract class Sequence with abstract methods \</span></span><br><span class="line"><span class="string">__getitem__, __len__</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>Here is a simple example of a class that implements the preceding methods to create a sequence where items are always stored in sorted order.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> bisect</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">SortedItems</span><span class="params">(collections.Sequence)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, initial= None)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self._items= sorted(initial) <span class="keyword">if</span> initial <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">else</span> []</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, index)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self._items[index]</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> len((self._items)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></span><br><span class="line"><span class="meta">... </span>        bisect.insort(self._items, item)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Here’s an example of using this class:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>items = SortedItems([<span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(items)</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items[<span class="number">0</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items[<span class="number">-1</span>]</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items.add(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(items)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items.add(<span class="number">-10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(items)</span><br><span class="line">[<span class="number">-10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> <span class="keyword">in</span> items</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(items)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> n <span class="keyword">in</span> items:</span><br><span class="line"><span class="meta">... </span>print(n)</span><br><span class="line">...</span><br><span class="line"><span class="number">-10</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>Inheriting from one of the abstract base classes in collections ensures that your custom container implements all of the required methods expected of the container. However, this inheritance also facilitates type checking.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items = SortedItems()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> collections</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(items, collections.Iterable)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(items, collections.Sequence)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(items, collections.Container)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(items, collections.Sized)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>isinstance(items, collections.Mapping)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>Many of the abstract base classes in <strong>collections</strong> also provide default implementations of common container methods. To illustrate, suppose you have a class that inherits from <strong>collections.MutableSequence</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Items</span><span class="params">(collections.MutableSequence)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, initial= None)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self._items= list(initial) <span class="keyword">if</span> initial <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">else</span> []</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, index)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Gettinh:'</span>, index)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self._items[index]</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, index, value)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Setting:'</span>, index, value)</span><br><span class="line"><span class="meta">... </span>        self._items[index]= value</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, index)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Deleting:'</span>, index)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">del</span> self._items[index]</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, index, value)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Inserting:'</span>, index, value)</span><br><span class="line"><span class="meta">... </span>        self._items.insert(index, value)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Len'</span>)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> len(self._items)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>If you create an instance of Items, you’ll find that it supports almost all of the core list methods (e.g., <strong>append()</strong>, <strong>remove()</strong>, <strong>count()</strong>, etc.).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = Items([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(a)</span><br><span class="line">Len</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="number">4</span>)</span><br><span class="line">Len</span><br><span class="line">Inserting: <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="number">2</span>)</span><br><span class="line">Len</span><br><span class="line">Inserting: <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.count(<span class="number">2</span>)</span><br><span class="line">Getting: <span class="number">0</span></span><br><span class="line">Getting: <span class="number">1</span></span><br><span class="line">Getting: <span class="number">2</span></span><br><span class="line">Getting: <span class="number">3</span></span><br><span class="line">Getting: <span class="number">4</span></span><br><span class="line">Getting: <span class="number">5</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.remove(<span class="number">3</span>)</span><br><span class="line">Getting: <span class="number">0</span></span><br><span class="line">Getting: <span class="number">1</span></span><br><span class="line">Getting: <span class="number">2</span></span><br><span class="line">Deleting: <span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Delegating-Attribute-Access"><a href="#Delegating-Attribute-Access" class="headerlink" title="Delegating Attribute Access"></a>Delegating Attribute Access</h2><p>Simply stated, delegation is a programming pattern where the responsibility for implementing a particular operation is handed off (i.e., delegated) to a different object. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._a = A()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="comment"># Delegate to the internal self._a instance</span></span><br><span class="line">        <span class="keyword">return</span> self._a.spam(x)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Delegate to the internal self._a instance</span></span><br><span class="line">        <span class="keyword">return</span> self._a.foo()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>However, if there are many methods to delegate, an alternative approach is to define the <strong>__getattr__()</strong> method, like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._a = A()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># Expose all of the methods defined on class A</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> getattr(self._a, name)</span><br></pre></td></tr></table></figure><p>Another example of delegation is in the implementation of proxies.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># A proxy class that wraps around another object, but</span></span><br><span class="line"><span class="comment"># exposes its public attributes</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        self._obj = obj</span><br><span class="line">    <span class="comment"># Delegate attribute lookup to internal obj</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">'getattr:'</span>, name)</span><br><span class="line">        <span class="keyword">return</span> getattr(self._obj, name)</span><br><span class="line">    <span class="comment"># Delegate attribute assignment</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> name.startswith(<span class="string">'_'</span>):</span><br><span class="line">            super().__setattr__(name, value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'setattr:'</span>, name, value)</span><br><span class="line">            setattr(self._obj, name, value)</span><br><span class="line">    <span class="comment"># Delegate attribute deletion</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> name.startswith(<span class="string">'_'</span>):</span><br><span class="line">            super().__delattr__(name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'delattr:'</span>, name)</span><br><span class="line">            delattr(self._obj, name)</span><br></pre></td></tr></table></figure></p><p>Delegation is sometimes used as an alternative to inheritance.  For example, instead of writing code like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        print(<span class="string">'A.spam'</span>, x)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'A.foo'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        print(<span class="string">'B.spam'</span>)</span><br><span class="line">        super().spam(x)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'B.bar'</span>)</span><br></pre></td></tr></table></figure><p>A solution involving delegation would be written as follows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        print(<span class="string">'A.spam'</span>, x)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'A.foo'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._a = A()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        print(<span class="string">'B.spam'</span>, x)</span><br><span class="line">        self._a.spam(x)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'B.bar'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> getattr(self._a, name)</span><br></pre></td></tr></table></figure><p>It is also important to emphasize that the <strong>__getattr__()</strong> method usually does not apply to most special methods that start and end with double underscores. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListLike</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._items = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> getattr(self._items, name)</span><br></pre></td></tr></table></figure><p>If you try to make a <strong>ListLike</strong> object, you’ll find that it supports the common list methods, such as <strong>append(</strong>) and <strong>insert()</strong>. However, it does not support any of the operators like <strong>len()</strong>, item lookup, and so forth.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = ListLike()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.insert(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(a)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: object of type <span class="string">'ListLike'</span> has no len()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">'ListLike'</span> object does <span class="keyword">not</span> support indexing</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>To support the different operators, you have to manually delegate the associated special methods yourself.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListLike</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._items = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> getattr(self._items, name)</span><br><span class="line">    <span class="comment"># Added special methods to support certain list operations</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self._items)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, index)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._items[index]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, index, value)</span>:</span></span><br><span class="line">        self._items[index] = value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, index)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self._items[index]</span><br></pre></td></tr></table></figure></p><h2 id="Defining-More-Than-One-Constructor-in-a-Class"><a href="#Defining-More-Than-One-Constructor-in-a-Class" class="headerlink" title="Defining More Than One Constructor in a Class"></a>Defining More Than One Constructor in a Class</h2><p>To define a class with more than one constructor, you should use a class method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> time</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Date</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, year, month, day)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.year= year</span><br><span class="line"><span class="meta">... </span>        self.month= month</span><br><span class="line"><span class="meta">... </span>        self.day= day</span><br><span class="line"><span class="meta">... </span>    @classmethod</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">today</span><span class="params">(cls)</span>:</span></span><br><span class="line"><span class="meta">... </span>        t= time.localtime()</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> cls(t.tm_year, t.tm_mon, t.tm_mday)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a= Date(<span class="number">2012</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=Date.today()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">&lt;__main__.Date object at <span class="number">0x05786D90</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.year</span><br><span class="line"><span class="number">2018</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>Instead of defining a separate class method, you might be inclined to implement the <strong>__init__()</strong> method in a way that allows for different calling conventions. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(args) == <span class="number">0</span>:</span><br><span class="line">            t = time.localtime()</span><br><span class="line">            args = (t.tm_year, t.tm_mon, t.tm_mday)</span><br><span class="line">        self.year, self.month, self.day = args</span><br></pre></td></tr></table></figure><p>Although this technique works in certain cases, it often leads to code that is hard to understand and difficult to maintain. For example, this implementation won’t show useful help strings (with argument names). In addition, code that creates <strong>Date</strong> instances will be less clear. Compare and contrast the following:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = Date(<span class="number">2012</span>, <span class="number">12</span>, <span class="number">21</span>) <span class="comment"># Clear. A specific date.</span></span><br><span class="line">b = Date() <span class="comment"># ??? What does this do?</span></span><br><span class="line"><span class="comment"># Class method version</span></span><br><span class="line">c = Date.today() <span class="comment"># Clear. Today's date.</span></span><br></pre></td></tr></table></figure><h2 id="Creating-an-Instance-Without-Invoking-init"><a href="#Creating-an-Instance-Without-Invoking-init" class="headerlink" title="Creating an Instance Without Invoking init"></a>Creating an Instance Without Invoking init</h2><p>A bare uninitialized instance can be created by directly calling the <strong>__new__()</strong> method of a class. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Date</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, year, month, day)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.year= year</span><br><span class="line"><span class="meta">... </span>        self.month= month</span><br><span class="line"><span class="meta">... </span>        self.day= day</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d= Date.__new__(Date)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&lt;__main__.Date object at <span class="number">0x05786E10</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.year</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'Date'</span> object has no attribute <span class="string">'year'</span></span><br></pre></td></tr></table></figure><p>As you can see, the resulting instance is uninitialized. Thus, it is now your responsibility to set the appropriate instance variables. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'year'</span>:<span class="number">2012</span>, <span class="string">'month'</span>:<span class="number">8</span>, <span class="string">'day'</span>:<span class="number">29</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key, value <span class="keyword">in</span> data.items():</span><br><span class="line"><span class="meta">... </span>setattr(d, key, value)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.year</span><br><span class="line"><span class="number">2012</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.month</span><br><span class="line"><span class="number">8</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Extending-Classes-with-Mixins"><a href="#Extending-Classes-with-Mixins" class="headerlink" title="Extending Classes with Mixins"></a>Extending Classes with Mixins</h2><p>To illustrate, suppose you have an interest in adding various customizations (e.g., logging, set-once, type checking, etc.) to mapping objects. Here are a set of mixin classes that do that:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">LoggedMappingMixin</span>:</span></span><br><span class="line"><span class="meta">... </span>    __slots__= ()</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Getting'</span>, str(key))</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> super().__getitem__(key)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Setting &#123;&#125;= &#123;!r&#125;'</span>.format(key, value))</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> super().__setitem__(key, value)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Deleting'</span>, str(key))</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> super().__delitem__(key)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">SetOnceMappingMixin</span>:</span></span><br><span class="line"><span class="meta">... </span>    __slots__= ()</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> key <span class="keyword">in</span> self:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">raise</span> KeyError(str(key) + <span class="string">' already set'</span>)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> super().__setitem__(key, value)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">StringKeysMappingMixin</span>:</span></span><br><span class="line"><span class="meta">... </span>    __slots__= ()</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(key, str):</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">raise</span> TypeError(<span class="string">'keys must be strings'</span>)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> super().__setitem__(key, value)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>These classes, by themselves, are useless. In fact, if you instantiate any one of them, it does nothing useful at all (other than generate exceptions). Instead, they are supposed to be mixed with other mapping classes through multiple inheritance.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">loggedDict</span><span class="params">(LoggedMappingMixin, dict)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d= loggedDict()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'x'</span>] = <span class="number">23</span></span><br><span class="line">Setting x= <span class="number">23</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=SetOnceDefaultDict(list)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'x'</span>]</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'x'</span>]= <span class="number">23</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">5</span>, <span class="keyword">in</span> __setitem__</span><br><span class="line">KeyError: <span class="string">'x already set'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'x'</span>].append(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'x'</span>].append(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'x'</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">StringOrderedDict</span><span class="params">(StringKeysMappingMixin, SetOnceMappingMixin, OrderedDict)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = StringOrderedDict()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'x'</span>] = <span class="number">23</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">42</span>] = <span class="number">10</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"> File <span class="string">"mixin.py"</span>, line <span class="number">45</span>, <span class="keyword">in</span> __setitem__</span><br><span class="line"> <span class="string">'''</span></span><br><span class="line"><span class="string">TypeError: keys must be strings</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>d['x'] = 42</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string"> File "&lt;stdin&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="string"> File "mixin.py", line 46, in __setitem__</span></span><br><span class="line"><span class="string"> __slots__ = ()</span></span><br><span class="line"><span class="string"> File "mixin.py", line 24, in __setitem__</span></span><br><span class="line"><span class="string"> if key in self:</span></span><br><span class="line"><span class="string">KeyError: 'x already set'</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>Mixin classes appear in various places in the standard library, mostly as a means for extending the functionality of other classes similar to as shown. They are also one of the main uses of multiple inheritance. For instance, if you are writing network code, you can often use the <strong>ThreadingMixIn</strong> from the <strong>socketserver</strong> module to add thread support to other network-related classes. For example, here is a multithreaded XMLRPCserver:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xmlrpc.server <span class="keyword">import</span> SimpleXMLRPCServer</span><br><span class="line"><span class="keyword">from</span> socketserver <span class="keyword">import</span> ThreadingMixIn</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadedXMLRPCServer</span><span class="params">(ThreadingMixIn, SimpleXMLRPCServer)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>The ThreadingMixIn from the socketserver library has to be mixed with an appropriate server class—it can’t be used all by itself.</p><p>mixin classes typically have no state of their own. This means there is no <strong>__init__()</strong> method and no instance variables. In this recipe, the specification of <strong>__slots__ = ()</strong> is meant to serve as a strong hint that the mixin classes do not have their own instance data.</p><p>If you are thinking about defining a mixin class that has an <strong>__init__()</strong> method and instance variables, be aware that there is significant peril associated with the fact that the class doesn’t know anything about the other classes it’s going to be mixed with. Thus, any instance variables created would have to be named in a way that avoids name clashes. In addition, the <strong>__init__()</strong> method would have to be programmed in a way that properly invokes the <strong>__init__()</strong> method of other classes that are mixed in. In general, thisis difficult to implement since you know nothing about the argument signatures of the other classes. At the very least, you would have to implement something very general using *arg, <strong>kwargs. If the </strong>__init__()<strong> of the mixin class took any arguments of its own, those arguments should be specified by keyword only and named in such a way to avoid name collisions with other arguments. Here is one possible implementation of a mixin defining an </strong><strong>init</strong>()** and accepting a keyword argument:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">RestrictKeysMixin</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, _restrict_key_type, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.__restrict_key_type= _restrict_key_type</span><br><span class="line"><span class="meta">... </span>        super().__init__(*args, **kwargs)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(key, self.__restrict_key_type):</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">raise</span> TypeError(<span class="string">'Keys must be'</span>, str(self.__restrict_key_type))</span><br><span class="line"><span class="meta">... </span>        super().__setitem__(key, value)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">RDict</span><span class="params">(RestrictKeysMixin, dict)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d= RDict(_restrict_key_type= str)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d= RDict([(<span class="string">'name'</span>,<span class="string">'Dave'</span>), (<span class="string">'n'</span>, <span class="number">37</span>)], _restrict_key_type= str)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f= RDict(_restrict_key_type= str, name= <span class="string">'Dave'</span>, n= <span class="number">37</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'Dave'</span>, <span class="string">'n'</span>: <span class="number">37</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f[<span class="number">34</span>]=<span class="number">5</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">7</span>, <span class="keyword">in</span> __setitem__</span><br><span class="line">TypeError: (<span class="string">'Keys must be'</span>, <span class="string">"&lt;class 'str'&gt;"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f[<span class="string">'m'</span>]=<span class="number">90</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'Dave'</span>, <span class="string">'m'</span>: <span class="number">90</span>, <span class="string">'n'</span>: <span class="number">37</span>&#125;</span><br></pre></td></tr></table></figure><p>In this example, you’ll notice that initializing an <strong>RDict()</strong> still takes the arguments understood by <strong>dict()</strong>. However, there is an extra keyword argument <strong>restrict_key_type</strong> that is provided to the mixin class.</p><p>Use of the super() function is an essential and critical part of writing mixin classes. In the solution, the classes redefine certain critical methods, such as <strong>__getitem__()</strong> and <strong>__setitem__()</strong>. However, they also need to call the original implementation of those methods. Using <strong>super()</strong> delegates to the next class on the method resolution order (MRO). This aspect of the recipe, however, is not obvious to novices, because <strong>super()</strong> is being used in classes that have no parent (at first glance, it might look like an error). However, in a class definition such as this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoggedDict</span><span class="params">(LoggedMappingMixin, dict)</span>:</span></span><br><span class="line"> <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>The use of <strong>super()</strong> in <strong>LoggedMappingMixin</strong> delegates to the next class over in the multiple inheritance list. That is, a call such as <strong>super().__getitem__()</strong> in <strong>LoggedMappingMixin</strong> actually steps over and invokes <strong>dict.__getitem__()</strong>. Without this behavior, the mixin class wouldn’t work at all.</p><p>An alternative implementation of mixins involves the use of class decorators. For example, consider this code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">LoggedMapping</span><span class="params">(cls)</span>:</span></span><br><span class="line"><span class="meta">... </span>    cls_getitem= cls.__getitem__</span><br><span class="line"><span class="meta">... </span>    cls_setitem= cls.__setitem__</span><br><span class="line"><span class="meta">... </span>    cls_delitem= cls.__delitem__</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Getting'</span>, str(key))</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> cls_getitem(self, key)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, item)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Setting &#123;&#125;= &#123;!r&#125;'</span>.format(key, value))</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> cls_setitem(self, key, value)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Deleting'</span>, str(key))</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> cls_delitem(self, key)</span><br><span class="line"><span class="meta">... </span>    cls.__getitem__= __getitem__</span><br><span class="line"><span class="meta">... </span>    cls.__setitem__= __setitem__</span><br><span class="line"><span class="meta">... </span>    cls.__delitem__= __delitem__</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> cls</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@LoggedMapping</span><br><span class="line"><span class="meta">... </span><span class="class"><span class="keyword">class</span> <span class="title">LoggedDict</span><span class="params">(dict)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Implementing-Stateful-Objects-or-State-Machines"><a href="#Implementing-Stateful-Objects-or-State-Machines" class="headerlink" title="Implementing Stateful Objects or State Machines"></a>Implementing Stateful Objects or State Machines</h2><p>In certain applications, you might have objects that operate differently according to some kind of internal state. For example, consider a simple class representing a connection:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.state = <span class="string">'CLOSED'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.state != <span class="string">'OPEN'</span>:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">'Not open'</span>)</span><br><span class="line">        print(<span class="string">'reading'</span>)</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(self, data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.state != <span class="string">'OPEN'</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">'Not open'</span>)</span><br><span class="line">    print(<span class="string">'writing'</span>)</span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.state == <span class="string">'OPEN'</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">'Already open'</span>)</span><br><span class="line">        self.state = <span class="string">'OPEN'</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.state == <span class="string">'CLOSED'</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">'Already closed'</span>)</span><br><span class="line">    self.state = <span class="string">'CLOSED'</span></span><br></pre></td></tr></table></figure><p>A more elegant approach is to encode each operational state as a separate class and arrange for the <strong>Connection</strong> class to delegate to the state class. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Connection</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.new_state(ClosedConnectionState)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">new_state</span><span class="params">(self,newstate)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self._state= newstate</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self._state.read(self)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(self, data)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self._state.write(self, data)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self._state.open(self)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self._state.close(self)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">ConnectionState</span>:</span></span><br><span class="line"><span class="meta">... </span>    @staticmethod</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(conn)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">raise</span> NotImplementedError()</span><br><span class="line"><span class="meta">... </span>    @staticmethod</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(conn, data)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">raise</span> NotImplementedError()</span><br><span class="line"><span class="meta">... </span>    @staticmethod</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(conn)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">raise</span> NotImplementedError()</span><br><span class="line"><span class="meta">... </span>    @staticmethod</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(conn)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">raise</span> NotImplementedError()</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">ClosedConnectionState</span><span class="params">(ConnectionState)</span>:</span></span><br><span class="line"><span class="meta">... </span>    @staticmethod</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(conn)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">raise</span> RuntimeError(<span class="string">'Not open'</span>)</span><br><span class="line"><span class="meta">... </span>    @staticmethod</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(conn, data)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">raise</span> RuntimeError(<span class="string">'Not open'</span>)</span><br><span class="line"><span class="meta">... </span>    @staticmethod</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(conn)</span>:</span></span><br><span class="line"><span class="meta">... </span>        conn.new_state(OpenConnectionState)</span><br><span class="line"><span class="meta">... </span>    @staticmethod</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(conn)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">raise</span> RuntimeError(<span class="string">'Already closed'</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">OpenConnectionState</span><span class="params">(ConnectionState)</span>:</span></span><br><span class="line"><span class="meta">... </span>    @staticmethod</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(conn)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'reading'</span>)</span><br><span class="line"><span class="meta">... </span>    @staticmethod</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(conn, data)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'writing'</span>)</span><br><span class="line"><span class="meta">... </span>    @staticmethod</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(conn)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">raise</span> RuntimeError(<span class="string">'Already open'</span>)</span><br><span class="line"><span class="meta">... </span>    @staticmethod</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(conn)</span>:</span></span><br><span class="line"><span class="meta">... </span>        conn.new_state(ClosedConnectionState)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Here is an interactive session that illustrates the use of these classes:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Connection()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c._state</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">ClosedConnectionState</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">c</span>.<span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="class"><span class="title">Traceback</span> <span class="params">(most recent call last)</span>:</span></span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"> File <span class="string">"example.py"</span>, line <span class="number">10</span>, <span class="keyword">in</span> read</span><br><span class="line"> <span class="keyword">return</span> self._state.read(self)</span><br><span class="line"> File <span class="string">"example.py"</span>, line <span class="number">43</span>, <span class="keyword">in</span> read</span><br><span class="line"> <span class="keyword">raise</span> RuntimeError(<span class="string">'Not open'</span>)</span><br><span class="line">RuntimeError: Not open</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.open()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c._state</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">OpenConnectionState</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">c</span>.<span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="class"><span class="title">reading</span></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">c</span>.<span class="title">write</span><span class="params">(<span class="string">'hello'</span>)</span></span></span><br><span class="line"><span class="class"><span class="title">writing</span></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">c</span>.<span class="title">close</span><span class="params">()</span></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">c</span>.<span class="title">_state</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">__main__</span>.<span class="title">ClosedConnectionState</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure><p>It might look a little weird, but each state is implemented by a class with static methods, each of which take an instance of <strong>Connection</strong> as the first argument. This design is based on a decision to not store any instance data in the different state classes themselves. Instead, all instance data should be stored on the <strong>Connection</strong> instance.</p><p>An alternative implementation technique concerns direct manipulation of the <strong>__class__</strong> attribute of instances.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.new_state(ClosedConnection)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_state</span><span class="params">(self, newstate)</span>:</span></span><br><span class="line">        self.__class__ = newstate</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClosedConnection</span><span class="params">(Connection)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">'Not open'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">'Not open'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.new_state(OpenConnection)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">'Already closed'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OpenConnection</span><span class="params">(Connection)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'reading'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        print(<span class="string">'writing'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">'Already open'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.new_state(ClosedConnection)</span><br></pre></td></tr></table></figure><p>Finally, either technique is useful in implementing more complicated state machines— especially in code that might otherwise feature large <strong>if-elif-else</strong> blocks. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Original implementation</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.state = <span class="string">'A'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">action</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> state == <span class="string">'A'</span>:</span><br><span class="line">            <span class="comment"># Action for A</span></span><br><span class="line">            ...</span><br><span class="line">            state = <span class="string">'B'</span></span><br><span class="line">        <span class="keyword">elif</span> state == <span class="string">'B'</span>:</span><br><span class="line">            <span class="comment"># Action for B</span></span><br><span class="line">                ...</span><br><span class="line">            state = <span class="string">'C'</span></span><br><span class="line">        <span class="keyword">elif</span> state == <span class="string">'C'</span>:</span><br><span class="line">            <span class="comment"># Action for C</span></span><br><span class="line">             ...</span><br><span class="line">            state = <span class="string">'A'</span></span><br><span class="line"><span class="comment"># Alternative implementation</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.new_state(State_A)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_state</span><span class="params">(self, state)</span>:</span></span><br><span class="line">        self.__class__ = state</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">action</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State_A</span><span class="params">(State)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">action</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="comment"># Action for A</span></span><br><span class="line">        ...</span><br><span class="line">        self.new_state(State_B)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State_B</span><span class="params">(State)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">action</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="comment"># Action for B</span></span><br><span class="line">        ...</span><br><span class="line">        self.new_state(State_C)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State_C</span><span class="params">(State)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">action</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="comment"># Action for C</span></span><br><span class="line">        ...</span><br><span class="line">        self.new_state(State_A)</span><br></pre></td></tr></table></figure><h2 id="Calling-a-Method-on-an-Object-Given-the-Name-As-a-String"><a href="#Calling-a-Method-on-an-Object-Given-the-Name-As-a-String" class="headerlink" title="Calling a Method on an Object Given the Name As a String"></a>Calling a Method on an Object Given the Name As a String</h2><p>You have the name of a method that you want to call on an object stored in a string and you want to execute the method. For simple cases, you might use <strong>getattr()</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Point</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.x= x</span><br><span class="line"><span class="meta">... </span>        self.y =y</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">'Point(&#123;!r:&#125;, &#123;!r:&#125;)'</span>.format(self.x, self.y)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">distance</span><span class="params">(self, x,y)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> math.hypot(self.x-x, self.y- y)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p= Point(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d= getattr(p, <span class="string">'distance'</span>)(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line"><span class="number">3.6055512754639896</span></span><br></pre></td></tr></table></figure><p>An alternative approach is to use <strong>operator.methodcaller().</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> operator</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>operator.methodcaller(<span class="string">'distance'</span>, <span class="number">0</span>,<span class="number">0</span> )(p)</span><br><span class="line"><span class="number">3.6055512754639896</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>points = [</span><br><span class="line"><span class="meta">... </span> Point(<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line"><span class="meta">... </span> Point(<span class="number">3</span>, <span class="number">0</span>),</span><br><span class="line"><span class="meta">... </span> Point(<span class="number">10</span>, <span class="number">-3</span>),</span><br><span class="line"><span class="meta">... </span> Point(<span class="number">-5</span>, <span class="number">-7</span>),</span><br><span class="line"><span class="meta">... </span> Point(<span class="number">-1</span>, <span class="number">8</span>),</span><br><span class="line"><span class="meta">... </span> Point(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">... </span>]</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>points.sort(key= operator.methodcaller(<span class="string">'distance'</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>points</span><br><span class="line">[Point(<span class="number">1</span>, <span class="number">2</span>), Point(<span class="number">3</span>, <span class="number">0</span>), Point(<span class="number">3</span>, <span class="number">2</span>), Point(<span class="number">-1</span>, <span class="number">8</span>), Point(<span class="number">-5</span>, <span class="number">-7</span>), Point(<span class="number">10</span>, <span class="number">-3</span>)]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>Calling a method is actually two separate steps involving an attribute lookup and a function call. Therefore, to call a method, you simply look up the attribute using getattr(), as for any other attribute. To invoke the result as a method, simply treat the result of the lookup as a function.</p><p><strong>operator.methodcaller(</strong>) creates a callable object, but also fixes any arguments that are going to be supplied to the method. All that you need to do is provide the appropriate <strong>self</strong> argument. </p><h2 id="Implementing-the-Visitor-Pattern"><a href="#Implementing-the-Visitor-Pattern" class="headerlink" title="Implementing the Visitor Pattern"></a>Implementing the Visitor Pattern</h2><p>You need to write code that processes or navigates through a complicated data structure consisting of many different kinds of objects, each of which needs to be handled in a different way. For example, walking through a tree structure and performing different actions depending on what kind of tree nodes are encountered.</p><p>The problem addressed by this recipe is one that often arises in programs that build data structures consisting of a large number of different kinds of objects. To illustrate, suppose you are trying to write a program that represents mathematical expressions. To do that, the program might employ a number of classes, like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">UnaryOperator</span><span class="params">(Node)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, operand)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.operand= operand</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">BinaryOperator</span><span class="params">(Node)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, left, right)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.left= left</span><br><span class="line"><span class="meta">... </span>        self.right= right</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Add</span><span class="params">(BinaryOperator)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Sub</span><span class="params">(BinaryOperator)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Mul</span><span class="params">(BinaryOperator)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Div</span><span class="params">(BinaryOperator)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Negate</span><span class="params">(UnaryOperator)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Number</span><span class="params">(Node)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.value= value</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>These classes would then be used to build up nested data structures, like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Representation of 1 + 2 * (3 - 4) / 5</span></span><br><span class="line">t1 = Sub(Number(<span class="number">3</span>), Number(<span class="number">4</span>))</span><br><span class="line">t2 = Mul(Number(<span class="number">2</span>), t1)</span><br><span class="line">t3 = Div(t2, Number(<span class="number">5</span>))</span><br><span class="line">t4 = Add(Number(<span class="number">1</span>), t3)</span><br></pre></td></tr></table></figure><p>For example, given such an expression, a program might want to do any number of things (e.g., produce output, generate instructions, perform translation, etc.).</p><p>To enable general-purpose processing, a common solution is to implement the so-called “visitor pattern” using a class similar to this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">NodeVisitor</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">(self, node)</span>:</span></span><br><span class="line"><span class="meta">... </span>        methname= <span class="string">'visit_'</span>+ type(node).__name__</span><br><span class="line"><span class="meta">... </span>        meth= getattr(self, methname, <span class="keyword">None</span>)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> meth <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line"><span class="meta">... </span>            meth= self.generic_visit</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> meth(node)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">generic_visit</span><span class="params">(self, node)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">raise</span> RuntimeError(<span class="string">'No &#123;&#125; method'</span>.format(<span class="string">'visit_'</span>+ type(node).__name__))</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>To use this class, a programmer inherits from it and implements various methods of the form <strong>visit_Name()</strong>, where <strong>Name</strong> is substituted with the node type. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Evaluator</span><span class="params">(NodeVisitor)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">visit_Number</span><span class="params">(self, node)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> node.value</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">visit_Add</span><span class="params">(self, node)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self.visit(node.left) + self.visit(node.right)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">visit_Sub</span><span class="params">(self, node)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self.visit(node.left)- self.visit(node.right)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">visit_Mul</span><span class="params">(self, node)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self.visit(node.left)* self.visit(node.right)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">visit_Div</span><span class="params">(self, node)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self.visit(node.left)/ self.visit(node.right)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">visit_Negate</span><span class="params">(self, node)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> -node.operand</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Here is an example of how you would use this class using the previously generated expression:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = Evaluator()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.visit(t4)</span><br><span class="line"><span class="number">0.6</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>As a completely different example, here is a class that translates an expression into operations on a simple stack machine:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">StackCode</span><span class="params">(NodeVisitor)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">generate_code</span><span class="params">(self, node)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.instructions= []</span><br><span class="line"><span class="meta">... </span>        self.visit(node)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self.instructions</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">visit_Number</span><span class="params">(self, node)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.instructions.append((<span class="string">'PUSH'</span>, node.value))</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">binop</span><span class="params">(self, node, instruction)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.visit(node.left)</span><br><span class="line"><span class="meta">... </span>        self.visit(node.right)</span><br><span class="line"><span class="meta">... </span>        self.instructions.append((instruction,))</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">visit_Add</span><span class="params">(self, node)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.binop(node,<span class="string">'Add'</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">visit_Sub</span><span class="params">(self, node)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.binop(node, <span class="string">'SUB'</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">visit_Mul</span><span class="params">(self, node)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.binop(node, <span class="string">'MUL'</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">visit_Div</span><span class="params">(self, node)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.binop(self, <span class="string">'DIV'</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">unaryop</span><span class="params">(self, node, instruction)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.visit(node.operand)</span><br><span class="line"><span class="meta">... </span>        self.instrctions.append((instruction,))</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">visit_Negate</span><span class="params">(self, node)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.unaryop(node, <span class="string">'NEG'</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Here is an example of this class in action:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = StackCode()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.generate_code(t4)</span><br><span class="line">[(<span class="string">'PUSH'</span>, <span class="number">1</span>), (<span class="string">'PUSH'</span>, <span class="number">2</span>), (<span class="string">'PUSH'</span>, <span class="number">3</span>), (<span class="string">'PUSH'</span>, <span class="number">4</span>), (<span class="string">'SUB'</span>,),</span><br><span class="line"> (<span class="string">'MUL'</span>,), (<span class="string">'PUSH'</span>, <span class="number">5</span>), (<span class="string">'DIV'</span>,), (<span class="string">'ADD'</span>,)]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>There are really two key ideas in this recipe. The first is a design strategy where code that manipulates a complicated data structure is decoupled from the data structure itself. That is, in this recipe, none of the various Node classes provide any implementation that does anything with the data. Instead, all of the data manipulation is carried out by specific implementations of the separate <strong>NodeVisitor</strong> class. This separation makes the code extremely general purpose.</p><p>The second major idea of this recipe is in the implementation of the visitor class itself. In the visitor, you want to dispatch to a different handling method based on some value such as the node type. In a naive implementation, you might be inclined to write a huge <strong>if</strong> statement, like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeVisitor</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        nodetype = type(node).__name__</span><br><span class="line">        <span class="keyword">if</span> nodetype == <span class="string">'Number'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.visit_Number(node)</span><br><span class="line">        <span class="keyword">elif</span> nodetype == <span class="string">'Add'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.visit_Add(node)</span><br><span class="line">        <span class="keyword">elif</span> nodetype == <span class="string">'Sub'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.visit_Sub(node)</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>It’s much better to play a little trick where you form the name of a method and go fetch it with the <strong>getattr()</strong> function, as shown. The <strong>generic_visit()</strong> method in the solution is a fallback should no matching handler method be found. In this recipe, it raises an exception to alert the programmer that an unexpected node type was encountered.</p><p>Within each visitor class, it is common for calculations to be driven by recursive calls to the <strong>visit()</strong> method. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Evaluator</span><span class="params">(NodeVisitor)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_Add</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.visit(node.left) + self.visit(node.right)</span><br></pre></td></tr></table></figure><h2 id="Implementing-the-Visitor-Pattern-Without-Recursion"><a href="#Implementing-the-Visitor-Pattern-Without-Recursion" class="headerlink" title="Implementing the Visitor Pattern Without Recursion"></a>Implementing the Visitor Pattern Without Recursion</h2><p>You’re writing code that navigates through a deeply nested tree structure using the visitor pattern, but it blows up due to exceeding the recursion limit. You’d like to eliminate the recursion, but keep the programming style of the visitor pattern.</p><p>Clever use of generators can sometimes be used to eliminate recursion from algorithms involving tree traversal or searching. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> types</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span> <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeVisitor</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        stack= [node]</span><br><span class="line">        last_result= <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                last= stack[<span class="number">-1</span>]</span><br><span class="line">                <span class="keyword">if</span> isinstance(last, types.GeneratorType):</span><br><span class="line">                    stack.append(last.send(last_result))</span><br><span class="line">                    last_result= <span class="keyword">None</span></span><br><span class="line">                <span class="keyword">elif</span> isinstance(last, Node):</span><br><span class="line">                    stack.append(self._visit(stack.pop()))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    last_result= stack.pop()</span><br><span class="line">            <span class="keyword">except</span> StopIteration:</span><br><span class="line">                stack.pop()</span><br><span class="line">        <span class="keyword">return</span> last_result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_visit</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        methname= <span class="string">'visit_'</span> + type(node).__name__</span><br><span class="line">        meth=getattr(self, methname, <span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">if</span> meth <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            meth= self.generic_visit</span><br><span class="line">        <span class="keyword">return</span> meth(node)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generic_visit</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">'No &#123;&#125; method'</span>.format(<span class="string">'visit_'</span>+ type(node).__name__))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnaryOperator</span><span class="params">(Node)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, operand)</span>:</span></span><br><span class="line">        self.operand= operand</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryOperator</span><span class="params">(Node)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, left, right)</span>:</span></span><br><span class="line">        self.left= left</span><br><span class="line">        self.right= right</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Add</span><span class="params">(BinaryOperator)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span><span class="params">(BinaryOperator)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mul</span><span class="params">(BinaryOperator)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Div</span><span class="params">(BinaryOperator)</span>:</span> <span class="keyword">pass</span>    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Negate</span><span class="params">(UnaryOperator)</span>:</span> <span class="keyword">pass</span>    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span><span class="params">(Node)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.value= value</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Evaluator</span><span class="params">(NodeVisitor)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_Number</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> node.value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_Add</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.visit(node.left) + self.visit(node.right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_Sub</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.visit(node.left) - self.visit(node.right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_Mul</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.visit(node.left) * self.visit(node.right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_Div</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.visit(node.left) / self.visit(node.right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_Negate</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> - self.visit(node.operand)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    t1= Sub(Number(<span class="number">3</span>), Number(<span class="number">4</span>))</span><br><span class="line">    t2= Mul(Number(<span class="number">2</span>), t1)</span><br><span class="line">    t3= Div(t2, Number(<span class="number">5</span>))</span><br><span class="line">    t4= Add(Number(<span class="number">1</span>), t3)</span><br><span class="line"></span><br><span class="line">    e= Evaluator()</span><br><span class="line">    print(e.visit(t4)) <span class="comment"># Outputs 0.6</span></span><br></pre></td></tr></table></figure><p>The preceding code works for simple expressions. However, the implementation of Evaluator uses recursion and crashes if things get too nested. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = Number(<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100000</span>):</span><br><span class="line"><span class="meta">... </span>a = Add(a, Number(n))</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = Evaluator()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.visit(a)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line"> File <span class="string">"visitor.py"</span>, line <span class="number">29</span>, <span class="keyword">in</span> _visit</span><br><span class="line"> <span class="keyword">return</span> meth(node)</span><br><span class="line"> File <span class="string">"visitor.py"</span>, line <span class="number">67</span>, <span class="keyword">in</span> visit_Add</span><br><span class="line"> <span class="keyword">return</span> self.visit(node.left) + self.visit(node.right)</span><br><span class="line">RuntimeError: maximum recursion depth exceeded</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>Now let’s change the Evaluator class ever so slightly to the following:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Evaluator</span><span class="params">(NodeVisitor)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_Number</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> node.value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_Add</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        print(<span class="string">'Add:'</span>, node)</span><br><span class="line">        lhs= <span class="keyword">yield</span> node.left</span><br><span class="line">        print(<span class="string">'left='</span>, lhs)</span><br><span class="line">        rhs= <span class="keyword">yield</span> node.right</span><br><span class="line">        print(<span class="string">'right='</span>, rhs)</span><br><span class="line">        <span class="keyword">yield</span> lhs + rhs</span><br><span class="line">        <span class="comment">#yield (yield node.left) + (yield node.right)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_Sub</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> (<span class="keyword">yield</span> node.left) - (<span class="keyword">yield</span> node.right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_Mul</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> (<span class="keyword">yield</span> node.left) * (<span class="keyword">yield</span> node.right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_Div</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> (<span class="keyword">yield</span> node.left) / (<span class="keyword">yield</span> node.right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_Negate</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> - (<span class="keyword">yield</span> node.operand)</span><br></pre></td></tr></table></figure><p>If you try the same recursive experiment, you’ll find that it suddenly works.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = Number(<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100000</span>):</span><br><span class="line"><span class="meta">... </span>a = Add(a, Number(n))</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = Evaluator()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.visit(a)</span><br><span class="line"><span class="number">4999950000</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>First, in problems related to tree traversal, a common implementation strategy for avoiding recursion is to write algorithms involving a stack or queue. For example, depthfirst traversal can be implemented entirely by pushing nodes onto a stack when first encountered and then popping them off once processing has finished. The central core of the <strong>visit()</strong> method in the solution is built around this idea. The algorithm starts by pushing the initial node onto the <strong>stack</strong> list and runs until the stack is empty. During execution, the stack will grow according to the depth of the underlying tree structure.</p><p>The second insight concerns the behavior of the <strong>yield</strong> statement in generators. When <strong>yield</strong> is encountered, the behavior of a generator is to emit a value and to suspend. This recipe uses this as a replacement for recursion. For example, instead of writing a recursive expression like this:</p><p><code>value = self.visit(node.left)</code></p><p>you replace it with the following:</p><p><code>value = yield node.left</code></p><p>Behind the scenes, this sends the node in question (node.left) back to the <strong>visit()</strong> method. The <strong>visit()</strong> method then carries out the execution of the appropriate <strong>visit_Name()</strong> method for that node. In some sense, this is almost the opposite of recursion. That is, instead of calling <strong>visit()</strong> recursively to move the algorithm forward, the <strong>yield</strong> statement is being used to temporarily back out of the computation in progress. Thus, the <strong>yield</strong> is essentially a signal that tells the algorithm that the yielded node needs to be processed first before further progress can be made.</p><p>The final part of this recipe concerns propagation of results. When generator functions are used, you can no longer use return statements to emit values (doing so will cause a SyntaxError exception). Thus, the yield statement has to do double duty to cover the case. In this recipe, if the value produced by a yield statement is a non-Node type, it is assumed to be a value that will be propagated to the next step of the calculation. This is the purpose of the last_return variable in the code. Typically, this would hold the last value yielded by a visit method. That value would then be sent into the previously executing method, where it would show up as the return value from a yield statement. For example, in this code: value = yield node.left The value variable gets the value of last_return, which is the result returned by the visitor method invoked for node.left.</p><p>The code works by simply looking at the top of the stack and deciding what to do next. If it’s a generator, then its <strong>send()</strong> method is invoked with the last result (if any) and the result appended onto the stack for further processing. The value returned by <strong>send()</strong> is the same value that was given to the <strong>yield</strong> statement. Thus, in a statement such as <strong>yield node.left</strong>, the <strong>Node</strong> instance <strong>node.left</strong> is returned by <strong>send()</strong> and placed on the top of the stack.</p><p>If the top of the stack is a <strong>Node</strong> instance, then it is replaced by the result of calling the appropriate visit method for that node. This is where the underlying recursion is being eliminated. Instead of the various visit methods directly calling <strong>visit()</strong> recursively, it takes place here. As long as the methods use <strong>yield</strong>, it all works out.</p><p>Finally, if the top of the stack is anything else, it’s assumed to be a return value of some kind. It just gets popped off the stack and placed into <strong>last_result</strong>. If the next item on the stack is a generator, then it gets sent in as a return value for the <strong>yield</strong>. It should be noted that the final return value of <strong>visit()</strong> is also set to <strong>last_result</strong>. This is what makes this recipe work with a traditional recursive implementation. If no generators are being used, this value simply holds the value given to any return statements used in the code.</p><h2 id="Making-Classes-Support-Comparison-Operations"><a href="#Making-Classes-Support-Comparison-Operations" class="headerlink" title="Making Classes Support Comparison Operations"></a>Making Classes Support Comparison Operations</h2><p>Python classes can support comparison by implementing a special method for each comparison operator. For example, to support the <strong>&gt;=</strong> operator, you define a <strong>__ge__()</strong> method in the classes. Although defining a single method is usually no problem, it quickly gets tedious to create implementations of every possible comparison operator.</p><p>The <strong>functools.total_ordering</strong> decorator can be used to simplify this process. To use it, you decorate a class with it, and define <strong>__eq__()</strong> and one other comparison method (<strong>__lt__</strong>, <strong>__le__</strong>, <strong>__gt__</strong>, or <strong>__ge__()</strong>). The decorator then fills in the other comparison methods for you.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> total_ordering</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Room</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, length, width)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.name= name</span><br><span class="line"><span class="meta">... </span>        self.length= length</span><br><span class="line"><span class="meta">... </span>        self.width= width</span><br><span class="line"><span class="meta">... </span>        self.square_feet= self.length * self.width</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@total_ordering</span><br><span class="line"><span class="meta">... </span><span class="class"><span class="keyword">class</span> <span class="title">House</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, style)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.name= name</span><br><span class="line"><span class="meta">... </span>        self.style= style</span><br><span class="line"><span class="meta">... </span>        self.rooms=list()</span><br><span class="line"><span class="meta">... </span>    @property</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">living_space_footage</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> sum(r.square_feet <span class="keyword">for</span> r <span class="keyword">in</span> self.rooms)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">add_room</span><span class="params">(self, room)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.rooms.append(room)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">'&#123;&#125;: &#123;&#125; square foot &#123;&#125;'</span>.format(self.name, self.living_space_footage, self.style)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self.living_space_footage== other.living_space_footage</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self.living_space_footage &lt; other.living_space_footage</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Here, the House class has been decorated with @total_ordering. Definitions of<strong>__eq__()</strong> and <strong>__lt__</strong> are provided to compare houses based on the total square footage of their rooms. This minimum definition is all that is required to make all of the other comparison operations work.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>h1 = House(<span class="string">'h1'</span>, <span class="string">'Cape'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h1.add_room(Room(<span class="string">'Master Bedroom'</span>, <span class="number">14</span>, <span class="number">21</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h1.add_room(Room(<span class="string">'Living Room'</span>, <span class="number">18</span>, <span class="number">20</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h1.add_room(Room(<span class="string">'Kitchen'</span>, <span class="number">12</span>, <span class="number">16</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h1.add_room(Room(<span class="string">'Office'</span>, <span class="number">12</span>, <span class="number">12</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h2 = House(<span class="string">'h2'</span>, <span class="string">'Ranch'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h2.add_room(Room(<span class="string">'Master Bedroom'</span>, <span class="number">14</span>, <span class="number">21</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h2.add_room(Room(<span class="string">'Living Room'</span>, <span class="number">18</span>, <span class="number">20</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h2.add_room(Room(<span class="string">'Kitchen'</span>, <span class="number">12</span>, <span class="number">16</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h3 = House(<span class="string">'h3'</span>, <span class="string">'Split'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h3.add_room(Room(<span class="string">'Master Bedroom'</span>, <span class="number">14</span>, <span class="number">21</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h3.add_room(Room(<span class="string">'Living Room'</span>, <span class="number">18</span>, <span class="number">20</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h3.add_room(Room(<span class="string">'Office'</span>, <span class="number">12</span>, <span class="number">16</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>h3.add_room(Room(<span class="string">'Kitchen'</span>, <span class="number">15</span>, <span class="number">17</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>houses = [h1, h2, h3]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Is h1 bigger than h2?'</span>, h1 &gt; h2)</span><br><span class="line">Is h1 bigger than h2? True</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Is h2 smaller than h3?'</span>, h2 &lt; h3) <span class="comment"># prints True</span></span><br><span class="line">Is h2 smaller than h3? True</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Is h2 greater than or equal to h1?'</span>, h2 &gt;= h1) <span class="comment"># Prints False</span></span><br><span class="line">Is h2 greater than or equal to h1? False</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Which one is biggest?'</span>, max(houses)) <span class="comment"># Prints 'h3: 1101-square-foot Split'</span></span><br><span class="line">Which one is biggest? h3: 1101 square foot Split</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Which is smallest?'</span>, min(houses)) <span class="comment"># Prints 'h2: 846-square-foot Ranch'</span></span><br><span class="line">Which is smallest? h2: 846 square foot Ranch</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>f you’ve written the code to make a class support all of the basic comparison operators, then total_ordering probably doesn’t seem all that magical: it literally defines a mapping from each of the comparison-supporting methods to all of the other ones that would be required. So, if you defined<strong>__lt__</strong> in your class as in the solution, it is used to build all of the other comparison operators. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># Methods created by @total_ordering</span></span><br><span class="line">    __le__ = <span class="keyword">lambda</span> self, other: self &lt; other <span class="keyword">or</span> self == other</span><br><span class="line">    __gt__ = <span class="keyword">lambda</span> self, other: <span class="keyword">not</span> (self &lt; other <span class="keyword">or</span> self == other)</span><br><span class="line">    __ge__ = <span class="keyword">lambda</span> self, other: <span class="keyword">not</span> (self &lt; other)</span><br><span class="line">    __ne__ = <span class="keyword">lambda</span> self, other: <span class="keyword">not</span> self == other</span><br></pre></td></tr></table></figure><h2 id="Creating-Cached-Instances"><a href="#Creating-Cached-Instances" class="headerlink" title="Creating Cached Instances"></a>Creating Cached Instances</h2><p>When creating instances of a class, you want to return a cached reference to a previous instance created with the same arguments (if any).  Practical examples include the behavior of libraries, such as the <strong>logging</strong> module, that only want to associate a single logger instance with a given name.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import logging</span><br><span class="line">&gt;&gt;&gt; a = logging.getLogger(&apos;foo&apos;)</span><br><span class="line">&gt;&gt;&gt; b = logging.getLogger(&apos;bar&apos;)</span><br><span class="line">&gt;&gt;&gt; a is b</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; c = logging.getLogger(&apos;foo&apos;)</span><br><span class="line">&gt;&gt;&gt; a is c</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>To implement this behavior, you should make use of a factory function that’s separate from the class itself.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Spam</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.name= name</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> weakref</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_spam_cache= weakref.WeakValueDictionary()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">get_spam</span><span class="params">(name)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> _spam_cache:</span><br><span class="line"><span class="meta">... </span>        s=Spam(name)</span><br><span class="line"><span class="meta">... </span>        _spam_cache[name] = s</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>        s= _spam_cache[name]</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> s    </span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>If you use this implementation, you’ll find that it behaves in the manner shown earlier:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = get_spam(<span class="string">'foo'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = get_spam(<span class="string">'bar'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = get_spam(<span class="string">'foo'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> c</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>Writing a special factory function is often a simple approach for altering the normal rules of instance creation. One question that often arises at this point is whether or not a more elegant approach could be taken. For example, you might consider a solution that redefines the <strong>__new__()</strong> method of a class as follows:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Spam</span>:</span></span><br><span class="line"><span class="meta">... </span>    _spam_cache= weakref.WeakValueDictionary()</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> name <span class="keyword">in</span> cls._spam_cache:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> cls._spam_cache[name]</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>            self= super().__new__(cls)</span><br><span class="line"><span class="meta">... </span>            cls._spam_cache[name]= self</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> self</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'Initializing Spam'</span>)</span><br><span class="line"><span class="meta">... </span>        self.name= name</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>However, a major problem is that the <strong>__init__()</strong> method always gets called, regardless of whether the instance was cached or not. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s= Spam(<span class="string">'Dave'</span>)</span><br><span class="line">Initializing Spam</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t= Spam(<span class="string">'Dave'</span>)</span><br><span class="line">Initializing Spam</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s <span class="keyword">is</span> t</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>That behavior is probably not what you want. So, to solve the problem of caching without reinitialization, you need to take a slightly different approach.</p><p>When maintaining a cache of instances, you often only want to keep items in the cache as long as they’re actually being used somewhere in the program. A <strong>WeakValueDictionary</strong> instance only holds onto the referenced items as long as they exist somewhere else. Otherwise, the dictionary keys disappear when instances are no longer being used. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = get_spam(<span class="string">'foo'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = get_spam(<span class="string">'bar'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = get_spam(<span class="string">'foo'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(_spam_cache)</span><br><span class="line">[<span class="string">'foo'</span>, <span class="string">'bar'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> c</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(_spam_cache)</span><br><span class="line">[<span class="string">'bar'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> b</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(_spam_cache)</span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>One immediate concern with this recipe might be its reliance on global variables and a factory function that’s decoupled from the original class definition. One way to clean this up is to put the caching code into a separate manager class and glue things together like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">CachedSpamManager</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self._cache= weakref.WeakValueDictionary()</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">get_spam</span><span class="params">(self, name)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> self._cache:</span><br><span class="line"><span class="meta">... </span>            s= Spam(name)</span><br><span class="line"><span class="meta">... </span>            self._cache[name] = s</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>            s= self._cache[name]</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> s</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self._cache.clear()</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Spam</span>:</span></span><br><span class="line"><span class="meta">... </span>    manager= CachedSpamManager()</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.name=name</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'name:'</span>, name)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">get_spam</span><span class="params">(name)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> Spam.manager.get_spam(name)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Another design consideration is whether or not you want to leave the class definition exposed to the user. If you do nothing, a user can easily make instances, bypassing the caching mechanism:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = Spam(<span class="string">'foo'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = Spam(<span class="string">'foo'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>If preventing this is important, you can take certain steps to avoid it. For example, you might give the class a name starting with an underscore, such as <strong>_Spam</strong>, which at least gives the user a clue that they shouldn’t access it directly.</p><p>Alternatively, if you want to give users a stronger hint that they shouldn’t instantiate Spam instances directly, you can make <strong>__init__()</strong> raise an exception and use a class method to make an alternate constructor like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Spam</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">raise</span> RuntimeError(<span class="string">'Can not instantiate directly'</span>)</span><br><span class="line"><span class="meta">... </span>    @classmethod</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">_new</span><span class="params">(cls, name)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self= cls.__new__(cls)</span><br><span class="line"><span class="meta">... </span>        self.name = name</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">CachedSpamManager</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self._cache= weakref.WeakValueDictionary()</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">get_spam</span><span class="params">(self, name)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> self._cache:</span><br><span class="line"><span class="meta">... </span>            s= Spam._new(name)</span><br><span class="line"><span class="meta">... </span>            self._cache[name] = s</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>            s= self._cache[name]</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> s</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self._cache.clear()</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Changing-the-String-Representation-of-Instances&quot;&gt;&lt;a href=&quot;#Changing-the-String-Representation-of-Instances&quot; class=&quot;headerlink&quot; title=&quot;Changing the String Representation of Instances&quot;&gt;&lt;/a&gt;Changing the String Representation of Instances&lt;/h2&gt;&lt;p&gt;To change the string representation of an instance, define the &lt;strong&gt;__str__()&lt;/strong&gt; and &lt;strong&gt;__repr__()&lt;/strong&gt; methods.&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C07_Functions</title>
    <link href="blog.whistlestop.ml/2018/12/15/C07-Functions/"/>
    <id>blog.whistlestop.ml/2018/12/15/C07-Functions/</id>
    <published>2018-12-15T10:45:04.000Z</published>
    <updated>2018-12-15T11:11:54.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Writing-Functions-That-Accept-Any-Number-of-Arguments"><a href="#Writing-Functions-That-Accept-Any-Number-of-Arguments" class="headerlink" title="Writing Functions That Accept Any Number of Arguments"></a>Writing Functions That Accept Any Number of Arguments</h2><p>To accept any number of keyword arguments, use an argument that starts with **. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> html</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>make_element(<span class="string">'item'</span>, <span class="string">'Albatross'</span>, size=<span class="string">'large'</span>, quantity=<span class="number">6</span>)</span><br><span class="line"><span class="string">'&lt;itemsize= "large" quantity= "6"&gt;Albatross&lt;/item&gt;'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">make_element</span><span class="params">(name, value, **attrs)</span>:</span></span><br><span class="line"><span class="meta">... </span>    keyvals=[<span class="string">'%s= "%s"'</span> %item <span class="keyword">for</span> item <span class="keyword">in</span> attrs.items() ]</span><br><span class="line"><span class="meta">... </span>    attr_str= <span class="string">' '</span>.join(keyvals)</span><br><span class="line"><span class="meta">... </span>    element= <span class="string">'&lt;&#123;name&#125; &#123;attrs&#125;&gt;&#123;value&#125;&lt;/&#123;name&#125;&gt;'</span>.format(</span><br><span class="line"><span class="meta">... </span>        name= name,</span><br><span class="line"><span class="meta">... </span>        value= html.escape(value),</span><br><span class="line"><span class="meta">... </span>        attrs= attr_str)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> element</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>make_element(<span class="string">'item'</span>, <span class="string">'Albatross'</span>, size=<span class="string">'large'</span>, quantity=<span class="number">6</span>)</span><br><span class="line"><span class="string">'&lt;item size= "large" quantity= "6"&gt;Albatross&lt;/item&gt;'</span></span><br></pre></td></tr></table></figure><a id="more"></a> <p>If you want a function that can accept both any number of positional and keyword-only arguments, use * and ** together.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">anyargs</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(args)</span><br><span class="line"><span class="meta">... </span>    print(kwargs)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>A * argument can only appear as the last positional argument in a function definition. A ** argument can only appear as the last argument. A subtle aspect of function definitions is that arguments can still appear after a * argument.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(x, *args, y)</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(x, *args, y, **kwargs)</span>:</span><span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Writing-Functions-That-Only-Accept-Keyword-Arguments"><a href="#Writing-Functions-That-Only-Accept-Keyword-Arguments" class="headerlink" title="Writing Functions That Only Accept Keyword Arguments"></a>Writing Functions That Only Accept Keyword Arguments</h2><p>You want a function to only accept certain arguments by keyword. This feature is easy to implement if you place the keyword arguments after a * argument or a single unnamed *.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">recv</span><span class="params">(maxsize,*,block)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">'Receives a message'</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>recv(<span class="number">1024</span>, <span class="keyword">True</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: recv() takes <span class="number">1</span> positional argument but <span class="number">2</span> were given</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>This technique can also be used to specify keyword arguments for functions that accept a varying number of positional arguments.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">mininum</span><span class="params">(*values, clip= None)</span>:</span></span><br><span class="line"><span class="meta">... </span>    m = min(values)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> clip <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line"><span class="meta">... </span>        m= clip <span class="keyword">if</span> clip &gt; m <span class="keyword">else</span> m</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> m</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mininum(<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">-5</span>,<span class="number">10</span>)</span><br><span class="line"><span class="number">-5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mininum(<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">-5</span>,<span class="number">10</span>, clip= <span class="number">0</span>)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="Attaching-Informational-Metadata-to-Function-Arguments"><a href="#Attaching-Informational-Metadata-to-Function-Arguments" class="headerlink" title="Attaching Informational Metadata to Function Arguments"></a>Attaching Informational Metadata to Function Arguments</h2><p>Function argument annotations can be a useful way to give programmers hints about how a function is supposed to be used. </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x:int,y:int)</span> -&gt; int:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x+ y</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>help(add)</span><br><span class="line">Help on function add <span class="keyword">in</span> module __main__:</span><br><span class="line">add(x:int, y:int) -&gt; int</span><br></pre></td></tr></table></figure><p>Function annotations are merely stored in a function’s <strong>__annotations__</strong> attribute.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add.__annotations__</span><br><span class="line">&#123;'y': &lt;class 'int'&gt;, 'return': &lt;class 'int'&gt;, 'x': &lt;class 'int'&gt;&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><h2 id="Defining-Functions-with-Default-Arguments"><a href="#Defining-Functions-with-Default-Arguments" class="headerlink" title="Defining Functions with Default Arguments"></a>Defining Functions with Default Arguments</h2><p>On the surface, defining a function with optional arguments is easy—simply assign values in the definition and make sure that default arguments appear last. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(a, b=<span class="number">42</span>)</span>:</span></span><br><span class="line">    print(a, b)</span><br><span class="line">spam(<span class="number">1</span>) <span class="comment"># Ok. a=1, b=42</span></span><br><span class="line">spam(<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># Ok. a=1, b=2</span></span><br></pre></td></tr></table></figure><p>If the default value is supposed to be a mutable container, such as a list, set, or dictionary, use <strong>None</strong> as the default and write code like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Using a list as a default value</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(a, b=None)</span>:</span></span><br><span class="line">     <span class="keyword">if</span> b <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">         b = []</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure><p>If, instead of providing a default value, you want to write code that merely tests whether an optional argument was given an interesting value or not, use this idiom:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_no_value = object()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(a, b=_no_value)</span>:</span></span><br><span class="line">     <span class="keyword">if</span> b <span class="keyword">is</span> _no_value:</span><br><span class="line">           print(<span class="string">'No b value supplied'</span>)</span><br><span class="line">           ...</span><br></pre></td></tr></table></figure><p>Here’s how this function behaves:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam(<span class="number">1</span>)</span><br><span class="line">No b value supplied</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam(<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># b = 2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam(<span class="number">1</span>, <span class="keyword">None</span>) <span class="comment"># b = None</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>Carefully observe that there is a distinction between passing no value at all and passing a value of <strong>None</strong>.</p><p>The tricky part here is that you can’t use a default value of <strong>None</strong>, <strong>0</strong>, or <strong>False</strong> to test for the presence of a user-supplied argument (since all of these are perfectly valid values that a user might supply). Thus, you need something else to test against.</p><p>To solve this problem, you can create a unique private instance of object, as shown in the solution (the <strong>_no_value</strong> variable). In the function, you then check the identity of the supplied argument against this special value to see if an argument was supplied or not. The thinking here is that it would be extremely unlikely for a user to pass the <strong>_no_value</strong> instance in as an input value. Therefore, it becomes a safe value to check against if you’re trying to determine whether an argument was supplied or not. The values assigned as a default are bound only once at the time of function definition.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(a, b=x)</span>:</span></span><br><span class="line"><span class="meta">... </span>print(a, b)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam(<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">23</span> <span class="comment"># Has no effect</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam(<span class="number">1</span>)</span><br><span class="line"><span class="number">1</span> <span class="number">42</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>Notice how changing the variable <strong>x</strong> (which was used as a default value) has no effect whatsoever. This is because the default value was fixed at function definition time.</p><p>Second, the values assigned as defaults should always be immutable objects, such as <strong>None</strong>, <strong>True</strong>, <strong>False</strong>, numbers, or strings. Specifically, never write code like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(a, b=[])</span>:</span> <span class="comment"># NO!</span></span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><p>If you do this, you can run into all sorts of trouble if the default value ever escapes the function and gets modified. Such changes will permanently alter the default value across future function calls. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">spam</span><span class="params">(a, b=[])</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(b)</span><br><span class="line"><span class="meta">... </span>     <span class="keyword">return</span> b</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = spam(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.append(<span class="number">99</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.append(<span class="string">'Yow!'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[<span class="number">99</span>, <span class="string">'Yow!'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>spam(<span class="number">1</span>) <span class="comment"># Modified list gets returned!</span></span><br><span class="line">[<span class="number">99</span>, <span class="string">'Yow!'</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Capturing-Variables-in-Anonymous-Functions"><a href="#Capturing-Variables-in-Anonymous-Functions" class="headerlink" title="Capturing Variables in Anonymous Functions"></a>Capturing Variables in Anonymous Functions</h2><p>You’ve defined an anonymous function using lambda, but you also need to capture the values of certain variables at the time of definition. Consider the behavior of the following code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="keyword">lambda</span> y: x + y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="keyword">lambda</span> y: x + y</span><br></pre></td></tr></table></figure><p>Now ask yourself a question. What are the values of <strong>a(10)</strong> and <strong>b(10)</strong>? If you think the results might be 20 and 30, you would be wrong:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a(<span class="number">10</span>)</span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b(<span class="number">10</span>)</span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure></p><p>The problem here is that the value of <strong>x</strong> used in the lambda expression is a free variable that gets bound at runtime, not definition time. Thus, the value of <strong>x</strong> in the <strong>lambda</strong> expressions is whatever the value of the <strong>x</strong> variable happens to be at the time of execution.</p><p>The problem addressed in this recipe is something that tends to come up in code that tries to be just a little bit too clever with the use of lambda functions. For example, creating a list of lambda expressions using a list comprehension or in a loop of some kind and expecting the lambda functions to remember the iteration variable at the time of definition. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>funcs = [<span class="keyword">lambda</span> x: x+n <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> f <span class="keyword">in</span> funcs:</span><br><span class="line"><span class="meta">... </span>print(f(<span class="number">0</span>))</span><br><span class="line">...</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>Notice how all functions think that n has the last value during iteration. Now compare to the following:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>funcs = [<span class="keyword">lambda</span> x, n=n: x+n <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> f <span class="keyword">in</span> funcs:</span><br><span class="line"><span class="meta">... </span>print(f(<span class="number">0</span>))</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Carrying-Extra-State-with-Callback-Functions"><a href="#Carrying-Extra-State-with-Callback-Functions" class="headerlink" title="Carrying Extra State with Callback Functions"></a>Carrying Extra State with Callback Functions</h2><p>You’re writing code that relies on the use of callback functions (e.g., event handlers, completion callbacks, etc.), but you want to have the callback function carry extra state for use inside the callback function.</p><p>To illustrate and for the purposes of testing, define the following function, which invokes a callback:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">apply_async</span><span class="params">(func, args, *, callback)</span>:</span></span><br><span class="line"><span class="meta">... </span>    result = func(*args)</span><br><span class="line"><span class="meta">... </span>    callback(result)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x + y</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>One way to carry extra information in a callback is to use a bound-method instead of a simple function. For example, this class keeps an internal sequence number that is incremented every time a result is received:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">ResultHandler</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.sequence= <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">handler</span><span class="params">(self, result)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.sequence+= <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'[&#123;&#125;] Got: &#123;&#125;'</span>.format(self.sequence, result))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r= ResultHandler()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>apply_async(add, (<span class="number">2</span>,<span class="number">3</span>), callback= r.handler)</span><br><span class="line">[<span class="number">1</span>] Got: <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>apply_async(add, (<span class="string">'hello'</span>, <span class="string">'world'</span>), callback=r.handler)</span><br><span class="line">[<span class="number">2</span>] Got: helloworld</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>As an alternative to a class, you can also use a closure to capture state.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">make_handler</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    sequence= <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">handler</span><span class="params">(result)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">nonlocal</span> sequence</span><br><span class="line"><span class="meta">... </span>        sequence+= <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'[&#123;&#125;] Got: &#123;&#125;'</span>.format(sequence, result))</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> handler</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>handler= make_handler()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>apply_async(add, (<span class="number">2</span>, <span class="number">3</span>), callback=handler)</span><br><span class="line">[<span class="number">1</span>] Got: <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>apply_async(add, (<span class="string">'hello'</span>, <span class="string">'world'</span>), callback=handler)</span><br><span class="line">[<span class="number">2</span>] Got: helloworld</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>As yet another variation on this theme, you can sometimes use a <strong>coroutine</strong> to accomplish the same thing:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">make_handler</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    sequence= <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="meta">... </span>        result= <span class="keyword">yield</span></span><br><span class="line"><span class="meta">... </span>        sequence += <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'[&#123;&#125;] Got: &#123;&#125;'</span>.format(sequence, result))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>handler= make_handler()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(handler)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>apply_async(add, (<span class="number">2</span>,<span class="number">3</span>), callback= handler.send)</span><br><span class="line">[<span class="number">1</span>] Got: <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>apply_async(add, (<span class="number">2</span>,<span class="number">3</span>), callback= handler.send)</span><br><span class="line">[<span class="number">2</span>] Got: <span class="number">5</span></span><br></pre></td></tr></table></figure><p>You can also carry state into a callback using an extra argument and partial function application. For example:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">SequenceNo</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.sequence= <span class="number">0</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">handler</span><span class="params">(result, seq)</span>:</span></span><br><span class="line"><span class="meta">... </span>    seq.sequence += <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'[&#123;&#125;] Got: &#123;&#125;'</span>.format(seq.sequence, result))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>seq= SequenceNo()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>apply_async(add, (<span class="number">2</span>,<span class="number">3</span>), callback= partial(handler, seq= seq))</span><br><span class="line">[<span class="number">1</span>] Got: <span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>apply_async(add, (<span class="number">2</span>,<span class="number">3</span>), callback= partial(handler, seq= seq))</span><br><span class="line">[<span class="number">2</span>] Got: <span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><h2 id="Inlining-Callback-Functions"><a href="#Inlining-Callback-Functions" class="headerlink" title="Inlining Callback Functions"></a>Inlining Callback Functions</h2><p>Callback functions can be inlined into a function using generators and coroutines. To illustrate, suppose you have a function that performs work and invokes a callback as follows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">apply_async</span><span class="params">(func, args, *, callback)</span>:</span></span><br><span class="line"><span class="meta">... </span>    result= function(*args)</span><br><span class="line"><span class="meta">... </span>    callback(result)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Async</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func, args)</span>:</span></span><br><span class="line">        self.func = func</span><br><span class="line">        self.args = args</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inlined_async</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args)</span>:</span></span><br><span class="line">        f = func(*args)</span><br><span class="line">        result_queue = Queue()</span><br><span class="line">        result_queue.put(<span class="keyword">None</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            result = result_queue.get()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                a = f.send(result)</span><br><span class="line">                apply_async(a.func, a.args, callback=result_queue.put)</span><br><span class="line">            <span class="keyword">except</span> StopIteration:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><h2 id="These-two-fragments-of-code-will-allow-you-to-inline-the-callback-steps-using-yield-statements"><a href="#These-two-fragments-of-code-will-allow-you-to-inline-the-callback-steps-using-yield-statements" class="headerlink" title="These two fragments of code will allow you to inline the callback steps using yield statements."></a>These two fragments of code will allow you to inline the callback steps using <strong>yield</strong> statements.</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x+ y</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@inlined_async</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    r= <span class="keyword">yield</span> Async(add, (<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="meta">... </span>    print(r)</span><br><span class="line"><span class="meta">... </span>    r= <span class="keyword">yield</span> Async(add, (<span class="string">'hello'</span>, <span class="string">'world'</span>))</span><br><span class="line"><span class="meta">... </span>    print(r)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"><span class="meta">... </span>        r= <span class="keyword">yield</span> Async(add, (n,n))</span><br><span class="line"><span class="meta">... </span>        print(r)</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'Goodbye'</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test()</span><br><span class="line"><span class="number">5</span></span><br><span class="line">helloworld</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line">Goodbye</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>First, in code involving callbacks, the whole point is that the current calculation will suspend and resume at some later point in time (e.g., asynchronously). When the calculation resumes, the callback will get executed to continue the processing. The <strong>apply_async()</strong> function illustrates the essential parts of executing the callback, although in reality it might be much more complicated (involving threads, processes, event handlers, etc.).</p><p>The idea that a calculation will suspend and resume naturally maps to the execution model of a generator function. Specifically, the <strong>yield</strong> operation makes a generator function emit a value and suspend. Subsequent calls to the <strong>__next__()</strong> or <strong>send()</strong> method of a generator will make it start again.</p><p>With this in mind, the core of this recipe is found in the <strong>inline_async()</strong> decorator function. The key idea is that the decorator will step the generator function through all of its <strong>yield</strong> statements, one at a time. To do this, a result queue is created and initially populated with a value of <strong>None</strong>. A loop is then initiated in which a result is popped off the queue and sent into the generator. This advances to the next <strong>yield</strong>, at which point an instance of <strong>Async</strong> is received. The loop then looks at the function and arguments, and initiates the asynchronous calculation <strong>apply_async()</strong>. However, the sneakiest part of this calculation is that instead of using a normal callback function, the callback is set to the queue <strong>put()</strong> method.</p><p>At this point, it is left somewhat open as to precisely what happens. The main loop immediately goes back to the top and simply executes a <strong>get()</strong> operation on the queue. If data is present, it must be the result placed there by the <strong>put()</strong> callback. If nothing is there, the operation blocks, waiting for a result to arrive at some future time. How that might happen depends on the precise implementation of the <strong>apply_async()</strong> function.</p><h2 id="Accessing-Variables-Defined-Inside-a-Closure"><a href="#Accessing-Variables-Defined-Inside-a-Closure" class="headerlink" title="Accessing Variables Defined Inside a Closure"></a>Accessing Variables Defined Inside a Closure</h2><p>Normally, the inner variables of a closure are completely hidden to the outside world. However, you can provide access by writing accessor functions and attaching them to the closure as function attributes. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">sample</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    n=<span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'n='</span>, n)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">get_n</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> n</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">set_n</span><span class="params">(value)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">nonlocal</span> n</span><br><span class="line"><span class="meta">... </span>        n= value</span><br><span class="line"><span class="meta">... </span>    func.get_n= get_n</span><br><span class="line"><span class="meta">... </span>    func.set_n= set_n</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> func</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f=sample()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f()</span><br><span class="line">n= <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.set_n(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f()</span><br><span class="line">n= <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.get_n()</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p>A slight extension to this recipe can be made to have closures emulate instances of a class. All you need to do is copy the inner functions over to the dictionary of an instance and return it. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">ClosureInstance</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, locals= None)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> locals <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line"><span class="meta">... </span>            locals= sys._getframe(<span class="number">1</span>).f_locals</span><br><span class="line"><span class="meta">... </span>            print(locals)</span><br><span class="line"><span class="meta">... </span>        self.__dict__.update((key, value) <span class="keyword">for</span> key, value <span class="keyword">in</span> locals.items() <span class="keyword">if</span> callable(value))</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self.__dict__[<span class="string">'__len__'</span>]()</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">Stack</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    items=[]</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(item)</span>:</span></span><br><span class="line"><span class="meta">... </span>        items.append(item)</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> items.pop()</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> len(items)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> ClosureInstance()</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=Stack()</span><br><span class="line">&#123;<span class="string">'pop'</span>: &lt;function Stack.&lt;locals&gt;.pop at <span class="number">0x010BB810</span>&gt;, <span class="string">'items'</span>: [], <span class="string">'push'</span>: &lt;function Stack.&lt;locals&gt;.push at <span class="number">0x010BB618</span>&gt;, <span class="string">'__len__'</span>: &lt;function Stack.&lt;locals&gt;.__len__ at <span class="number">0x010BB660</span>&gt;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.push(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.push(<span class="string">'he'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(s)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.pop()</span><br><span class="line"><span class="string">'he'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>However, should you be inclined to do something like this in your code, be aware that it’s still a rather weird substitute for a real class. For example, major features such as inheritance, properties, descriptors, or class methods don’t work. You also have to play some tricks to get special methods to work (e.g., see the implementation of <strong>__len__()</strong> in <strong>ClosureInstance</strong>).</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Writing-Functions-That-Accept-Any-Number-of-Arguments&quot;&gt;&lt;a href=&quot;#Writing-Functions-That-Accept-Any-Number-of-Arguments&quot; class=&quot;headerlink&quot; title=&quot;Writing Functions That Accept Any Number of Arguments&quot;&gt;&lt;/a&gt;Writing Functions That Accept Any Number of Arguments&lt;/h2&gt;&lt;p&gt;To accept any number of keyword arguments, use an argument that starts with **. &lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;make_element(&lt;span class=&quot;string&quot;&gt;&#39;item&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Albatross&#39;&lt;/span&gt;, size=&lt;span class=&quot;string&quot;&gt;&#39;large&#39;&lt;/span&gt;, quantity=&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;itemsize= &quot;large&quot; quantity= &quot;6&quot;&amp;gt;Albatross&amp;lt;/item&amp;gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;make_element&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name, value, **attrs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    keyvals=[&lt;span class=&quot;string&quot;&gt;&#39;%s= &quot;%s&quot;&#39;&lt;/span&gt; %item &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; attrs.items() ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    attr_str= &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;.join(keyvals)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    element= &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;&amp;#123;name&amp;#125; &amp;#123;attrs&amp;#125;&amp;gt;&amp;#123;value&amp;#125;&amp;lt;/&amp;#123;name&amp;#125;&amp;gt;&#39;&lt;/span&gt;.format(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;        name= name,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;        value= html.escape(value),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;        attrs= attr_str)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; element&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;make_element(&lt;span class=&quot;string&quot;&gt;&#39;item&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Albatross&#39;&lt;/span&gt;, size=&lt;span class=&quot;string&quot;&gt;&#39;large&#39;&lt;/span&gt;, quantity=&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;item size= &quot;large&quot; quantity= &quot;6&quot;&amp;gt;Albatross&amp;lt;/item&amp;gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C06_Data_Encoding_and_Processing</title>
    <link href="blog.whistlestop.ml/2018/12/15/C06-Data-Encoding-and-Processing/"/>
    <id>blog.whistlestop.ml/2018/12/15/C06-Data-Encoding-and-Processing/</id>
    <published>2018-12-15T10:44:23.000Z</published>
    <updated>2018-12-15T11:11:50.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reading-and-Writing-CSV-Data"><a href="#Reading-and-Writing-CSV-Data" class="headerlink" title="Reading and Writing CSV Data"></a>Reading and Writing CSV Data</h2><p>For most kinds of CSV data, use the <strong>csv</strong> library.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'stocks.csv'</span>) <span class="keyword">as</span> f:</span><br><span class="line">     f_csv = csv.reader(f)</span><br><span class="line">     headers = next(f_csv)</span><br><span class="line">     <span class="keyword">for</span> row <span class="keyword">in</span> f_csv:</span><br><span class="line">        <span class="comment"># Process row</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><a id="more"></a> <p>In the preceding code, row will be a <strong>tuple</strong>. Thus, to access certain fields, you will need to use indexing, such as <strong>row[0]</strong> (Symbol) and <strong>row[4]</strong> (Change).</p><p>Since such indexing can often be confusing, this is one place where you might want to consider the use of <strong>named tuples</strong>. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'stock.csv'</span>) <span class="keyword">as</span> f:</span><br><span class="line">     f_csv = csv.reader(f)</span><br><span class="line">     headings = next(f_csv)</span><br><span class="line">     Row = namedtuple(<span class="string">'Row'</span>, headings)</span><br><span class="line">     <span class="keyword">for</span> r <span class="keyword">in</span> f_csv:</span><br><span class="line">     row = Row(*r)</span><br><span class="line">           <span class="comment">#Process row</span></span><br><span class="line">           ...</span><br></pre></td></tr></table></figure><p>This would allow you to use the column headers such as <strong>row.Symbol</strong> and <strong>row.Change</strong> instead of indices. It should be noted that this only works if the column headers are valid Python identifiers.</p><p>Another alternative is to read the data as a sequence of dictionaries instead.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'stocks.csv'</span>) <span class="keyword">as</span> f:</span><br><span class="line">      f_csv = csv.DictReader(f)</span><br><span class="line">      <span class="keyword">for</span> row <span class="keyword">in</span> f_csv:</span><br><span class="line">      <span class="comment"># process row</span></span><br><span class="line">           ...</span><br></pre></td></tr></table></figure></p><p>In this version, you would access the elements of each row using the row headers. For example, <strong>row[‘Symbol’]</strong> or <strong>row[‘Change’]</strong>.</p><p>To write CSV data, you also use the <strong>csv</strong> module but create a writer object. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>headers = [<span class="string">'Symbol'</span>, <span class="string">'Price'</span>, <span class="string">'Date'</span>, <span class="string">'Time'</span>, <span class="string">'Change'</span>, <span class="string">'Volume'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rows = [&#123;<span class="string">'Symbol'</span>:<span class="string">'AA'</span>, <span class="string">'Price'</span>:<span class="number">39.48</span>, <span class="string">'Date'</span>:<span class="string">'6/11/2007'</span>,</span><br><span class="line"><span class="meta">... </span> <span class="string">'Time'</span>:<span class="string">'9:36am'</span>, <span class="string">'Change'</span>:<span class="number">-0.18</span>, <span class="string">'Volume'</span>:<span class="number">181800</span>&#125;,</span><br><span class="line"><span class="meta">... </span> &#123;<span class="string">'Symbol'</span>:<span class="string">'AIG'</span>, <span class="string">'Price'</span>: <span class="number">71.38</span>, <span class="string">'Date'</span>:<span class="string">'6/11/2007'</span>,</span><br><span class="line"><span class="meta">... </span> <span class="string">'Time'</span>:<span class="string">'9:36am'</span>, <span class="string">'Change'</span>:<span class="number">-0.15</span>, <span class="string">'Volume'</span>: <span class="number">195500</span>&#125;,</span><br><span class="line"><span class="meta">... </span> &#123;<span class="string">'Symbol'</span>:<span class="string">'AXP'</span>, <span class="string">'Price'</span>: <span class="number">62.58</span>, <span class="string">'Date'</span>:<span class="string">'6/11/2007'</span>,</span><br><span class="line"><span class="meta">... </span> <span class="string">'Time'</span>:<span class="string">'9:36am'</span>, <span class="string">'Change'</span>:<span class="number">-0.46</span>, <span class="string">'Volume'</span>: <span class="number">935000</span>&#125;,</span><br><span class="line"><span class="meta">... </span> ]</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'stocks.csv'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>    f_csv= csv.DictWriter(f, headers)</span><br><span class="line"><span class="meta">... </span>    f_csv.writeheader()</span><br><span class="line"><span class="meta">... </span>    f_csv.writerows(rows)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p> Here is one example of performing extra type conversions on CSV data:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>field_types = [ (<span class="string">'Price'</span>, float),</span><br><span class="line"><span class="meta">... </span> (<span class="string">'Change'</span>, float),</span><br><span class="line"><span class="meta">... </span> (<span class="string">'Volume'</span>, int) ]</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'stock.csv'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> row <span class="keyword">in</span> csv.DictReader(f):</span><br><span class="line"><span class="meta">... </span>        row.update((key, conversion(row[key])) <span class="keyword">for</span> key, conversion <span class="keyword">in</span> field_types)</span><br><span class="line"><span class="meta">... </span>        print(row)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">&#123;<span class="string">'Price'</span>: <span class="number">39.48</span>, <span class="string">'Change'</span>: <span class="number">-0.18</span>, <span class="string">'Time'</span>: <span class="string">'9:36am'</span>, <span class="string">'Volume'</span>: <span class="number">181800</span>, <span class="string">'Symbol'</span>: <span class="string">'AA'</span>, <span class="string">'Date'</span>: <span class="string">'6/11/2007'</span>&#125;</span><br><span class="line">&#123;<span class="string">'Price'</span>: <span class="number">71.38</span>, <span class="string">'Change'</span>: <span class="number">-0.15</span>, <span class="string">'Time'</span>: <span class="string">'9:36am'</span>, <span class="string">'Volume'</span>: <span class="number">195500</span>, <span class="string">'Symbol'</span>: <span class="string">'AIG'</span>, <span class="string">'Date'</span>: <span class="string">'6/11/2007'</span>&#125;</span><br><span class="line">&#123;<span class="string">'Price'</span>: <span class="number">62.58</span>, <span class="string">'Change'</span>: <span class="number">-0.46</span>, <span class="string">'Time'</span>: <span class="string">'9:36am'</span>, <span class="string">'Volume'</span>: <span class="number">935000</span>, <span class="string">'Symbol'</span>: <span class="string">'AXP'</span>, <span class="string">'Date'</span>: <span class="string">'6/11/2007'</span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">## Reading and Writing JSON Data</span></span><br><span class="line"></span><br><span class="line">JSON encoding supports the basic types of **<span class="keyword">None</span>**, **bool**, **int**, **float**, <span class="keyword">and</span> **str**, <span class="keyword">as</span> well <span class="keyword">as</span> **lists**, **tuples**, <span class="keyword">and</span> **dictionaries** containing those types. </span><br><span class="line"></span><br><span class="line">The format of JSON encoding <span class="keyword">is</span> almost identical to Python syntax <span class="keyword">except</span> <span class="keyword">for</span> a few minor changes. For instance, **<span class="keyword">True</span>** <span class="keyword">is</span> mapped to **true**, **<span class="keyword">False</span>** <span class="keyword">is</span> mapped to **false**, <span class="keyword">and</span> **<span class="keyword">None</span>** <span class="keyword">is</span> mapped to **null**.</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="string">'a'</span>: <span class="keyword">True</span>,</span><br><span class="line"><span class="meta">... </span><span class="string">'b'</span>: <span class="string">'Hello'</span>,</span><br><span class="line"><span class="meta">... </span><span class="string">'c'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(d)</span><br><span class="line"><span class="string">'&#123;"b": "Hello", "c": null, "a": true&#125;'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>Normally, JSON decoding will create <strong>dicts</strong> or <strong>lists</strong> from the supplied data. If you want to create different kinds of objects, supply the <strong>object_pairs_hook</strong> or <strong>object_hook</strong> to <strong>json.loads()</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'&#123;"name": "ACME", "shares": 50, "price": 490.1&#125;'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = json.loads(s, object_pairs_hook=OrderedDict)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data</span><br><span class="line">OrderedDict([(<span class="string">'name'</span>, <span class="string">'ACME'</span>), (<span class="string">'shares'</span>, <span class="number">50</span>), (<span class="string">'price'</span>, <span class="number">490.1</span>)])</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>Turn a JSON dictionary into a Python object</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">JSONObject</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, d)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.__dict__=d</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data= json.loads(s, object_hook= JSONObject)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data.name</span><br><span class="line"><span class="string">'ACME'</span></span><br></pre></td></tr></table></figure><p>The dictionary created by decoding the JSON data is passed as a single argument to <strong>__init__()</strong>. From there, you are free to use it as you will, such as using it directly as the instance dictionary of the object.</p><p> If you would like the output to be nicely formatted, you can use the indent argument to <strong>json.dumps()</strong>. This causes the output to be pretty printed in a format similar to that with the <strong>pprint()</strong> function. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(json.dumps(data, indent=<span class="number">4</span>))</span><br><span class="line">&#123;</span><br><span class="line"> <span class="string">"price"</span>: <span class="number">542.23</span>,</span><br><span class="line"> <span class="string">"name"</span>: <span class="string">"ACME"</span>,</span><br><span class="line"> <span class="string">"shares"</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>If you want the keys to be sorted on output, used the <strong>sort_keys</strong> argument:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(json.dumps(data, sort_keys=<span class="keyword">True</span>))</span><br><span class="line">&#123;<span class="string">"name"</span>: <span class="string">"ACME"</span>, <span class="string">"price"</span>: <span class="number">542.23</span>, <span class="string">"shares"</span>: <span class="number">100</span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>Instances are not normally serializable as JSON. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Point</span>:</span></span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line"><span class="meta">... </span>self.x = x</span><br><span class="line"><span class="meta">... </span>self.y = y</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Point(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(p)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"> File <span class="string">"/usr/local/lib/python3.3/json/__init__.py"</span>, line <span class="number">226</span>, <span class="keyword">in</span> dumps</span><br><span class="line"> <span class="keyword">return</span> _default_encoder.encode(obj)</span><br><span class="line"> File <span class="string">"/usr/local/lib/python3.3/json/encoder.py"</span>, line <span class="number">187</span>, <span class="keyword">in</span> encode</span><br><span class="line"> chunks = self.iterencode(o, _one_shot=<span class="keyword">True</span>)</span><br><span class="line"> File <span class="string">"/usr/local/lib/python3.3/json/encoder.py"</span>, line <span class="number">245</span>, <span class="keyword">in</span> iterencode</span><br><span class="line"> <span class="keyword">return</span> _iterencode(o, <span class="number">0</span>)</span><br><span class="line"> File <span class="string">"/usr/local/lib/python3.3/json/encoder.py"</span>, line <span class="number">169</span>, <span class="keyword">in</span> default</span><br><span class="line"> <span class="keyword">raise</span> TypeError(repr(o) + <span class="string">" is not JSON serializable"</span>)</span><br><span class="line">TypeError: &lt;__main__.Point object at <span class="number">0x1006f2650</span>&gt; <span class="keyword">is</span> <span class="keyword">not</span> JSON serializable</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>If you want to serialize instances, you can supply a function that takes an instance as input and returns a dictionary that can be serialized. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">serialize_instance</span><span class="params">(obj)</span>:</span></span><br><span class="line"><span class="meta">... </span>    d=&#123;<span class="string">'__classname__'</span>: type(obj).__name__&#125;</span><br><span class="line"><span class="meta">... </span>    d.update(vars(obj))</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> d</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>If you want to get an instance back, you could write code like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>classes=&#123;<span class="string">'Point'</span>: Point&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">unserialize_object</span><span class="params">(d)</span>:</span></span><br><span class="line"><span class="meta">... </span>    clsname= d.pop(<span class="string">'__classname__'</span>, <span class="keyword">None</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> clsname:</span><br><span class="line"><span class="meta">... </span>        cls= classes[clsname]</span><br><span class="line"><span class="meta">... </span>        obj= cls.__new__(cls)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">for</span> key, value <span class="keyword">in</span> d.items():</span><br><span class="line"><span class="meta">... </span>            setattr(obj, key, value)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> obj</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> d</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p= Point(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s= json.dumps(p, default=serialize_instance)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="string">'&#123;"__classname__": "Point", "x": 2, "y": 3&#125;'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a= json.loads(s, object_hook= unserialize_object)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&lt;__main__.Point object at <span class="number">0x00D00D10</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.x</span><br><span class="line"><span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Parsing-Simple-XML-Data"><a href="#Parsing-Simple-XML-Data" class="headerlink" title="Parsing Simple XML Data"></a>Parsing Simple XML Data</h2><p>The <strong>xml.etree.ElementTree</strong> module can be used to extract data from simple XML documents. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> xml.etree.ElementTree <span class="keyword">import</span> parse</span><br><span class="line"><span class="comment"># Download the RSS feed and parse it</span></span><br><span class="line">u = urlopen(<span class="string">'http://planet.python.org/rss20.xml'</span>)</span><br><span class="line">doc = parse(u)</span><br><span class="line"><span class="comment"># Extract and output tags of interest</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> doc.iterfind(<span class="string">'channel/item'</span>):</span><br><span class="line">    title = item.findtext(<span class="string">'title'</span>)</span><br><span class="line">     date = item.findtext(<span class="string">'pubDate'</span>)</span><br><span class="line">     link = item.findtext(<span class="string">'link'</span>)</span><br><span class="line">     print(title)</span><br><span class="line">     print(date)</span><br><span class="line">     print(link)</span><br><span class="line">     print()</span><br><span class="line">Steve Holden: Python <span class="keyword">for</span> Data Analysis</span><br><span class="line">Mon, <span class="number">19</span> Nov <span class="number">2012</span> <span class="number">02</span>:<span class="number">13</span>:<span class="number">51</span> +<span class="number">0000</span></span><br><span class="line">http://holdenweb.blogspot.com/<span class="number">2012</span>/<span class="number">11</span>/python-<span class="keyword">for</span>-data-analysis.html</span><br><span class="line"></span><br><span class="line">Vasudev Ram: The Python Data model (<span class="keyword">for</span> v2 <span class="keyword">and</span> v3)</span><br><span class="line">Sun, <span class="number">18</span> Nov <span class="number">2012</span> <span class="number">22</span>:<span class="number">06</span>:<span class="number">47</span> +<span class="number">0000</span></span><br><span class="line">http://jugad2.blogspot.com/<span class="number">2012</span>/<span class="number">11</span>/the-python-data-model.html</span><br></pre></td></tr></table></figure><p>The <strong>xml.etree.ElementTree.parse()</strong> function parses the entire XML document into a document object. From there, you use methods such as <strong>find()</strong>, <strong>iterfind()</strong>, and <strong>findtext()</strong> to search for specific XML elements. The arguments to these functions are the names of a specific tag, such as <strong>channel/item</strong> or <strong>title</strong>.</p><p>Each element represented by the <strong>ElementTree</strong> module has a few essential attributes and methods that are useful when parsing. The <strong>tag</strong> attribute contains the name of the tag, the <strong>text</strong> attribute contains enclosed text, and the <strong>get()</strong> method can be used to extract attributes (if any).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>e=doc.find(<span class="string">'channel/title'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e</span><br><span class="line">&lt;Element <span class="string">'title'</span> at <span class="number">0x0101F540</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.tag</span><br><span class="line"><span class="string">'title'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.text</span><br><span class="line"><span class="string">'Planet Python'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.get(<span class="string">'some_attribute'</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Parsing-Huge-XML-Files-Incrementally"><a href="#Parsing-Huge-XML-Files-Incrementally" class="headerlink" title="Parsing Huge XML Files Incrementally"></a>Parsing Huge XML Files Incrementally</h2><p>You need to extract data from a huge XML document using as little memory as possible,  which are encoded like this:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># potholes.xml</span><br><span class="line"> <span class="tag">&lt;<span class="name">response</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">row</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">row</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">creation_date</span>&gt;</span>2012-11-18T00:00:00<span class="tag">&lt;/<span class="name">creation_date</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">status</span>&gt;</span>Completed<span class="tag">&lt;/<span class="name">status</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">completion_date</span>&gt;</span>2012-11-18T00:00:00<span class="tag">&lt;/<span class="name">completion_date</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">service_request_number</span>&gt;</span>12-01906549<span class="tag">&lt;/<span class="name">service_request_number</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">type_of_service_request</span>&gt;</span>Pot Hole in Street<span class="tag">&lt;/<span class="name">type_of_service_request</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">current_activity</span>&gt;</span>Final Outcome<span class="tag">&lt;/<span class="name">current_activity</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">most_recent_action</span>&gt;</span>CDOT Street Cut ... Outcome<span class="tag">&lt;/<span class="name">most_recent_action</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">street_address</span>&gt;</span>4714 S TALMAN AVE<span class="tag">&lt;/<span class="name">street_address</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">zip</span>&gt;</span>60632<span class="tag">&lt;/<span class="name">zip</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">x_coordinate</span>&gt;</span>1159494.68618856<span class="tag">&lt;/<span class="name">x_coordinate</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">y_coordinate</span>&gt;</span>1873313.83503384<span class="tag">&lt;/<span class="name">y_coordinate</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ward</span>&gt;</span>14<span class="tag">&lt;/<span class="name">ward</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">police_district</span>&gt;</span>9<span class="tag">&lt;/<span class="name">police_district</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">community_area</span>&gt;</span>58<span class="tag">&lt;/<span class="name">community_area</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">latitude</span>&gt;</span>41.808090232127896<span class="tag">&lt;/<span class="name">latitude</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">longitude</span>&gt;</span>-87.69053684711305<span class="tag">&lt;/<span class="name">longitude</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">location</span> <span class="attr">latitude</span>=<span class="string">"41.808090232127896"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">longitude</span>=<span class="string">"-87.69053684711305"</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">row</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">row</span> <span class="attr">...</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Suppose you want to write a script that ranks ZIP codes by the number of pothole reports. To do it, you could write code like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xml.etree.ElementTree <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">potholes_by_zip = Counter()</span><br><span class="line">doc = parse(<span class="string">'potholes.xml'</span>)</span><br><span class="line"><span class="keyword">for</span> pothole <span class="keyword">in</span> doc.iterfind(<span class="string">'row/row'</span>):</span><br><span class="line">     potholes_by_zip[pothole.findtext(<span class="string">'zip'</span>)] += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> zipcode, num <span class="keyword">in</span> potholes_by_zip.most_common():</span><br><span class="line">    print(zipcode, num)</span><br></pre></td></tr></table></figure><p>The only problem with this script is that it reads and parses the entire XML file into memory. </p><p>Here is a simple function that can be used to incrementally process huge XML files using a very small memory footprint:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> xml.etree.ElementTree <span class="keyword">import</span> iterparse</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">parse_and_remove</span><span class="params">(filename, path)</span>:</span></span><br><span class="line"><span class="meta">... </span>    path_parts= path.split(<span class="string">'/'</span>)</span><br><span class="line"><span class="meta">... </span>    doc= iterparse(filename,(<span class="string">'start'</span>, <span class="string">'end'</span>))</span><br><span class="line"><span class="meta">... </span>    next(doc)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>    tag_stack=[]</span><br><span class="line"><span class="meta">... </span>    elem_stack=[]</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> event, elem <span class="keyword">in</span> doc:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> event==<span class="string">'start'</span>:</span><br><span class="line"><span class="meta">... </span>            tag_stack.append(elem.tag)</span><br><span class="line"><span class="meta">... </span>            elem_stack.append(elem)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">elif</span> event==<span class="string">'end'</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">if</span> tag_stack== path_parts:</span><br><span class="line"><span class="meta">... </span>                <span class="keyword">yield</span> elem</span><br><span class="line"><span class="meta">... </span>                elem_stack[<span class="number">-2</span>].remove(elem)</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>                tag_stack.pop()</span><br><span class="line"><span class="meta">... </span>                elem_stack.pop()</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">except</span> IndexError:</span><br><span class="line"><span class="meta">... </span>                <span class="keyword">pass</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>First, the <strong>iterparse()</strong> method allows incremental processing of XML documents. To use it, you supply the filename along with an event list consisting of one or more of the following: <strong>start</strong>, <strong>end</strong>, <strong>start-ns</strong>, and <strong>end-ns</strong>. The iterator created by <strong>iterparse()</strong> produces tuples of the form <strong>(event, elem)</strong>, where <strong>event</strong> is one of the listed <strong>events</strong> and <strong>elem</strong> is the resulting XML element. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = iterparse(<span class="string">'potholes.xml'</span>,(<span class="string">'start'</span>,<span class="string">'end'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(data)</span><br><span class="line">(<span class="string">'start'</span>, &lt;Element <span class="string">'response'</span> at <span class="number">0x100771d60</span>&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(data)</span><br><span class="line">(<span class="string">'start'</span>, &lt;Element <span class="string">'row'</span> at <span class="number">0x100771e68</span>&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(data)</span><br><span class="line">(<span class="string">'start'</span>, &lt;Element <span class="string">'row'</span> at <span class="number">0x100771fc8</span>&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(data)</span><br><span class="line">(<span class="string">'start'</span>, &lt;Element <span class="string">'creation_date'</span> at <span class="number">0x100771f18</span>&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(data)</span><br><span class="line">(<span class="string">'end'</span>, &lt;Element <span class="string">'creation_date'</span> at <span class="number">0x100771f18</span>&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(data)</span><br><span class="line">(<span class="string">'start'</span>, &lt;Element <span class="string">'status'</span> at <span class="number">0x1006a7f18</span>&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(data)</span><br><span class="line">(<span class="string">'end'</span>, &lt;Element <span class="string">'status'</span> at <span class="number">0x1006a7f18</span>&gt;)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>The <strong>start</strong> and <strong>end</strong> events are used to manage stacks of elements and tags. The stacks represent the current hierarchical structure of the document as it’s being parsed, and are also used to determine if an element matches the requested path given to the <strong>parse_and_remove()</strong> function. If a match is made, <strong>yield</strong> is used to emit it back to the caller.</p><p>The following statement after the <strong>yield</strong> is the core feature of ElementTree that makes this recipe save memory:</p><p><code>elem_stack[-2].remove(elem)</code></p><h2 id="Turning-a-Dictionary-into-XML"><a href="#Turning-a-Dictionary-into-XML" class="headerlink" title="Turning a Dictionary into XML"></a>Turning a Dictionary into XML</h2><p>You want to take the data in a Python dictionary and turn it into XML. Although the <strong>xml.etree.ElementTree</strong> library is commonly used for parsing, it can also be used to create XML documents.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> xml.etree.cElementTree <span class="keyword">import</span> Element</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">dict_to_xml</span><span class="params">(tag, d)</span>:</span></span><br><span class="line"><span class="meta">... </span>    elem= Element(tag)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> key, val <span class="keyword">in</span> d.items():</span><br><span class="line"><span class="meta">... </span>        child= Element(key)</span><br><span class="line"><span class="meta">... </span>        child.text= str(val)</span><br><span class="line"><span class="meta">... </span>        elem.append(child)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> elem</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = &#123; <span class="string">'name'</span>: <span class="string">'GOOG'</span>, <span class="string">'shares'</span>: <span class="number">100</span>, <span class="string">'price'</span>:<span class="number">490.1</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e=dict_to_xml(<span class="string">'stock'</span>, s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e</span><br><span class="line">&lt;Element <span class="string">'stock'</span> at <span class="number">0x03B07E40</span>&gt;</span><br></pre></td></tr></table></figure><p>The result of this conversion is an Element instance. For I/O, it is easy to convert this to a byte string using the <strong>tostring()</strong> function in <strong>xml.etree.ElementTree</strong>. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> xml.etree.ElementTree <span class="keyword">import</span> tostring</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tostring(e)</span><br><span class="line"><span class="string">b'&lt;stock&gt;&lt;name&gt;GOOG&lt;/name&gt;&lt;shares&gt;100&lt;/shares&gt;&lt;price&gt;490.1&lt;/price&gt;&lt;/stock&gt;'</span></span><br></pre></td></tr></table></figure><p>If you want to attach attributes to an element, use its <strong>set()</strong> method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.set(<span class="string">'_id'</span>, <span class="string">'1234'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tostring(e)</span><br><span class="line"><span class="string">b'&lt;stock _id="1234"&gt;&lt;name&gt;GOOG&lt;/name&gt;&lt;shares&gt;100&lt;/shares&gt;&lt;price&gt;490.1&lt;/price&gt;&lt;/stock&gt;'</span></span><br></pre></td></tr></table></figure><p>If the order of the elements matters, consider making an OrderedDict instead of a normal dictionary.</p><h2 id="Parsing-Modifying-and-Rewriting-XML"><a href="#Parsing-Modifying-and-Rewriting-XML" class="headerlink" title="Parsing, Modifying, and Rewriting XML"></a>Parsing, Modifying, and Rewriting XML</h2><p>You want to read an XML document, make changes to it, and then write it back out as XML. The <strong>xml.etree.ElementTree</strong> module makes it easy to perform such tasks. Essentially, you start out by parsing the document in the usual way. </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">stop</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span>&gt;</span>14791<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">nm</span>&gt;</span>Clark &amp;amp; Balmoral<span class="tag">&lt;/<span class="name">nm</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">sri</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">rt</span>&gt;</span>22<span class="tag">&lt;/<span class="name">rt</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">d</span>&gt;</span>North Bound<span class="tag">&lt;/<span class="name">d</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dd</span>&gt;</span>North Bound<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">sri</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">cr</span>&gt;</span>22<span class="tag">&lt;/<span class="name">cr</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">pt</span>&gt;</span>5 MIN<span class="tag">&lt;/<span class="name">pt</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">fd</span>&gt;</span>Howard<span class="tag">&lt;/<span class="name">fd</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">v</span>&gt;</span>1378<span class="tag">&lt;/<span class="name">v</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">rn</span>&gt;</span>22<span class="tag">&lt;/<span class="name">rn</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">pt</span>&gt;</span>15 MIN<span class="tag">&lt;/<span class="name">pt</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">fd</span>&gt;</span>Howard<span class="tag">&lt;/<span class="name">fd</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">v</span>&gt;</span>1867<span class="tag">&lt;/<span class="name">v</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">rn</span>&gt;</span>22<span class="tag">&lt;/<span class="name">rn</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">stop</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Here is an example of using <strong>ElementTree</strong> to read it and make changes to the structure:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> xml.etree.ElementTree <span class="keyword">import</span> parse, Element</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc= parse(<span class="string">'pred.xml'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root= doc.getroot()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root</span><br><span class="line">&lt;Element <span class="string">'stop'</span> at <span class="number">0x054DEE10</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root.remove(root.find(<span class="string">'sri'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root.remove(root.find(<span class="string">'cr'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root.getchildren().index(root.find(<span class="string">'nm'</span>))</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e= Element(<span class="string">'spam'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.text=<span class="string">'This is a test'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root.insert(<span class="number">2</span>, e)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.write(<span class="string">'newpred.xml'</span>, xml_declaration= <span class="keyword">True</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>The result of these operations is a new XML file that looks like this:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version='1.0' encoding='us-ascii'?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">stop</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span>&gt;</span>14791<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">nm</span>&gt;</span>Clark &amp;amp; Balmoral<span class="tag">&lt;/<span class="name">nm</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">spam</span>&gt;</span>This is a test<span class="tag">&lt;/<span class="name">spam</span>&gt;</span><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">pt</span>&gt;</span>5 MIN<span class="tag">&lt;/<span class="name">pt</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">fd</span>&gt;</span>Howard<span class="tag">&lt;/<span class="name">fd</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">v</span>&gt;</span>1378<span class="tag">&lt;/<span class="name">v</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">rn</span>&gt;</span>22<span class="tag">&lt;/<span class="name">rn</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">pt</span>&gt;</span>15 MIN<span class="tag">&lt;/<span class="name">pt</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">fd</span>&gt;</span>Howard<span class="tag">&lt;/<span class="name">fd</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">v</span>&gt;</span>1867<span class="tag">&lt;/<span class="name">v</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">rn</span>&gt;</span>22<span class="tag">&lt;/<span class="name">rn</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">stop</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="Parsing-XML-Documents-with-Namespaces"><a href="#Parsing-XML-Documents-with-Namespaces" class="headerlink" title="Parsing XML Documents with Namespaces"></a>Parsing XML Documents with Namespaces</h2><p>Consider a document that uses namespaces like this:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">top</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">author</span>&gt;</span>David Beazley<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">content</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">top</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>If you parse this document and try to perform the usual queries, you’ll find that it doesn’t work so easily because everything becomes incredibly verbose:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Some queries that work</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.findtext(<span class="string">'author'</span>)</span><br><span class="line"><span class="string">'David Beazley'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># A query involving a namespace (doesn't work)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.find(<span class="string">'content/html'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Works if fully qualified</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.find(<span class="string">'content/&#123;http://www.w3.org/1999/xhtml&#125;html'</span>)</span><br><span class="line">&lt;Element <span class="string">'&#123;http://www.w3.org/1999/xhtml&#125;html'</span> at <span class="number">0x1007767e0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Doesn't work</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.findtext(<span class="string">'content/&#123;http://www.w3.org/1999/xhtml&#125;html/head/title'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Fully qualified</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>doc.findtext(<span class="string">'content/&#123;http://www.w3.org/1999/xhtml&#125;html/'</span></span><br><span class="line"><span class="meta">... </span><span class="string">'&#123;http://www.w3.org/1999/xhtml&#125;head/&#123;http://www.w3.org/1999/xhtml&#125;title'</span>)</span><br><span class="line"><span class="string">'Hello World'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>Unfortunately, there is no mechanism in the basic <strong>ElementTree</strong> parser to get further information about namespaces. However, you can get a bit more information about the scope of namespace processing if you’re willing to use the <strong>iterparse()</strong> function instead.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> xml.etree.ElementTree <span class="keyword">import</span> iterparse</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> evt, elem <span class="keyword">in</span> iterparse(<span class="string">'ns2.xml'</span>, (<span class="string">'end'</span>, <span class="string">'start-ns'</span>, <span class="string">'end-ns'</span>)):</span><br><span class="line"><span class="meta">... </span>print(evt, elem)</span><br><span class="line">...</span><br><span class="line">end &lt;Element <span class="string">'author'</span> at <span class="number">0x10110de10</span>&gt;</span><br><span class="line">start-ns (<span class="string">''</span>, <span class="string">'http://www.w3.org/1999/xhtml'</span>)</span><br><span class="line">end &lt;Element <span class="string">'&#123;http://www.w3.org/1999/xhtml&#125;title'</span> at <span class="number">0x1011131b0</span>&gt;</span><br><span class="line">end &lt;Element <span class="string">'&#123;http://www.w3.org/1999/xhtml&#125;head'</span> at <span class="number">0x1011130a8</span>&gt;</span><br><span class="line">end &lt;Element <span class="string">'&#123;http://www.w3.org/1999/xhtml&#125;h1'</span> at <span class="number">0x101113310</span>&gt;</span><br><span class="line">end &lt;Element <span class="string">'&#123;http://www.w3.org/1999/xhtml&#125;body'</span> at <span class="number">0x101113260</span>&gt;</span><br><span class="line">end &lt;Element <span class="string">'&#123;http://www.w3.org/1999/xhtml&#125;html'</span> at <span class="number">0x10110df70</span>&gt;</span><br><span class="line">end-ns <span class="keyword">None</span></span><br><span class="line">end &lt;Element <span class="string">'content'</span> at <span class="number">0x10110de68</span>&gt;</span><br><span class="line">end &lt;Element <span class="string">'top'</span> at <span class="number">0x10110dd60</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>elem <span class="comment"># This is the topmost element</span></span><br><span class="line">&lt;Element <span class="string">'top'</span> at <span class="number">0x10110dd60</span>&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Interacting-with-a-Relational-Database"><a href="#Interacting-with-a-Relational-Database" class="headerlink" title="Interacting with a Relational Database"></a>Interacting with a Relational Database</h2><p>You need to select, insert, or delete rows in a relational database. A standard way to represent rows of data in Python is as a sequence of tuples. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stocks = [</span><br><span class="line"> (<span class="string">'GOOG'</span>, <span class="number">100</span>, <span class="number">490.1</span>),</span><br><span class="line"> (<span class="string">'AAPL'</span>, <span class="number">50</span>, <span class="number">545.75</span>),</span><br><span class="line"> (<span class="string">'FB'</span>, <span class="number">150</span>, <span class="number">7.45</span>),</span><br><span class="line"> (<span class="string">'HPQ'</span>, <span class="number">75</span>, <span class="number">33.2</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>The first step is to connect to the database. Typically, you execute a <strong>connect()</strong> function, supplying parameters such as the name of the database, hostname, username, password, and other details as needed.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db= sqlite3.connect(<span class="string">'database.db'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c= db.cursor()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.execute(<span class="string">'create table portfolio (symbol text, shares integer, price real)'</span>)</span><br><span class="line">&lt;sqlite3.Cursor object at <span class="number">0x054C97A0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.commit()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stocks = [</span><br><span class="line"><span class="meta">... </span> (<span class="string">'GOOG'</span>, <span class="number">100</span>, <span class="number">490.1</span>),</span><br><span class="line"><span class="meta">... </span> (<span class="string">'AAPL'</span>, <span class="number">50</span>, <span class="number">545.75</span>),</span><br><span class="line"><span class="meta">... </span> (<span class="string">'FB'</span>, <span class="number">150</span>, <span class="number">7.45</span>),</span><br><span class="line"><span class="meta">... </span> (<span class="string">'HPQ'</span>, <span class="number">75</span>, <span class="number">33.2</span>),</span><br><span class="line"><span class="meta">... </span>]</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.executemany(<span class="string">'insert into portfolio values (?,?,?)'</span>, stocks)</span><br><span class="line">&lt;sqlite3.Cursor object at <span class="number">0x054C97A0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>db.commit()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> row <span class="keyword">in</span> db.execute(<span class="string">'select * from portfolio'</span>):</span><br><span class="line"><span class="meta">... </span>    print(row)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">(<span class="string">'GOOG'</span>, <span class="number">100</span>, <span class="number">490.1</span>)</span><br><span class="line">(<span class="string">'AAPL'</span>, <span class="number">50</span>, <span class="number">545.75</span>)</span><br><span class="line">(<span class="string">'FB'</span>, <span class="number">150</span>, <span class="number">7.45</span>)</span><br><span class="line">(<span class="string">'HPQ'</span>, <span class="number">75</span>, <span class="number">33.2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>min_price= <span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> row <span class="keyword">in</span> db.execute(<span class="string">'select * from portfolio where price &gt;= ?'</span>,(min_price,)):</span><br><span class="line"><span class="meta">... </span>    print(row)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">(<span class="string">'GOOG'</span>, <span class="number">100</span>, <span class="number">490.1</span>)</span><br><span class="line">(<span class="string">'AAPL'</span>, <span class="number">50</span>, <span class="number">545.75</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Reading-and-Writing-CSV-Data&quot;&gt;&lt;a href=&quot;#Reading-and-Writing-CSV-Data&quot; class=&quot;headerlink&quot; title=&quot;Reading and Writing CSV Data&quot;&gt;&lt;/a&gt;Reading and Writing CSV Data&lt;/h2&gt;&lt;p&gt;For most kinds of CSV data, use the &lt;strong&gt;csv&lt;/strong&gt; library.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; csv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(&lt;span class=&quot;string&quot;&gt;&#39;stocks.csv&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     f_csv = csv.reader(f)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     headers = next(f_csv)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; row &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; f_csv:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Process row&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C05_Files_and_I/O</title>
    <link href="blog.whistlestop.ml/2018/12/15/C05-Files-and-I-O/"/>
    <id>blog.whistlestop.ml/2018/12/15/C05-Files-and-I-O/</id>
    <published>2018-12-15T10:43:43.000Z</published>
    <updated>2018-12-15T11:11:46.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reading-and-Writing-Binary-Data"><a href="#Reading-and-Writing-Binary-Data" class="headerlink" title="Reading and Writing Binary Data"></a>Reading and Writing Binary Data</h2><p>A lesser-known aspect of binary I/O is that objects such as arrays and C structures can be used for writing without any kind of intermediate conversion to a bytes object. For example:<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> array</span><br><span class="line">nums = array.array(<span class="string">'i'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.bin'</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(nums)</span><br></pre></td></tr></table></figure></p><p>This applies to any object that implements the so-called “buffer interface,” which directly exposes an underlying memory buffer to operations that can work with it. Writing binary data is one such operation.</p><p>Many objects also allow binary data to be directly read into their underlying memory using the <strong>readinto()</strong> method of files. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> array</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = array.array(<span class="string">'i'</span>, [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'data.bin'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>f.readinto(a)</span><br><span class="line">...</span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array(<span class="string">'i'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Writing-to-a-File-That-Doesn’t-Already-Exist"><a href="#Writing-to-a-File-That-Doesn’t-Already-Exist" class="headerlink" title="Writing to a File That Doesn’t Already Exist"></a>Writing to a File That Doesn’t Already Exist</h2><p>You want to write data to a file, but only if it doesn’t already exist on the filesystem. This problem is easily solved by using the little-known <strong>x</strong> mode to <strong>open()</strong> instead of the usual <strong>w</strong> mode.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'somefile'</span>, <span class="string">'wt'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>f.write(<span class="string">'Hello\n'</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'somefile'</span>, <span class="string">'xt'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>f.write(<span class="string">'Hello\n'</span>)</span><br><span class="line">...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">FileExistsError: [Errno <span class="number">17</span>] File exists: <span class="string">'somefile'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>If the file is binary mode, use mode <strong>xb</strong> instead of <strong>xt</strong>.</p><h2 id="Performing-I-O-Operations-on-a-String"><a href="#Performing-I-O-Operations-on-a-String" class="headerlink" title="Performing I/O Operations on a String"></a>Performing I/O Operations on a String</h2><p>Use the <strong>io.StringIO()</strong> and <strong>io.BytesIO()</strong> classes to create file-like objects that operate on string data.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> io</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s= io.StringIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.write(<span class="string">'Hello World\n'</span>)</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'This is a test'</span>, file= s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.getvalue()</span><br><span class="line"><span class="string">'Hello World\nThis is a test\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s= io.StringIO(<span class="string">'Hello\nWorld\n'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.read(<span class="number">4</span>)</span><br><span class="line"><span class="string">'Hell'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.read()</span><br><span class="line"><span class="string">'o\nWorld\n'</span></span><br></pre></td></tr></table></figure><p>The <strong>io.StringIO</strong> class should only be used for text. If you are operating with binary data, use the <strong>io.BytesIO</strong> class instead.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s= io.BytesIO()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.write(<span class="string">b'binary data'</span>)</span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.getvalue()</span><br><span class="line"><span class="string">b'binary data'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>The <strong>StringIO</strong> and <strong>BytesIO</strong> classes are most useful in scenarios where you need to mimic a normal file for some reason.  Be aware that <strong>StringIO</strong> and <strong>BytesIO</strong> instances don’t have a proper integer filedescriptor. Thus, they do not work with code that requires the use of a real system-level file such as a file, pipe, or socket.</p><h2 id="Reading-and-Writing-Compressed-Datafiles"><a href="#Reading-and-Writing-Compressed-Datafiles" class="headerlink" title="Reading and Writing Compressed Datafiles"></a>Reading and Writing Compressed Datafiles</h2><p>You need to read or write data in a file with <strong>gzip</strong> or <strong>bz2</strong> compression. The <strong>gzip</strong> and <strong>bz2</strong> modules make it easy to work with such files. Both modules provide an alternative implementation of <strong>open()</strong> that can be used for this purpose. Both <strong>gzip.open()</strong> and <strong>bz2.open()</strong> accept the same parameters as the built-in <strong>open()</strong> function, including <strong>encoding</strong>, <strong>errors</strong>, <strong>newline</strong>, and so forth.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gzip compression</span></span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">with</span> gzip.open(<span class="string">'somefile.gz'</span>, <span class="string">'rt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    text = f.read()</span><br><span class="line"><span class="comment"># bz2 compression</span></span><br><span class="line"><span class="keyword">import</span> bz2</span><br><span class="line"><span class="keyword">with</span> bz2.open(<span class="string">'somefile.bz2'</span>, <span class="string">'rt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    text = f.read()</span><br></pre></td></tr></table></figure><p>Similarly, to write compressed data, do this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gzip compression</span></span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">with</span> gzip.open(<span class="string">'somefile.gz'</span>, <span class="string">'wt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(text)</span><br><span class="line"><span class="comment"># bz2 compression</span></span><br><span class="line"><span class="keyword">import</span> bz2</span><br><span class="line"><span class="keyword">with</span> bz2.open(<span class="string">'somefile.bz2'</span>, <span class="string">'wt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(text)</span><br></pre></td></tr></table></figure><p>When writing compressed data, the compression level can be optionally specified using the <strong>compresslevel</strong> keyword argument. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> gzip.open(<span class="string">'somefile.gz'</span>, <span class="string">'wt'</span>, compresslevel=<span class="number">5</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(text)</span><br></pre></td></tr></table></figure><p>Finally, a little-known feature of <strong>gzip.open()</strong> and <strong>bz2.open()</strong> is that they can be layered on top of an existing file opened in binary mode.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line">f = open(<span class="string">'somefile.gz'</span>, <span class="string">'rb'</span>)</span><br><span class="line"><span class="keyword">with</span> gzip.open(f, <span class="string">'rt'</span>) <span class="keyword">as</span> g:</span><br><span class="line">    text = g.read()</span><br></pre></td></tr></table></figure><p>This allows the <strong>gzip</strong> and <strong>bz2</strong> modules to work with various file-like objects such as sockets, pipes, and in-memory files.</p><h2 id="Iterating-Over-Fixed-Sized-Records"><a href="#Iterating-Over-Fixed-Sized-Records" class="headerlink" title="Iterating Over Fixed-Sized Records"></a>Iterating Over Fixed-Sized Records</h2><p>Instead of iterating over a file by lines, you want to iterate over a collection of fixedsized records or chunks.</p><p>Use the <strong>iter()</strong> function and <strong>functools.partial()</strong> using this neat trick:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line">RECORD_SIZE = <span class="number">32</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'somefile.data'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    records = iter(partial(f.read, RECORD_SIZE), <span class="string">b''</span>)</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> records:</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></p><p>The <strong>records</strong> object in this example is an iterable that will produce fixed-sized chunks until the end of the file is reached.</p><p>A little-known feature of the <strong>iter()</strong> function is that it can create an iterator if you pass it a callable and a sentinel value. The resulting iterator simply calls the supplied callable over and over again until it returns the sentinel, at which point iteration stops.</p><p>In the solution, the <strong>functools.partial</strong> is used to create a callable that reads a fixed number of bytes from a file each time it’s called. The sentinel of <strong>b’’</strong> is what gets returned when a file is read but the end of file has been reached.</p><h2 id="Reading-Binary-Data-into-a-Mutable-Buffer"><a href="#Reading-Binary-Data-into-a-Mutable-Buffer" class="headerlink" title="Reading Binary Data into a Mutable Buffer"></a>Reading Binary Data into a Mutable Buffer</h2><p>You want to read binary data directly into a mutable buffer without any intermediate copying. Perhaps you want to mutate the data in-place and write it back out to a file.</p><p>To read data into a mutable array, use the <strong>readinto()</strong> method of files.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os.path</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">read_into_buffer</span><span class="params">(filename)</span>:</span></span><br><span class="line"><span class="meta">... </span>    buf= bytearray(os.path.getsize(filename))</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">with</span> open(filename, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>        f.readinto(buf)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> buf</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Write a sample file</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'sample.bin'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>f.write(<span class="string">b'Hello World'</span>)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>buf = read_into_buffer(<span class="string">'sample.bin'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>buf</span><br><span class="line">bytearray(<span class="string">b'Hello World'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>buf[<span class="number">0</span>:<span class="number">5</span>] = <span class="string">b'Hallo'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>buf</span><br><span class="line">bytearray(<span class="string">b'Hallo World'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'newsample.bin'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span>f.write(buf)</span><br><span class="line">...</span><br><span class="line"><span class="number">11</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>The <strong>readinto()</strong> method of files can be used to fill any preallocated array with data. This even includes arrays created from the <strong>array</strong> module or libraries such as <strong>numpy</strong>. Unlike the normal <strong>read()</strong> method, <strong>readinto()</strong> fills the contents of an existing buffer rather than allocating new objects and returning them. </p><h2 id="Getting-a-Directory-Listing"><a href="#Getting-a-Directory-Listing" class="headerlink" title="Getting a Directory Listing"></a>Getting a Directory Listing</h2><p>For filename matching, you may want to use the <strong>glob</strong> or <strong>fnmatch</strong> modules instead.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line">pyfiles = glob.glob(<span class="string">'somedir/*.py'</span>)</span><br><span class="line"><span class="keyword">from</span> fnmatch <span class="keyword">import</span> fnmatch</span><br><span class="line">pyfiles = [name <span class="keyword">for</span> name <span class="keyword">in</span> os.listdir(<span class="string">'somedir'</span>)</span><br><span class="line"> <span class="keyword">if</span> fnmatch(name, <span class="string">'*.py'</span>)]</span><br></pre></td></tr></table></figure><p>Getting a directory listing is easy, but it only gives you the names of entries in the directory. If you want to get additional metadata, such as file sizes, modification dates, and so forth, you either need to use additional functions in the <strong>os.path</strong> module or use the <strong>os.stat()</strong> function.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line">pyfiles = glob.glob(<span class="string">'*.py'</span>)</span><br><span class="line"><span class="comment"># Get file sizes and modification dates</span></span><br><span class="line">name_sz_date = [(name, os.path.getsize(name), os.path.getmtime(name)) <span class="keyword">for</span> name <span class="keyword">in</span> pyfiles]</span><br><span class="line"><span class="keyword">for</span> name, size, mtime <span class="keyword">in</span> name_sz_date:</span><br><span class="line">    print(name, size, mtime)</span><br><span class="line"><span class="comment"># Alternative: Get file metadata</span></span><br><span class="line">file_metadata = [(name, os.stat(name)) <span class="keyword">for</span> name <span class="keyword">in</span> pyfiles]</span><br><span class="line"><span class="keyword">for</span> name, meta <span class="keyword">in</span> file_metadata:</span><br><span class="line">    print(name, meta.st_size, meta.st_mtime)</span><br></pre></td></tr></table></figure></p><h2 id="Serializing-Python-Objects"><a href="#Serializing-Python-Objects" class="headerlink" title="Serializing Python Objects"></a>Serializing Python Objects</h2><p>The most common approach for serializing data is to use the <strong>pickle</strong> module. To dump an object to a file, you do this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">data = ... <span class="comment"># Some Python object</span></span><br><span class="line">f = open(<span class="string">'somefile'</span>, <span class="string">'wb'</span>)</span><br><span class="line">pickle.dump(data, f)</span><br></pre></td></tr></table></figure><p>To dump an object to a string, use <strong>pickle.dumps()</strong>:</p><p><code>s = pickle.dumps(data)</code></p><p>To re-create an object from a byte stream, use either the <strong>pickle.load()</strong> or <strong>pickle.loads()</strong> functions. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Restore from a file</span></span><br><span class="line">f = open(<span class="string">'somefile'</span>, <span class="string">'rb'</span>)</span><br><span class="line">data = pickle.load(f)</span><br><span class="line"><span class="comment"># Restore from a string</span></span><br><span class="line">data = pickle.loads(s)</span><br></pre></td></tr></table></figure><p>pickle is a Python-specific self-describing data encoding. By self-describing, the serialized data contains information related to the start and end of each object as well as information about its type. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'somedata'</span>, <span class="string">'wb'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.dump([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], f)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.dump(<span class="string">'hello'</span>, f)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.dump(&#123;<span class="string">'Apple'</span>, <span class="string">'Pear'</span>, <span class="string">'Banana'</span>&#125;, f)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'somedata'</span>, <span class="string">'rb'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.load(f)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.load(f)</span><br><span class="line"><span class="string">'hello'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.load(f)</span><br><span class="line">&#123;<span class="string">'Apple'</span>, <span class="string">'Pear'</span>, <span class="string">'Banana'</span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>Certain kinds of objects can’t be pickled. These are typically objects that involve some sort of external system state, such as open files, open network connections, threads, processes, stack frames, and so forth. User-defined classes can sometimes work around these limitations by providing <strong>__getstate__()</strong> and <strong>__setstate__()</strong> methods. If defined, <strong>pickle.dump()</strong> will call <strong>__getstate__()</strong> to get an object that can be pickled. Similarly, <strong>__setstate__()</strong> will be invoked on unpickling. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Countdown</span>:</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">         self.n = n</span><br><span class="line">         self.thr = threading.Thread(target=self.run)</span><br><span class="line">         self.thr.daemon = <span class="keyword">True</span></span><br><span class="line">         self.thr.start()</span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">         <span class="keyword">while</span> self.n &gt; <span class="number">0</span>:</span><br><span class="line">             print(<span class="string">'T-minus'</span>, self.n)</span><br><span class="line">             self.n -= <span class="number">1</span></span><br><span class="line">             time.sleep(<span class="number">5</span>)</span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__getstate__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.n</span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__setstate__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">         self.__init__(n)</span><br></pre></td></tr></table></figure><p>Try the following experiment involving pickling:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> countdown</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = countdown.Countdown(<span class="number">30</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>T-minus <span class="number">30</span></span><br><span class="line">T-minus <span class="number">29</span></span><br><span class="line">T-minus <span class="number">28</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># After a few moments</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'cstate.p'</span>, <span class="string">'wb'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pickle</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.dump(c, f)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br></pre></td></tr></table></figure><p>Now quit Python and try this after restart:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'cstate.p'</span>, <span class="string">'rb'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pickle.load(f)</span><br><span class="line">countdown.Countdown object at <span class="number">0x10069e2d0</span>&gt;</span><br><span class="line">T-minus <span class="number">19</span></span><br><span class="line">T-minus <span class="number">18</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Reading-and-Writing-Binary-Data&quot;&gt;&lt;a href=&quot;#Reading-and-Writing-Binary-Data&quot; class=&quot;headerlink&quot; title=&quot;Reading and Writing Binary Data&quot;&gt;&lt;/a&gt;Reading and Writing Binary Data&lt;/h2&gt;&lt;p&gt;A lesser-known aspect of binary I/O is that objects such as arrays and C structures can be used for writing without any kind of intermediate conversion to a bytes object. For example:&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C04_Iterators_and_Generators</title>
    <link href="blog.whistlestop.ml/2018/12/15/C04-Iterators-and-Generators/"/>
    <id>blog.whistlestop.ml/2018/12/15/C04-Iterators-and-Generators/</id>
    <published>2018-12-15T10:43:02.000Z</published>
    <updated>2018-12-15T11:11:42.216Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Delegating-Iteration"><a href="#Delegating-Iteration" class="headerlink" title="Delegating Iteration"></a>Delegating Iteration</h2><p>You have built a custom container object that internally holds a list, tuple, or some other iterable. You would like to make iteration work with your new container.Typically, all you need to do is define an <strong>__iter__()</strong> method that delegates iteration to the internally held container<br><a id="more"></a> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self._value=value</span><br><span class="line">        self._children=[]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Node(&#123;!r&#125;)'</span>.format(self._value)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_child</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        self._children.append(node)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> iter(self._children)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    root=Node(<span class="number">0</span>)</span><br><span class="line">    child1=Node(<span class="number">1</span>)</span><br><span class="line">    child2=Node(<span class="number">2</span>)</span><br><span class="line">    root.add_child(child1)</span><br><span class="line">    root.add_child(child2)</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> root:</span><br><span class="line">        print(ch)</span><br></pre></td></tr></table></figure><p>Python’s iterator protocol requires <strong>__iter__()</strong> to return a special iterator object that implements a <strong>__next__()</strong> method to carry out the actual iteration.If all you are doing is iterating over the contents of another container, you don’t really need to worry about the underlying details of how it works. </p><h2 id="Implementing-the-Iterator-Protocol"><a href="#Implementing-the-Iterator-Protocol" class="headerlink" title="Implementing the Iterator Protocol"></a>Implementing the Iterator Protocol</h2><p>Perhaps you want to implement an iterator that traverses nodes in a depth-first pattern. Here is how you could do it:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self._value=value</span><br><span class="line">        self._children=[]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Node(&#123;!r&#125;)'</span>.format(self._value)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_child</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        self._children.append(node)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> iter(self._children)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">depth_first</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> self</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> self:</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">from</span> c.depth_first()</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    root=Node(<span class="number">0</span>)</span><br><span class="line">    child1=Node(<span class="number">1</span>)</span><br><span class="line">    child2=Node(<span class="number">2</span>)</span><br><span class="line">    root.add_child(child1)</span><br><span class="line">    root.add_child(child2)</span><br><span class="line">    child1.add_child(Node(<span class="number">3</span>))</span><br><span class="line">    child1.add_child(Node(<span class="number">4</span>))</span><br><span class="line">    child2.add_child(Node(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> root.depth_first():</span><br><span class="line">        print(ch)</span><br><span class="line">Node(<span class="number">0</span>)</span><br><span class="line">Node(<span class="number">1</span>)</span><br><span class="line">Node(<span class="number">3</span>)</span><br><span class="line">Node(<span class="number">4</span>)</span><br><span class="line">Node(<span class="number">2</span>)</span><br><span class="line">Node(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>Python’s iterator protocol requires <strong>__iter__()</strong> to return a special iterator object that implements a <strong>__next__()</strong> operation and uses a <strong>StopIteration</strong> exception to signal completion. However, implementing such objects can often be a messy affair. For example, the following code shows an alternative implementation of the <strong>depth_first()</strong> method using an associated iterator class:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self._value=value</span><br><span class="line">        self._children=[]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Node(&#123;!r&#125;)'</span>.format(self._value)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_child</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        self._children.append(node)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> iter(self._children)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">depth_first</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> DepthFirstIterator(self)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DepthFirstIterator</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, start_node)</span>        :</span></span><br><span class="line">        self._node= start_node</span><br><span class="line">        self._children_iter= <span class="keyword">None</span></span><br><span class="line">        self._child_iter= <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._children_iter <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            self._children_iter= iter(self._node)</span><br><span class="line">            <span class="keyword">return</span> self._node</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> self._child_iter:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                nextchild= next(self._child_iter)</span><br><span class="line">                <span class="keyword">return</span> nextchild</span><br><span class="line">            <span class="keyword">except</span> StopIteration:</span><br><span class="line">                self._child_iter = <span class="keyword">None</span></span><br><span class="line">                <span class="keyword">return</span> next(self)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._child_iter= next(self._children_iter).depth_first()</span><br><span class="line">            <span class="keyword">return</span> next(self)</span><br></pre></td></tr></table></figure><p>The <strong>DepthFirstIterator</strong> class works in the same way as the generator version, but it’s a mess because the iterator has to maintain a lot of complex state about where it is in the iteration process. </p><h2 id="Iterating-in-Reverse"><a href="#Iterating-in-Reverse" class="headerlink" title="Iterating in Reverse"></a>Iterating in Reverse</h2><p>Many programmers don’t realize that reversed iteration can be customized on userdefined classes if they implement the <strong>__reversed__()</strong> method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Countdown</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,start)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.start= start</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        n= self.start</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">yield</span> n</span><br><span class="line"><span class="meta">... </span>            n-= <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__reversed__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        n= <span class="number">1</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">while</span> n &lt;= self.start:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">yield</span> n</span><br><span class="line"><span class="meta">... </span>            n += <span class="number">1</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Defining-Generator-Functions-with-Extra-State"><a href="#Defining-Generator-Functions-with-Extra-State" class="headerlink" title="Defining Generator Functions with Extra State"></a>Defining Generator Functions with Extra State</h2><p>If you want a generator to expose extra state to the user, don’t forget that you can easily implement it as a class, putting the generator function code in the <strong>__iter__()</strong> method.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">linehistory</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, lines, histlen= <span class="number">3</span>)</span>:</span></span><br><span class="line">        self.lines= lines</span><br><span class="line">        self.history= deque(maxlen= histlen)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> lineno, line <span class="keyword">in</span> enumerate(self.lines, <span class="number">1</span>):</span><br><span class="line">            self.history.append((lineno, line))</span><br><span class="line">            <span class="keyword">yield</span> line</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.history.clear()</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'file.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lines= linehistory(f)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'python'</span> <span class="keyword">in</span> line:</span><br><span class="line">            <span class="keyword">for</span> lineno, hline <span class="keyword">in</span> lines.history:</span><br><span class="line">                print(<span class="string">'&#123;&#125;: &#123;&#125;'</span>.format(lineno, hline), end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure></p><p>Defining your generator in the<strong>__iter__()</strong>method doesn’t change anything about how you write your algorithm. The fact that it’s part of a class makes it easy for you to provide attributes and methods for users to interact with.</p><p>One potential subtlety with the method shown is that it might require an extra step of calling <strong>iter()</strong> if you are going to drive iteration using a technique other than a for loop. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'somefile.txt'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lines = linehistory(f)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(lines)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">'linehistory'</span> object <span class="keyword">is</span> <span class="keyword">not</span> an iterator</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Call iter() first, then start iterating</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>it = iter(lines)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(it)</span><br><span class="line"><span class="string">'hello world\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>next(it)</span><br><span class="line"><span class="string">'this is a test\n'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Taking-a-Slice-of-an-Iterator"><a href="#Taking-a-Slice-of-an-Iterator" class="headerlink" title="Taking a Slice of an Iterator"></a>Taking a Slice of an Iterator</h2><p>The <strong>itertools.islice()</strong> function is perfectly suited for taking slices of iterators and generators. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c= count(<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="number">10</span>:<span class="number">20</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">'generator'</span> object <span class="keyword">is</span> <span class="keyword">not</span> subscriptable</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> itertools</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> itertools.islice(c, <span class="number">10</span>, <span class="number">20</span>):</span><br><span class="line"><span class="meta">... </span>    print(x)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19</p><blockquote><blockquote><blockquote></blockquote></blockquote></blockquote><p>The result of <strong>islice()</strong> is an iterator that produces the desired slice items, but it does this by consuming and discarding all of the items up to the starting slice index. Further items are then produced by the <strong>islice</strong> object until the ending index has been reached.</p><p>It’s important to emphasize that <strong>islice()</strong> will consume data on the supplied iterator. Since iterators can’t be rewound, that is something to consider. If it’s important to go back, you should probably just turn the data into a list first.</p><h2 id="Skipping-the-First-Part-of-an-Iterable"><a href="#Skipping-the-First-Part-of-an-Iterable" class="headerlink" title="Skipping the First Part of an Iterable"></a>Skipping the First Part of an Iterable</h2><p>Suppose you are reading a file that starts with a series of comment lines.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'/etc/passwd'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line"><span class="meta">... </span>print(line, end=<span class="string">''</span>)</span><br><span class="line">...</span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># User Database</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that this file is consulted directly only when the system is running</span></span><br><span class="line"><span class="comment"># in single-user mode. At other times, this information is provided by</span></span><br><span class="line"><span class="comment"># Open Directory.</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">##</span></span><br><span class="line">nobody:*:<span class="number">-2</span>:<span class="number">-2</span>:Unprivileged User:/var/empty:/usr/bin/false</span><br><span class="line">root:*:<span class="number">0</span>:<span class="number">0</span>:System Administrator:/var/root:/bin/sh</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>If you want to skip all of the initial comment lines, here’s one way to do it:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> dropwhile</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'/etc/passwd'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="meta">... </span><span class="keyword">for</span> line <span class="keyword">in</span> dropwhile(<span class="keyword">lambda</span> line: line.startswith(<span class="string">'#'</span>), f):</span><br><span class="line"><span class="meta">... </span>print(line, end=<span class="string">''</span>)</span><br><span class="line">...</span><br><span class="line">nobody:*:<span class="number">-2</span>:<span class="number">-2</span>:Unprivileged User:/var/empty:/usr/bin/false</span><br><span class="line">root:*:<span class="number">0</span>:<span class="number">0</span>:System Administrator:/var/root:/bin/sh</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>The <strong>dropwhile()</strong> and <strong>islice()</strong> functions are mainly convenience functions that you can use to avoid writing rather messy code such as this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/etc/passwd'</span>) <span class="keyword">as</span> f:</span><br><span class="line"> <span class="comment"># Skip over initial comments</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        line = next(f, <span class="string">''</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> line.startswith(<span class="string">'#'</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"> <span class="comment"># Process remaining lines</span></span><br><span class="line">    <span class="keyword">while</span> line:</span><br><span class="line">        <span class="comment"># Replace with useful processing</span></span><br><span class="line">            print(line, end=<span class="string">''</span>)</span><br><span class="line">            line = next(f, <span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>Discarding the first part of an iterable is also slightly different than simply filtering all of it. For example, the first part of this recipe might be rewritten as follows:</p><h2 id="Iterating-Over-All-Possible-Combinations-or-Permutations"><a href="#Iterating-Over-All-Possible-Combinations-or-Permutations" class="headerlink" title="Iterating Over All Possible Combinations or Permutations"></a>Iterating Over All Possible Combinations or Permutations</h2><p>You want to iterate over all of the possible combinations or permutations of a collection of items. The <strong>itertools</strong> module provides three functions for this task. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>items = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> p <span class="keyword">in</span> permutations(items):</span><br><span class="line"><span class="meta">... </span>    print(p)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>)</span><br><span class="line">(<span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>)</span><br><span class="line">(<span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'a'</span>)</span><br><span class="line">(<span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line">(<span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> p <span class="keyword">in</span> permutations(items,<span class="number">2</span>):</span><br><span class="line"><span class="meta">... </span>    print(p)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'c'</span>)</span><br><span class="line">(<span class="string">'b'</span>, <span class="string">'a'</span>)</span><br><span class="line">(<span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line">(<span class="string">'c'</span>, <span class="string">'a'</span>)</span><br><span class="line">(<span class="string">'c'</span>, <span class="string">'b'</span>)</span><br></pre></td></tr></table></figure><p>Use <strong>itertools.combinations()</strong> to produce a sequence of combinations of items taken from the input. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> c <span class="keyword">in</span> combinations(items, <span class="number">3</span>):</span><br><span class="line"><span class="meta">... </span>    print(c)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> c <span class="keyword">in</span> combinations(items, <span class="number">2</span>):</span><br><span class="line"><span class="meta">... </span>    print(c)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'c'</span>)</span><br><span class="line">(<span class="string">'b'</span>, <span class="string">'c'</span>)</span><br></pre></td></tr></table></figure><p>For combinations(), the actual order of the elements is not considered. That is, the <strong>combination (‘a’, ‘b’)</strong> is considered to be the same as <strong>(‘b’, ‘a’)</strong> (which is not produced).</p><p>When producing combinations, chosen items are removed from the collection of possible candidates (i.e., if ‘a’ has already been chosen, then it is removed from consideration). The <strong>itertools.combinations_with_replacement()</strong> function relaxes this, and allows the same item to be chosen more than once.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations_with_replacement</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> c <span class="keyword">in</span> combinations_with_replacement(items,<span class="number">3</span>):</span><br><span class="line"><span class="meta">... </span>    print(c)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>)</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>)</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>)</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'c'</span>)</span><br><span class="line">(<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>)</span><br><span class="line">(<span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)</span><br><span class="line">(<span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'c'</span>)</span><br><span class="line">(<span class="string">'c'</span>, <span class="string">'c'</span>, <span class="string">'c'</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Iterating-Over-Multiple-Sequences-Simultaneously"><a href="#Iterating-Over-Multiple-Sequences-Simultaneously" class="headerlink" title="Iterating Over Multiple Sequences Simultaneously"></a>Iterating Over Multiple Sequences Simultaneously</h2><p>To iterate over more than one sequence simultaneously, use the <strong>zip()</strong> function. <strong>zip(a, b)</strong> works by creating an iterator that produces <strong>tuples (x, y)</strong> where <strong>x</strong> is taken from <strong>a</strong> and <strong>y</strong> is taken from <strong>b</strong>.  The length of the iteration is the same as the length of the shortest input.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> zip(a,b):</span><br><span class="line"><span class="meta">... </span>print(i)</span><br><span class="line">...</span><br><span class="line">(<span class="number">1</span>, <span class="string">'w'</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">'x'</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">'y'</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>If this behavior is not desired, use <strong>itertools.zip_longest()</strong> instead.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> zip_longest</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> zip_longest(a,b):</span><br><span class="line"><span class="meta">... </span>print(i)</span><br><span class="line">...</span><br><span class="line">(<span class="number">1</span>, <span class="string">'w'</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">'x'</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">'y'</span>)</span><br><span class="line">(<span class="keyword">None</span>, <span class="string">'z'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> zip_longest(a, b, fillvalue=<span class="number">0</span>):</span><br><span class="line"><span class="meta">... </span>print(i)</span><br><span class="line">...</span><br><span class="line">(<span class="number">1</span>, <span class="string">'w'</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">'x'</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">'y'</span>)</span><br><span class="line">(<span class="number">0</span>, <span class="string">'z'</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>It’s less common, but <strong>zip()</strong> can be passed more than two sequences as input. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = [<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> zip(a, b, c):</span><br><span class="line"><span class="meta">... </span>print(i)</span><br><span class="line">...</span><br><span class="line">(<span class="number">1</span>, <span class="number">10</span>, <span class="string">'x'</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">11</span>, <span class="string">'y'</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">12</span>, <span class="string">'z'</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Iterating-on-Items-in-Separate-Containers"><a href="#Iterating-on-Items-in-Separate-Containers" class="headerlink" title="Iterating on Items in Separate Containers"></a>Iterating on Items in Separate Containers</h2><p><strong>itertools.chain()</strong> accepts one or more iterables as arguments. It then works by creating an iterator that successively consumes and returns the items produced by each of the supplied iterables you provided. It’s a subtle distinction, but <strong>chain()</strong> is more efficient than first combining the sequences and iterating. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inefficent</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a + b:</span><br><span class="line"> ...</span><br><span class="line"><span class="comment"># Better</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> chain(a, b):</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><p>In the first case, the operation <strong>a + b</strong> creates an entirely new sequence and additionally requires a and <strong>b</strong> to be of the same type. <strong>chain()</strong> performs no such operation, so it’s far more efficient with memory if the input sequences are large and it can be easily applied when the iterables in question are of different types.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=[<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'z'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> chain(a,b):</span><br><span class="line"><span class="meta">... </span>    print(x)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">x</span><br><span class="line">y</span><br><span class="line">z</span><br></pre></td></tr></table></figure><h2 id="Creating-Data-Processing-Pipelines"><a href="#Creating-Data-Processing-Pipelines" class="headerlink" title="Creating Data Processing Pipelines"></a>Creating Data Processing Pipelines</h2><p>Generator functions are a good way to implement processing pipelines. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> fnmatch</span><br><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">import</span> bz2</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_find</span><span class="params">(filepat, top)</span>:</span></span><br><span class="line"> <span class="string">'''</span></span><br><span class="line"><span class="string"> Find all filenames in a directory tree that match a shell wildcard pattern</span></span><br><span class="line"><span class="string"> '''</span></span><br><span class="line"> <span class="keyword">for</span> path, dirlist, filelist <span class="keyword">in</span> os.walk(top):</span><br><span class="line">     <span class="keyword">for</span> name <span class="keyword">in</span> fnmatch.filter(filelist, filepat):</span><br><span class="line">        <span class="keyword">yield</span> os.path.join(path,name)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_opener</span><span class="params">(filenames)</span>:</span></span><br><span class="line"> <span class="string">'''</span></span><br><span class="line"><span class="string"> Open a sequence of filenames one at a time producing a file object.</span></span><br><span class="line"><span class="string"> The file is closed immediately when proceeding to the next iteration.</span></span><br><span class="line"><span class="string"> '''</span></span><br><span class="line"> <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">     <span class="keyword">if</span> filename.endswith(<span class="string">'.gz'</span>):</span><br><span class="line">        f = gzip.open(filename, <span class="string">'rt'</span>)</span><br><span class="line">     <span class="keyword">elif</span> filename.endswith(<span class="string">'.bz2'</span>):</span><br><span class="line">        f = bz2.open(filename, <span class="string">'rt'</span>)</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">        f = open(filename, <span class="string">'rt'</span>)</span><br><span class="line">     <span class="keyword">yield</span> f</span><br><span class="line">     f.close()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_concatenate</span><span class="params">(iterators)</span>:</span></span><br><span class="line"> <span class="string">'''</span></span><br><span class="line"><span class="string"> Chain a sequence of iterators together into a single sequence.</span></span><br><span class="line"><span class="string"> '''</span></span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> iterators:</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> it</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_grep</span><span class="params">(pattern, lines)</span>:</span></span><br><span class="line"> <span class="string">'''</span></span><br><span class="line"><span class="string"> Look for a regex pattern in a sequence of lines</span></span><br><span class="line"><span class="string"> '''</span></span><br><span class="line">    pat = re.compile(pattern)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="keyword">if</span> pat.search(line):</span><br><span class="line">            <span class="keyword">yield</span> line</span><br></pre></td></tr></table></figure><p>You can now easily stack these functions together to make a processing pipeline. For example, to find all log lines that contain the word <em>python</em>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lognames = gen_find(<span class="string">'access-log*'</span>, <span class="string">'www'</span>)</span><br><span class="line">files = gen_opener(lognames)</span><br><span class="line">lines = gen_concatenate(files)</span><br><span class="line">pylines = gen_grep(<span class="string">'(?i)python'</span>, lines)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> pylines:</span><br><span class="line">    print(line)</span><br></pre></td></tr></table></figure><p>There is a bit of extreme subtlety involving the gen_concatenate() function. The purpose of this function is to concatenate input sequences together into one long sequence of lines. The <strong>itertools.chain()</strong> function performs a similar function, but requires that all of the chained iterables be specified as arguments. In the case of this particular recipe, doing that would involve a statement such as <strong>lines = itertools.chain(*files)</strong>, which would cause the <strong>gen_opener()</strong> generator to be fully consumed. Since that generator is producing a sequence of open files that are immediately closed in the next iteration step, <strong>chain()</strong> can’t be used. The solution shown avoids this issue.</p><h2 id="Flattening-a-Nested-Sequence"><a href="#Flattening-a-Nested-Sequence" class="headerlink" title="Flattening a Nested Sequence"></a>Flattening a Nested Sequence</h2><p>You have a nested sequence that you want to flatten into a single list of values. This is easily solved by writing a recursive generator function involving a <strong>yield from</strong> statement</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">flatten</span><span class="params">(items, ignore_types=<span class="params">(str, bytes)</span>)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> x <span class="keyword">in</span> items:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> isinstance(x, Iterable) <span class="keyword">and</span> <span class="keyword">not</span> isinstance(x, ignore_types):</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">yield</span> <span class="keyword">from</span> flatten(x)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">yield</span> x</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>], <span class="number">7</span>], <span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> flatten(items):</span><br><span class="line"><span class="meta">... </span>    print(x)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>In the code, the <strong>isinstance(x, Iterable)</strong> simply checks to see if an item is iterable. If so, <strong>yield from</strong> is used to emit all of its values as a kind of subroutine. The extra argument <strong>ignore_types</strong> and the check for <strong>not isinstance(x, ignore_types)</strong> is there to prevent <strong>strings</strong> and <strong>bytes</strong> from being interpreted as iterables and expanded as individual characters. </p><p>The <strong>yield from</strong> statement is a nice shortcut to use if you ever want to write generators that call other generators as subroutines. If you don’t use it, you need to write code that uses an extra for loop.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatten</span><span class="params">(items, ignore_types=<span class="params">(str, bytes)</span>)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">if</span> isinstance(x, Iterable) <span class="keyword">and</span> <span class="keyword">not</span> isinstance(x, ignore_types):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> flatten(x):</span><br><span class="line">                <span class="keyword">yield</span> i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">yield</span> x</span><br></pre></td></tr></table></figure></p><h2 id="Iterating-in-Sorted-Order-Over-Merged-Sorted-Iterables"><a href="#Iterating-in-Sorted-Order-Over-Merged-Sorted-Iterables" class="headerlink" title="Iterating in Sorted Order Over Merged Sorted Iterables"></a>Iterating in Sorted Order Over Merged Sorted Iterables</h2><p>You have a collection of sorted sequences and you want to iterate over a sorted sequence of them all merged together.  The heapq.merge() function does exactly what you want. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> heapq</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> c <span class="keyword">in</span> heapq.merge(a,b):</span><br><span class="line"><span class="meta">... </span>    print(c)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.merge(a,b)</span><br><span class="line">&lt;generator object merge at <span class="number">0x050BF810</span>&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>The iterative nature of <strong>heapq.merge</strong> means that it never reads any of the supplied sequences all at once. This means that you can use it on very long sequences with very little overhead. </p><p>It’s important to emphasize that <strong>heapq.merge()</strong> requires that all of the input sequences already be sorted. In particular, it does not first read all of the data into a heap or do any preliminary sorting. Nor does it perform any kind of validation of the inputs to check if they meet the ordering requirements. Instead, it simply examines the set of items from the front of each input sequence and emits the smallest one found. A new item from the chosen sequence is then read, and the process repeats itself until all input sequences have been fully consumed.</p><h2 id="Replacing-Infinite-while-Loops-with-an-Iterator"><a href="#Replacing-Infinite-while-Loops-with-an-Iterator" class="headerlink" title="Replacing Infinite while Loops with an Iterator"></a>Replacing Infinite while Loops with an Iterator</h2><p>You have code that uses a <strong>while</strong> loop to iteratively process data because it involves a function or some kind of unusual test condition that doesn’t fall into the usual iteration pattern.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>CHUNKSIZE= <span class="number">8192</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">reader</span><span class="params">(s)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="meta">... </span>        data= s.recv(CHUNKSIZE)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> data == <span class="string">b''</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">break</span></span><br><span class="line"><span class="meta">... </span>        process_data(data)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Such code can often be replaced using <strong>iter()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">reader</span><span class="params">(s)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> chunk <span class="keyword">in</span> iter(<span class="keyword">lambda</span> :  s.recv(CHUNKSIZE), <span class="string">b''</span>):</span><br><span class="line"><span class="meta">... </span>        process_data(data)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'/etc/passwd'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> chunk <span class="keyword">in</span> iter(<span class="keyword">lambda</span>: f.read(<span class="number">10</span>), <span class="string">''</span>):</span><br><span class="line"><span class="meta">... </span>   n = sys.stdout.write(chunk)</span><br><span class="line">...</span><br><span class="line">nobody:*:<span class="number">-2</span>:<span class="number">-2</span>:Unprivileged User:/var/empty:/usr/bin/false</span><br><span class="line">root:*:<span class="number">0</span>:<span class="number">0</span>:System Administrator:/var/root:/bin/sh</span><br><span class="line">daemon:*:<span class="number">1</span>:<span class="number">1</span>:System Services:/var/root:/usr/bin/false</span><br><span class="line">_uucp:*:<span class="number">4</span>:<span class="number">4</span>:Unix to Unix Copy Protocol:/var/spool/uucp:/usr/sbin/uucico</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>A little-known feature of the built-in <strong>iter()</strong> function is that it optionally accepts a zeroargument <strong>callable</strong> and <strong>sentinel</strong> (terminating) value as inputs. When used in this way, it creates an iterator that repeatedly calls the supplied <strong>callable</strong> over and over again until it returns the value given as a <strong>sentinel</strong>.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Delegating-Iteration&quot;&gt;&lt;a href=&quot;#Delegating-Iteration&quot; class=&quot;headerlink&quot; title=&quot;Delegating Iteration&quot;&gt;&lt;/a&gt;Delegating Iteration&lt;/h2&gt;&lt;p&gt;You have built a custom container object that internally holds a list, tuple, or some other iterable. You would like to make iteration work with your new container.Typically, all you need to do is define an &lt;strong&gt;__iter__()&lt;/strong&gt; method that delegates iteration to the internally held container&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C02_Strings_and_Text</title>
    <link href="blog.whistlestop.ml/2018/12/15/C02-Strings-and-Text/"/>
    <id>blog.whistlestop.ml/2018/12/15/C02-Strings-and-Text/</id>
    <published>2018-12-15T10:42:20.000Z</published>
    <updated>2018-12-15T11:09:19.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Splitting-Strings-on-Any-of-Multiple-Delimiters"><a href="#Splitting-Strings-on-Any-of-Multiple-Delimiters" class="headerlink" title="Splitting Strings on Any of Multiple Delimiters"></a>Splitting Strings on Any of Multiple Delimiters</h2><p>The <strong>split()</strong> method of string objects is really meant for very simple cases, and does not allow for multiple delimiters or account for possible whitespace around the delimiters. In cases when you need a bit more flexibility, use the <strong>re.split()</strong> method:<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>line = <span class="string">'asdf fjdk; afed, fjek,asdf, foo'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'[;,\s]'</span>, line)</span><br><span class="line">[<span class="string">'asdf'</span>, <span class="string">'fjdk'</span>, <span class="string">''</span>, <span class="string">'afed'</span>, <span class="string">''</span>, <span class="string">'fjek'</span>, <span class="string">'asdf'</span>, <span class="string">''</span>, <span class="string">'foo'</span>]</span><br></pre></td></tr></table></figure></p><p>When using <strong>re.split()</strong>, you need to be a bit careful should the regular expression pattern involve a capture group enclosed in parentheses. If capture groups are used, then the matched text is also included in the result.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fields= re.split(<span class="string">r'(;|,|\s)\s*'</span>, line)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fields</span><br><span class="line">[<span class="string">'asdf'</span>, <span class="string">' '</span>, <span class="string">'fjdk'</span>, <span class="string">';'</span>, <span class="string">'afed'</span>, <span class="string">','</span>, <span class="string">'fjek'</span>, <span class="string">','</span>, <span class="string">'asdf'</span>, <span class="string">','</span>, <span class="string">'foo'</span>]</span><br></pre></td></tr></table></figure><p>If you don’t want the separator characters in the result, but still need to use parentheses to group parts of the regular expression pattern, make sure you use a noncapture group, specified as <strong>(?:…)</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r'(?:,|;|\s)\s*'</span>, line)</span><br><span class="line">[<span class="string">'asdf'</span>, <span class="string">'fjdk'</span>, <span class="string">'afed'</span>, <span class="string">'fjek'</span>, <span class="string">'asdf'</span>, <span class="string">'foo'</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Matching-Text-at-the-Start-or-End-of-a-String"><a href="#Matching-Text-at-the-Start-or-End-of-a-String" class="headerlink" title="Matching Text at the Start or End of a String"></a>Matching Text at the Start or End of a String</h2><p>A simple way to check the beginning or end of a string is to use the <strong>str.startswith()</strong> or <strong>str.endswith()</strong> methods.If you need to check against multiple choices, simply provide a tuple of possibilities to <strong>startswith()</strong> or <strong>endswith()</strong>:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> os</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>filenames = os.listdir(<span class="string">'.'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>filenames</span><br><span class="line">[ <span class="string">'Makefile'</span>, <span class="string">'foo.c'</span>, <span class="string">'bar.py'</span>, <span class="string">'spam.c'</span>, <span class="string">'spam.h'</span> ]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[name <span class="keyword">for</span> name <span class="keyword">in</span> filenames <span class="keyword">if</span> name.endswith((<span class="string">'.c'</span>, <span class="string">'.h'</span>)) ]</span><br><span class="line">[<span class="string">'foo.c'</span>, <span class="string">'spam.c'</span>, <span class="string">'spam.h'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>any(name.endswith(<span class="string">'.py'</span>) <span class="keyword">for</span> name <span class="keyword">in</span> filenames)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>Oddly, this is one part of Python where a tuple is actually required as input. If you happen to have the choices specified in a list or set, just make sure you convert them using <strong>tuple()</strong> first. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>choices = [<span class="string">'http:'</span>, <span class="string">'ftp:'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>url = <span class="string">'http://www.python.org'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>url.startswith(choices)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: startswith first arg must be str <span class="keyword">or</span> a tuple of str, <span class="keyword">not</span> list</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>url.startswith(tuple(choices))</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Matching-Strings-Using-Shell-Wildcard-Patterns"><a href="#Matching-Strings-Using-Shell-Wildcard-Patterns" class="headerlink" title="Matching Strings Using Shell Wildcard Patterns"></a>Matching Strings Using Shell Wildcard Patterns</h2><p>The matching performed by <strong>fnmatch</strong> sits somewhere between the functionality of simple string methods and the full power of regular expressions. If you’re just trying to provide a simple mechanism for allowing wildcards in data processing operations, it’s often a reasonable solution.If you’re actually trying to write code that matches filenames, use the <strong>glob</strong> module instead.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> fnmatch <span class="keyword">import</span> fnmatch, fnmatchcase</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fnmatch(<span class="string">'foo.txt'</span>,<span class="string">'*.txt'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fnmatch(<span class="string">'Dat45.csv'</span>,<span class="string">'Dat[0-9]*'</span>)</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fnmatchcase(<span class="string">'foo.txt'</span>,<span class="string">'*.TXT'</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>If this distinction matters, use <strong>fnmatchcase()</strong> instead. It matches exactly based on the lower and uppercase conventions that you supply:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fnmatchcase(<span class="string">'foo.txt'</span>, <span class="string">'*.TXT'</span>)</span><br><span class="line"><span class="keyword">False</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Matching-and-Searching-for-Text-Patterns"><a href="#Matching-and-Searching-for-Text-Patterns" class="headerlink" title="Matching and Searching for Text Patterns"></a>Matching and Searching for Text Patterns</h2><p>If you’re going to perform a lot of matches using the same pattern, it usually pays to precompile the regular expression pattern into a pattern object first.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datepat = re.compile(<span class="string">r'\d+/\d+/\d+'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> datepat.match(text1):</span><br><span class="line"><span class="meta">... </span>print(<span class="string">'yes'</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>print(<span class="string">'no'</span>)</span><br><span class="line">...</span><br><span class="line">yes</span><br></pre></td></tr></table></figure></p><p><strong>match()</strong> always tries to find the match at the start of a string. If you want to search text for all occurrences of a pattern, use the <strong>findall()</strong> method instead.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>text = <span class="string">'Today is 11/27/2012. PyCon starts 3/13/2013.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datepat.findall(text)</span><br><span class="line">[<span class="string">'11/27/2012'</span>, <span class="string">'3/13/2013'</span>]</span><br></pre></td></tr></table></figure><p>Capture groups often simplify subsequent processing of the matched text because the contents of each group can be extracted individually.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>datepat = re.compile(<span class="string">r'(\d+)/(\d+)/(\d+)'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m=datepat.match(<span class="string">'11/27/2012'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)</span><br><span class="line"><span class="string">'11/27/2012'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">1</span>)</span><br><span class="line"><span class="string">'11'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">2</span>)</span><br><span class="line"><span class="string">'27'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">3</span>)</span><br><span class="line"><span class="string">'2012'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.groups()</span><br><span class="line">(<span class="string">'11'</span>, <span class="string">'27'</span>, <span class="string">'2012'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Find all matches (notice splitting into tuples)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text</span><br><span class="line"><span class="string">'Today is 11/27/2012. PyCon starts 3/13/2013.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datepat.findall(text)</span><br><span class="line">[(<span class="string">'11'</span>, <span class="string">'27'</span>, <span class="string">'2012'</span>), (<span class="string">'3'</span>, <span class="string">'13'</span>, <span class="string">'2013'</span>)]</span><br></pre></td></tr></table></figure><p>The <strong>findall()</strong> method searches the text and finds all matches, returning them as a list. If you want to find matches iteratively, use the <strong>finditer()</strong> method instead.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> m <span class="keyword">in</span> datepat.finditer(text):</span><br><span class="line"><span class="meta">... </span>    print(m.group(<span class="number">0</span>))</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">11</span>/<span class="number">27</span>/<span class="number">2012</span></span><br><span class="line"><span class="number">3</span>/<span class="number">13</span>/<span class="number">2013</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> m <span class="keyword">in</span> datepat.finditer(text):</span><br><span class="line"><span class="meta">... </span>    print(m.groups())</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">(<span class="string">'11'</span>, <span class="string">'27'</span>, <span class="string">'2012'</span>)</span><br><span class="line">(<span class="string">'3'</span>, <span class="string">'13'</span>, <span class="string">'2013'</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Searching-and-Replacing-Text"><a href="#Searching-and-Replacing-Text" class="headerlink" title="Searching and Replacing Text"></a>Searching and Replacing Text</h2><p>For more complicated patterns, use the <strong>sub()</strong> functions/methods in the <strong>re</strong> module. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>text = <span class="string">'Today is 11/27/2012. PyCon starts 3/13/2013.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.sub(<span class="string">r'(\d+)/(\d+)/(\d+)'</span>, <span class="string">r'\3-\1-\2'</span>, text)</span><br><span class="line"><span class="string">'Today is 2012-11-27. PyCon starts 2013-3-13.'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>The first argument to <strong>sub()</strong> is the pattern to match and the second argument is the replacement pattern. Backslashed digits such as <strong>\3</strong> refer to capture group numbers in the pattern.</p><p>If you’re going to perform repeated substitutions of the same pattern, consider compiling it first for better performance. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datepat = re.compile(<span class="string">r'(\d+)/(\d+)/(\d+)'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datepat.sub(<span class="string">r'\3-\1-\2'</span>, text)</span><br><span class="line"><span class="string">'Today is 2012-11-27. PyCon starts 2013-3-13.'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>For more complicated substitutions, it’s possible to specify a substitution callback function instead. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> calendar <span class="keyword">import</span> month_abbr</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">change_date</span><span class="params">(m)</span>:</span></span><br><span class="line"><span class="meta">... </span>mon_name = month_abbr[int(m.group(<span class="number">1</span>))]</span><br><span class="line"><span class="meta">... </span><span class="keyword">return</span> <span class="string">'&#123;&#125; &#123;&#125; &#123;&#125;'</span>.format(m.group(<span class="number">2</span>), mon_name, m.group(<span class="number">3</span>))</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datepat.sub(change_date, text)</span><br><span class="line"><span class="string">'Today is 27 Nov 2012. PyCon starts 13 Mar 2013.'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>As input, the argument to the substitution callback is a <strong>match</strong> object, as returned by <strong>match()</strong> or <strong>find()</strong>. Use the <strong>.group()</strong> method to extract specific parts of the match. The function should return the replacement text.</p><p>If you want to know how many substitutions were made in addition to getting the replacement text, use <strong>re.subn()</strong> instead.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newtext, n = datepat.subn(<span class="string">r'\3-\1-\2'</span>, text)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newtext</span><br><span class="line"><span class="string">'Today is 2012-11-27. PyCon starts 2013-3-13.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p><h2 id="Searching-and-Replacing-Case-Insensitive-Text"><a href="#Searching-and-Replacing-Case-Insensitive-Text" class="headerlink" title="Searching and Replacing Case-Insensitive Text"></a>Searching and Replacing Case-Insensitive Text</h2><p>To perform case-insensitive text operations, you need to use the re module and supply the <strong>re.IGNORECASE</strong> flag to various operations. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>text = <span class="string">'UPPER PYTHON, lower python, Mixed Python'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(<span class="string">'python'</span>, text, flags=re.IGNORECASE)</span><br><span class="line">[<span class="string">'PYTHON'</span>, <span class="string">'python'</span>, <span class="string">'Python'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.sub(<span class="string">'python'</span>, <span class="string">'snake'</span>, text, flags=re.IGNORECASE)</span><br><span class="line"><span class="string">'UPPER snake, lower snake, Mixed snake'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>The last example reveals a limitation that replacing text won’t match the case of the matched text. If you need to fix this, you might have to use a support function.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">matchcase</span><span class="params">(word)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">replace</span><span class="params">(m)</span>:</span></span><br><span class="line"><span class="meta">... </span>        text= m.group()</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> text.isupper():</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> word.upper()</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">elif</span> text.islower():</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> word.lower()</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">elif</span> text[<span class="number">0</span>].isupper():</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> word.capitalize()</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">return</span> word          </span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> replace</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.sub(<span class="string">'python'</span>, matchcase(<span class="string">'snake'</span>), text, flags=re.IGNORECASE)</span><br><span class="line"><span class="string">'UPPER SNAKE, lower snake, Mixed Snake'</span></span><br></pre></td></tr></table></figure><h2 id="Specifying-a-Regular-Expression-for-the-Shortest-Match"><a href="#Specifying-a-Regular-Expression-for-the-Shortest-Match" class="headerlink" title="Specifying a Regular Expression for the Shortest Match"></a>Specifying a Regular Expression for the Shortest Match</h2><p>You’re trying to match a text pattern using regular expressions, but it is identifying the longest possible matches of a pattern. Instead, you would like to change it to find the shortest possible match.This problem often arises in patterns that try to match text enclosed inside a pair of starting and ending delimiters (e.g., a quoted string).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str_pat= re.compile(<span class="string">r'"(.*)"'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text1= <span class="string">'Computer says "no."'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str_pat.findall(text1)</span><br><span class="line">[<span class="string">'no.'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text2 = <span class="string">'Computer says "no." Phone says "yes."'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str_pat.findall(text2)</span><br><span class="line">[<span class="string">'no." Phone says "yes.'</span>]</span><br></pre></td></tr></table></figure><p>In this example, the pattern <strong>r’”(.*)”‘</strong> is attempting to match text enclosed inside quotes. However, the * operator in a regular expression is greedy, so matching is based on finding the longest possible match.</p><p>To fix this, add the <strong>?</strong> modifier after the <strong>*</strong> operator in the pattern</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>str_pat= re.compile(<span class="string">r'"(.*?)"'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str_pat.findall(text2)</span><br><span class="line">[<span class="string">'no.'</span>, <span class="string">'yes.'</span>]</span><br></pre></td></tr></table></figure><p>In a pattern, the dot matches any character except a newline. However, if you bracket the dot with starting and ending text (such as a quote), matching will try to find the longest possible match to the pattern.This causes multiple occurrences of the starting or ending text to be skipped altogether and included in the results of the longer match. Adding the <strong>?</strong> right after operators such as <strong>*</strong> or <strong>+</strong> forces the matching algorithm to look for the shortest possible match instead.</p><h2 id="Sanitizing-and-Cleaning-Up-Text"><a href="#Sanitizing-and-Cleaning-Up-Text" class="headerlink" title="Sanitizing and Cleaning Up Text"></a>Sanitizing and Cleaning Up Text</h2><p>Some bored script kiddie has entered the text “pýtĥöñ” into a form on your web page and you’d like to clean it up somehow.s. To do so, you can turn to the often overlooked <strong>str.translate()</strong> method. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'pýtĥöñ\fis\tawesome\r\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="string">'pýtĥöñ\x0cis\tawesome\r\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>remap = &#123;</span><br><span class="line"><span class="meta">... </span>ord(<span class="string">'\t'</span>) : <span class="string">' '</span>,</span><br><span class="line"><span class="meta">... </span>ord(<span class="string">'\f'</span>) : <span class="string">' '</span>,</span><br><span class="line"><span class="meta">... </span>ord(<span class="string">'\r'</span>) : <span class="keyword">None</span> <span class="comment"># Deleted</span></span><br><span class="line"><span class="meta">... </span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = s.translate(remap)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">'pýtĥöñ is awesome\n'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>You can take this remapping idea a step further and build much bigger tables. For example, let’s remove all combining characters:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> unicodedata</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cmb_chrs = dict.fromkeys(c <span class="keyword">for</span> c <span class="keyword">in</span> range(sys.maxunicode)</span><br><span class="line"><span class="meta">... </span><span class="keyword">if</span> unicodedata.combining(chr(c)))</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = unicodedata.normalize(<span class="string">'NFD'</span>, a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">'pýtĥöñ is awesome\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.translate(cmb_chrs)</span><br><span class="line"><span class="string">'python is awesome\n'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>A dictionary mapping every Unicode combining character to <strong>None</strong> is created using the <strong>dict.fromkeys()</strong>.</p><h2 id="Aligning-Text-Strings"><a href="#Aligning-Text-Strings" class="headerlink" title="Aligning Text Strings"></a>Aligning Text Strings</h2><p>For basic alignment of strings, the <strong>ljust()</strong>, <strong>rjust()</strong>, and <strong>center()</strong> methods of strings can be used. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>text = <span class="string">'Hello World'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text.ljust(<span class="number">20</span>)</span><br><span class="line"><span class="string">'Hello World '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text.rjust(<span class="number">20</span>)</span><br><span class="line"><span class="string">' Hello World'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text.center(<span class="number">20</span>)</span><br><span class="line"><span class="string">' Hello World '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text.rjust(<span class="number">20</span>,<span class="string">'='</span>)</span><br><span class="line"><span class="string">'=========Hello World'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text.center(<span class="number">20</span>,<span class="string">'*'</span>)</span><br><span class="line"><span class="string">'****Hello World*****'</span></span><br></pre></td></tr></table></figure><p>The <strong>format()</strong> function can also be used to easily align things. All you need to do is use the <strong>&lt;</strong>, <strong>&gt;</strong>, or <strong>^</strong> characters along with a desired width. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>format(text, <span class="string">'&gt;20'</span>)</span><br><span class="line"><span class="string">' Hello World'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>format(text, <span class="string">'&lt;20'</span>)</span><br><span class="line"><span class="string">'Hello World '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>format(text, <span class="string">'^20'</span>)</span><br><span class="line"><span class="string">' Hello World '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>format(text, <span class="string">'=&gt;20s'</span>)</span><br><span class="line"><span class="string">'=========Hello World'</span></span><br></pre></td></tr></table></figure><p>One benefit of <strong>format()</strong> is that it is not specific to strings. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">1.2345</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>format(x, <span class="string">'&gt;10'</span>)</span><br><span class="line"><span class="string">' 1.2345'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>format(x, <span class="string">'^10.2f'</span>)</span><br><span class="line"><span class="string">' 1.23 '</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>In older code, you will also see the <strong>%</strong> operator used to format text. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%-20s'</span> % text</span><br><span class="line"><span class="string">'Hello World '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%20s'</span> % text</span><br><span class="line"><span class="string">' Hello World'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Combining-and-Concatenating-Strings"><a href="#Combining-and-Concatenating-Strings" class="headerlink" title="Combining and Concatenating Strings"></a>Combining and Concatenating Strings</h2><p>If you’re writing code that is building output from lots of small strings, you might consider writing that code as a generator function, using <strong>yield</strong> to emit fragments. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">sample</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">yield</span> <span class="string">'Is'</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">yield</span> <span class="string">'Chicago'</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">yield</span> <span class="string">'Not'</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">yield</span> <span class="string">'Chicago'</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text=<span class="string">''</span>.join(sample())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text</span><br><span class="line"><span class="string">'IsChicagoNotChicago'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>Or you could come up with some kind of hybrid scheme that’s smart about combining I/O operations:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">combine</span><span class="params">(source, maxsize)</span>:</span></span><br><span class="line"><span class="meta">... </span>    parts=[]</span><br><span class="line"><span class="meta">... </span>    size=<span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> part <span class="keyword">in</span> source:</span><br><span class="line"><span class="meta">... </span>        parts.append(part)</span><br><span class="line"><span class="meta">... </span>        size+=len(part)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> size &gt; maxsize:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">yield</span> <span class="string">''</span>.join(parts)</span><br><span class="line"><span class="meta">... </span>            parts=[]</span><br><span class="line"><span class="meta">... </span>            size=<span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">yield</span> <span class="string">''</span>.join(parts)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> part <span class="keyword">in</span> combine(sample(), <span class="number">32768</span>):</span><br><span class="line"><span class="meta">... </span>    f.write(part)</span><br></pre></td></tr></table></figure></p><h2 id="Handling-HTML-and-XML-Entities-in-Text"><a href="#Handling-HTML-and-XML-Entities-in-Text" class="headerlink" title="Handling HTML and XML Entities in Text"></a>Handling HTML and XML Entities in Text</h2><p>If you are producing text, replacing special characters such as <strong>&lt;</strong> or <strong>&gt;</strong> is relatively easy if you use the <strong>html.escape()</strong> function. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'Elements are written as "&lt;tag&gt;text&lt;/tag&gt;".'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> html</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(html.escape(s))</span><br><span class="line">Elements are written <span class="keyword">as</span> &amp;quot;&amp;lt;tag&amp;gt;text&amp;lt;/tag&amp;gt;&amp;quot;.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(html.escape(s, quote=<span class="keyword">False</span>))  <span class="comment"># Disable escaping of quotes</span></span><br><span class="line">Elements are written <span class="keyword">as</span> <span class="string">"&amp;lt;tag&amp;gt;text&amp;lt;/tag&amp;gt;"</span>.</span><br></pre></td></tr></table></figure><p>If you’re trying to emit text as ASCII and want to embed character code entities for nonASCII characters, you can use the <strong>errors=’xmlcharrefreplace’</strong> argument to various I/O-related functions to do it. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'Spicy Jalapeño'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.encode(<span class="string">'ascii'</span>, errors=<span class="string">'xmlcharrefreplace'</span>)</span><br><span class="line"><span class="string">b'Spicy Jalape&amp;#241;o'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'Spicy &amp;quot;Jalape&amp;#241;o&amp;quot.'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> html.parser <span class="keyword">import</span> HTMLParser</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p=HTMLParser()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.unescape</span><br><span class="line">&lt;bound method HTMLParser.unescape of &lt;html.parser.HTMLParser object at <span class="number">0x0536FB90</span>&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.unescape(s)</span><br><span class="line"><span class="string">'Spicy "Jalapeño".'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="string">'The prompt is &amp;gt;&amp;gt;&amp;gt;'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> xml.sax.saxutils <span class="keyword">import</span> unescape</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>unescape(t)</span><br><span class="line"><span class="string">'The prompt is &gt;&gt;&gt;'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Tokenizing-Text"><a href="#Tokenizing-Text" class="headerlink" title="Tokenizing Text"></a>Tokenizing Text</h2><p>You have a string that you want to parse left to right into a stream of tokens.To tokenize the string, you need to do more than merely match patterns. You need to have some way to identify the kind of pattern as well. For instance, you might want to turn the string into a sequence of pairs like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tokens = [(<span class="string">'NAME'</span>, <span class="string">'foo'</span>), (<span class="string">'EQ'</span>,<span class="string">'='</span>), (<span class="string">'NUM'</span>, <span class="string">'23'</span>), (<span class="string">'PLUS'</span>,<span class="string">'+'</span>),</span><br><span class="line"> (<span class="string">'NUM'</span>, <span class="string">'42'</span>), (<span class="string">'TIMES'</span>, <span class="string">'*'</span>), (<span class="string">'NUM'</span>, <span class="number">10</span><span class="string">')]</span></span><br></pre></td></tr></table></figure><p>To do this kind of splitting, the first step is to define all of the possible tokens, including whitespace, by regular expression patterns using named capture groups such as this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">NAME = <span class="string">r'(?P&lt;NAME&gt;[a-zA-Z_][a-zA-Z_0-9]*)'</span></span><br><span class="line">NUM = <span class="string">r'(?P&lt;NUM&gt;\d+)'</span></span><br><span class="line">PLUS = <span class="string">r'(?P&lt;PLUS&gt;\+)'</span></span><br><span class="line">TIMES = <span class="string">r'(?P&lt;TIMES&gt;\*)'</span></span><br><span class="line">EQ = <span class="string">r'(?P&lt;EQ&gt;=)'</span></span><br><span class="line">WS = <span class="string">r'(?P&lt;WS&gt;\s+)'</span></span><br><span class="line">master_pat = re.compile(<span class="string">'|'</span>.join([NAME, NUM, PLUS, TIMES, EQ, WS]))</span><br></pre></td></tr></table></figure><p>In these re patterns, the <strong>?P<tokenname></tokenname></strong> convention is used to assign a name to the pattern. This will be used later.</p><p>Next, to tokenize, use the little-known <strong>scanner()</strong> method of pattern objects. This method creates a scanner object in which repeated calls to <strong>match()</strong> step through the supplied text one match at a time. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>scanner = master_pat.scanner(<span class="string">'foo = 42'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>scanner.match()</span><br><span class="line">&lt;_sre.SRE_Match object at <span class="number">0x100677738</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_.lastgroup, _.group()</span><br><span class="line">(<span class="string">'NAME'</span>, <span class="string">'foo'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>scanner.match()</span><br><span class="line">&lt;_sre.SRE_Match object at <span class="number">0x100677738</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_.lastgroup, _.group()</span><br><span class="line">(<span class="string">'WS'</span>, <span class="string">' '</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>scanner.match()</span><br><span class="line">&lt;_sre.SRE_Match object at <span class="number">0x100677738</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_.lastgroup, _.group()</span><br><span class="line">(<span class="string">'EQ'</span>, <span class="string">'='</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>scanner.match()</span><br><span class="line">&lt;_sre.SRE_Match object at <span class="number">0x100677738</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_.lastgroup, _.group()</span><br><span class="line">(<span class="string">'WS'</span>, <span class="string">' '</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>scanner.match()</span><br><span class="line">&lt;_sre.SRE_Match object at <span class="number">0x100677738</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_.lastgroup, _.group()</span><br><span class="line">(<span class="string">'NUM'</span>, <span class="string">'42'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>scanner.match()</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>To take this technique and put it into code, it can be cleaned up and easily packaged into a generator like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line">Token = namedtuple(<span class="string">'Token'</span>, [<span class="string">'type'</span>,<span class="string">'value'</span>])</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_tokens</span><span class="params">(pat, text)</span>:</span></span><br><span class="line">    scanner = pat.scanner(text)</span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> iter(scanner.match, <span class="keyword">None</span>):</span><br><span class="line">        <span class="keyword">yield</span> Token(m.lastgroup, m.group())</span><br><span class="line"><span class="comment"># Example use</span></span><br><span class="line"><span class="keyword">for</span> tok <span class="keyword">in</span> generate_tokens(master_pat, <span class="string">'foo = 42'</span>):</span><br><span class="line">    print(tok)</span><br><span class="line"><span class="comment"># Produces output</span></span><br><span class="line"><span class="comment"># Token(type='NAME', value='foo')</span></span><br><span class="line"><span class="comment"># Token(type='WS', value=' ')</span></span><br><span class="line"><span class="comment"># Token(type='EQ', value='=')</span></span><br><span class="line"><span class="comment"># Token(type='WS', value=' ')</span></span><br><span class="line"><span class="comment"># Token(type='NUM', value='42')</span></span><br></pre></td></tr></table></figure><p>If you want to filter the token stream in some way, you can either define more generator functions or use a generator expression. For example, here is how you might filter out all whitespace tokens.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tokens = (tok <span class="keyword">for</span> tok <span class="keyword">in</span> generate_tokens(master_pat, text)</span><br><span class="line">                <span class="keyword">if</span> tok.type != <span class="string">'WS'</span>)</span><br><span class="line"><span class="keyword">for</span> tok <span class="keyword">in</span> tokens:</span><br><span class="line">    print(tok)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Splitting-Strings-on-Any-of-Multiple-Delimiters&quot;&gt;&lt;a href=&quot;#Splitting-Strings-on-Any-of-Multiple-Delimiters&quot; class=&quot;headerlink&quot; title=&quot;Splitting Strings on Any of Multiple Delimiters&quot;&gt;&lt;/a&gt;Splitting Strings on Any of Multiple Delimiters&lt;/h2&gt;&lt;p&gt;The &lt;strong&gt;split()&lt;/strong&gt; method of string objects is really meant for very simple cases, and does not allow for multiple delimiters or account for possible whitespace around the delimiters. In cases when you need a bit more flexibility, use the &lt;strong&gt;re.split()&lt;/strong&gt; method:&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C01_Data_Structures_and_Algorithms</title>
    <link href="blog.whistlestop.ml/2018/12/15/C01-Data-Structures-and-Algorithms/"/>
    <id>blog.whistlestop.ml/2018/12/15/C01-Data-Structures-and-Algorithms/</id>
    <published>2018-12-15T10:41:16.000Z</published>
    <updated>2018-12-15T11:08:45.900Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Unpacking-a-Sequence-into-Separate-Variables"><a href="#Unpacking-a-Sequence-into-Separate-Variables" class="headerlink" title="Unpacking a Sequence into Separate Variables"></a>Unpacking a Sequence into Separate Variables</h2><p>Unpacking actually works with any object that happens to be iterable, not just tuples or lists. This includes strings, files, iterators, and generators. For example:<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p=(<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x,y=p</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">'Hello'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a,b,c,d,e=s</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">'H'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">'e'</span></span><br></pre></td></tr></table></figure></p><h2 id="Unpacking-Elements-from-Iterables-of-Arbitrary-Length"><a href="#Unpacking-Elements-from-Iterables-of-Arbitrary-Length" class="headerlink" title="Unpacking Elements from Iterables of Arbitrary Length"></a>Unpacking Elements from Iterables of Arbitrary Length</h2><p>You need to unpack N elements from an <strong>iterable</strong>, but the iterable may be longer than N elements, causing a “too many values to unpack” exception.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>record = (<span class="string">'Dave'</span>, <span class="string">'dave@example.com'</span>, <span class="string">'773-555-1212'</span>, <span class="string">'847-555-1212'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name,email,*phone= record</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>phone</span><br><span class="line">[<span class="string">'773-555-1212'</span>, <span class="string">'847-555-1212'</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>It’s worth noting that the <strong>phone</strong> variable will always be a list, regardless of how many phone numbers are unpacked (including <strong>none</strong>). </p><p>The starred variable can also be the first one in the list. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>*trailing, current=[<span class="number">10</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>trailing</span><br><span class="line">[<span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>current</span><br><span class="line"><span class="number">5</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Keeping-the-Last-N-Items"><a href="#Keeping-the-Last-N-Items" class="headerlink" title="Keeping the Last N Items"></a>Keeping the Last N Items</h2><p>Using <strong>deque(maxlen=N)</strong> creates a fixed-sized queue. When new items are added and the queue is full, the oldest item is automatically removed.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(lines, pattern, history=<span class="number">5</span>)</span>:</span></span><br><span class="line"><span class="meta">... </span>    previous_lines=deque(maxlen=history)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> pattern <span class="keyword">in</span> line:</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">yield</span> license, previous_lines</span><br><span class="line"><span class="meta">... </span>        previous_lines.append(line)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>More generally, a <strong>deque</strong> can be used whenever you need a simple queue structure. If you don’t give it a maximum size, you get an unbounded queue that lets you append and pop items on either end.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>q=deque()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q.append(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q.append(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q</span><br><span class="line">deque([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q.appendleft(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q</span><br><span class="line">deque([<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Finding-the-Largest-or-Smallest-N-Items"><a href="#Finding-the-Largest-or-Smallest-N-Items" class="headerlink" title="Finding the Largest or Smallest N Items"></a>Finding the Largest or Smallest N Items</h2><p>You want to make a list of the largest or smallest N items in a collection. The <strong>heapq</strong> module has two functions—<strong>nlargest()</strong> and <strong>nsmallest()</strong>—that do exactly what you want.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> heapq</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums = [<span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">23</span>, <span class="number">7</span>, <span class="number">-4</span>, <span class="number">18</span>, <span class="number">23</span>, <span class="number">42</span>, <span class="number">37</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.nlargest(<span class="number">3</span>, nums)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.nlargest(<span class="number">3</span>, nums)</span><br><span class="line">[<span class="number">42</span>, <span class="number">37</span>, <span class="number">23</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.nsmallest(<span class="number">3</span>, nums)</span><br><span class="line">[<span class="number">-4</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>portfolio = [</span><br><span class="line"><span class="meta">... </span> &#123;<span class="string">'name'</span>: <span class="string">'IBM'</span>, <span class="string">'shares'</span>: <span class="number">100</span>, <span class="string">'price'</span>: <span class="number">91.1</span>&#125;,</span><br><span class="line"><span class="meta">... </span> &#123;<span class="string">'name'</span>: <span class="string">'AAPL'</span>, <span class="string">'shares'</span>: <span class="number">50</span>, <span class="string">'price'</span>: <span class="number">543.22</span>&#125;,</span><br><span class="line"><span class="meta">... </span> &#123;<span class="string">'name'</span>: <span class="string">'FB'</span>, <span class="string">'shares'</span>: <span class="number">200</span>, <span class="string">'price'</span>: <span class="number">21.09</span>&#125;,</span><br><span class="line"><span class="meta">... </span> &#123;<span class="string">'name'</span>: <span class="string">'HPQ'</span>, <span class="string">'shares'</span>: <span class="number">35</span>, <span class="string">'price'</span>: <span class="number">31.75</span>&#125;,</span><br><span class="line"><span class="meta">... </span> &#123;<span class="string">'name'</span>: <span class="string">'YHOO'</span>, <span class="string">'shares'</span>: <span class="number">45</span>, <span class="string">'price'</span>: <span class="number">16.35</span>&#125;,</span><br><span class="line"><span class="meta">... </span> &#123;<span class="string">'name'</span>: <span class="string">'ACME'</span>, <span class="string">'shares'</span>: <span class="number">75</span>, <span class="string">'price'</span>: <span class="number">115.65</span>&#125;</span><br><span class="line"><span class="meta">... </span>]</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cheap=heapq.nsmallest(<span class="number">3</span>, portfolio, key=<span class="keyword">lambda</span> s:s[<span class="string">'price'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cheap</span><br><span class="line">[&#123;<span class="string">'name'</span>: <span class="string">'YHOO'</span>, <span class="string">'price'</span>: <span class="number">16.35</span>, <span class="string">'shares'</span>: <span class="number">45</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'FB'</span>, <span class="string">'price'</span>: <span class="number">21.09</span>, <span class="string">'shares'</span>: <span class="number">200</span>&#125;, &#123;<span class="string">'name'</span>: <span class="string">'HPQ'</span>, <span class="string">'price'</span>: <span class="number">31.</span></span><br><span class="line">```<span class="number">75</span>, <span class="string">'shares'</span>: <span class="number">35</span>&#125;]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>If you are looking for the N smallest or largest items and N is small compared to the overall size of the collection, these functions provide superior performance. Underneath the covers, they work by first converting the data into a list where items are ordered as a heap. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nums</span><br><span class="line">[<span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">23</span>, <span class="number">7</span>, <span class="number">-4</span>, <span class="number">18</span>, <span class="number">23</span>, <span class="number">42</span>, <span class="number">37</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heap=list(nums)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heapq.heapify(heap)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heap</span><br><span class="line">[<span class="number">-4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">23</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">18</span>, <span class="number">23</span>, <span class="number">42</span>, <span class="number">37</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure><p>The most important feature of a heap is that <strong>heap[0]</strong> is always the smallest item. Moreover, subsequent items can be easily found using the <strong>heapq.heappop()</strong> method.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; heapq.heappop(heap)</span><br><span class="line">-4</span><br><span class="line">&gt;&gt;&gt; heapq.heappop(heap)</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>The <strong>nlargest()</strong> and <strong>nsmallest()</strong> functions are most appropriate if you are trying to find a relatively small number of items. If you are simply trying to find the single smallest or largest item (N=1), it is faster to use <strong>min()</strong> and <strong>max().</strong> Similarly, if N is about the same size as the collection itself, it is usually faster to sort it first and take a slice (i.e., use <strong>sorted(items)[:N]</strong> or <strong>sorted(items)[-N:]</strong>). </p><h2 id="Mapping-Keys-to-Multiple-Values-in-a-Dictionary"><a href="#Mapping-Keys-to-Multiple-Values-in-a-Dictionary" class="headerlink" title="Mapping Keys to Multiple Values in a Dictionary"></a>Mapping Keys to Multiple Values in a Dictionary</h2><p>You want to make a dictionary that maps keys to more than one value.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d= defaultdict(list)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">defaultdict(&lt;class 'list'&gt;, &#123;&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'a'</span>].append(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'b'</span>].append(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">defaultdict(&lt;class 'list'&gt;, &#123;'b': [2], 'a': [1]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d= defaultdict(set)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'a'</span>]</span><br><span class="line">set()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'a'</span>].add(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'a'</span>].add(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'b'</span>].add(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">defaultdict(&lt;class 'set'&gt;, &#123;'b': &#123;4&#125;, 'a': &#123;1, 2&#125;&#125;)</span><br></pre></td></tr></table></figure><p>One caution with <strong>defaultdict</strong> is that it will automatically create dictionary entries for keys accessed later on (even if they aren’t currently found in the dictionary). If you don’t want this behavior, you might use <strong>setdefault()</strong> on an ordinary dictionary instead. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=&#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.setdefault(<span class="string">'a'</span>,[]).append(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'a'</span>: [<span class="number">1</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d.setdefault(<span class="string">'b'</span>,[]).append(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&#123;<span class="string">'b'</span>: [<span class="number">2</span>], <span class="string">'a'</span>: [<span class="number">1</span>]&#125;</span><br></pre></td></tr></table></figure><p>In principle, constructing a multivalued dictionary is simple. However, initialization of the first value can be messy if you try to do it yourself. For example, you might have code that looks like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=&#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key , value <span class="keyword">in</span> pairs:</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> pairs:</span><br><span class="line"><span class="meta">... </span>        d[key]=[]</span><br><span class="line"><span class="meta">... </span>    d[key].append(value)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Using a <strong>defaultdict</strong> simply leads to much cleaner code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=defaultdict(list)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key, value <span class="keyword">in</span> pairs:</span><br><span class="line"><span class="meta">... </span>    d[key].append(value)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Naming-a-Slice"><a href="#Naming-a-Slice" class="headerlink" title="Naming a Slice"></a>Naming a Slice</h2><p>As a general rule, writing code with a lot of hardcoded index values leads to a readability and maintenance mess. In general, the built-in <strong>slice()</strong> creates a slice object that can be used anywhere a slice is allowed. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>items = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=slice(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items[a]</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items[a]=[<span class="number">10</span>,<span class="number">11</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> items[a]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>items</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=slice(<span class="number">10</span>, <span class="number">50</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.start, a.stop, a.step</span><br><span class="line">(<span class="number">10</span>, <span class="number">50</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=<span class="string">'HelloWorld'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.indices(len(s))</span><br><span class="line">(<span class="number">10</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Determining-the-Most-Frequently-Occurring-Items-in-a-Sequence"><a href="#Determining-the-Most-Frequently-Occurring-Items-in-a-Sequence" class="headerlink" title="Determining the Most Frequently Occurring Items in a Sequence"></a>Determining the Most Frequently Occurring Items in a Sequence</h2><p><strong>Counter</strong> objects are a tremendously useful tool for almost any kind of problem where you need to tabulate and count data.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>words = [</span><br><span class="line"><span class="meta">... </span> <span class="string">'look'</span>, <span class="string">'into'</span>, <span class="string">'my'</span>, <span class="string">'eyes'</span>, <span class="string">'look'</span>, <span class="string">'into'</span>, <span class="string">'my'</span>, <span class="string">'eyes'</span>,</span><br><span class="line"><span class="meta">... </span> <span class="string">'the'</span>, <span class="string">'eyes'</span>, <span class="string">'the'</span>, <span class="string">'eyes'</span>, <span class="string">'the'</span>, <span class="string">'eyes'</span>, <span class="string">'not'</span>, <span class="string">'around'</span>, <span class="string">'the'</span>,</span><br><span class="line"><span class="meta">... </span> <span class="string">'eyes'</span>, <span class="string">"don't"</span>, <span class="string">'look'</span>, <span class="string">'around'</span>, <span class="string">'the'</span>, <span class="string">'eyes'</span>, <span class="string">'look'</span>, <span class="string">'into'</span>,</span><br><span class="line"><span class="meta">... </span> <span class="string">'my'</span>, <span class="string">'eyes'</span>, <span class="string">"you're"</span>, <span class="string">'under'</span></span><br><span class="line"><span class="meta">... </span>]</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Counter </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>word_counts= Counter(words)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>top_three= word_counts.most_common(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>top_three</span><br><span class="line">[(<span class="string">'eyes'</span>, <span class="number">8</span>), (<span class="string">'the'</span>, <span class="number">5</span>), (<span class="string">'look'</span>, <span class="number">4</span>)]</span><br></pre></td></tr></table></figure></p><p><strong>Counter</strong> objects can be fed any sequence of hashable input items. Under the covers, a Counter is a dictionary that maps the items to the number of occurrences. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>word_counts[<span class="string">'eyes'</span>]</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure><p>If you want to increment the count manually, simply use addition:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>morewords = [<span class="string">'why'</span>,<span class="string">'are'</span>,<span class="string">'you'</span>,<span class="string">'not'</span>,<span class="string">'looking'</span>,<span class="string">'in'</span>,<span class="string">'my'</span>,<span class="string">'eyes'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> w <span class="keyword">in</span> morewords:</span><br><span class="line"><span class="meta">... </span>    word_counts[w]+=<span class="number">1</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>word_counts[<span class="string">'eyes'</span>]</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><p>Or, alternatively, you could use the <strong>update()</strong> method:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>word_counts.update(morewords) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>word_counts[<span class="string">'eyes'</span>]</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p>A little-known feature of <strong>Counter</strong> instances is that they can be easily combined using various mathematical operations. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = Counter(words)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = Counter(morewords)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">Counter(&#123;<span class="string">'eyes'</span>: <span class="number">8</span>, <span class="string">'the'</span>: <span class="number">5</span>, <span class="string">'look'</span>: <span class="number">4</span>, <span class="string">'into'</span>: <span class="number">3</span>, <span class="string">'my'</span>: <span class="number">3</span>, <span class="string">'around'</span>: <span class="number">2</span>, <span class="string">"don't"</span>: <span class="number">1</span>, <span class="string">'under'</span>: <span class="number">1</span>, <span class="string">"you're"</span>: <span class="number">1</span>, <span class="string">'not'</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">Counter(&#123;<span class="string">'are'</span>: <span class="number">1</span>, <span class="string">'looking'</span>: <span class="number">1</span>, <span class="string">'in'</span>: <span class="number">1</span>, <span class="string">'you'</span>: <span class="number">1</span>, <span class="string">'eyes'</span>: <span class="number">1</span>, <span class="string">'not'</span>: <span class="number">1</span>, <span class="string">'my'</span>: <span class="number">1</span>, <span class="string">'why'</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a+b</span><br><span class="line">Counter(&#123;<span class="string">'eyes'</span>: <span class="number">9</span>, <span class="string">'the'</span>: <span class="number">5</span>, <span class="string">'my'</span>: <span class="number">4</span>, <span class="string">'look'</span>: <span class="number">4</span>, <span class="string">'into'</span>: <span class="number">3</span>, <span class="string">'around'</span>: <span class="number">2</span>, <span class="string">'not'</span>: <span class="number">2</span>, <span class="string">'are'</span>: <span class="number">1</span>, <span class="string">'you'</span>: <span class="number">1</span>, <span class="string">"don't"</span>: <span class="number">1</span>, <span class="string">'under'</span>: <span class="number">1</span>, <span class="string">"you're"</span>: <span class="number">1</span>, <span class="string">'why'</span>: <span class="number">1</span>, <span class="string">'looking'</span>: <span class="number">1</span>, <span class="string">'in'</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a-b</span><br><span class="line">Counter(&#123;<span class="string">'eyes'</span>: <span class="number">7</span>, <span class="string">'the'</span>: <span class="number">5</span>, <span class="string">'look'</span>: <span class="number">4</span>, <span class="string">'into'</span>: <span class="number">3</span>, <span class="string">'around'</span>: <span class="number">2</span>, <span class="string">'my'</span>: <span class="number">2</span>, <span class="string">"you're"</span>: <span class="number">1</span>, <span class="string">"don't"</span>: <span class="number">1</span>, <span class="string">'under'</span>: <span class="number">1</span>&#125;)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Sorting-a-List-of-Dictionaries-by-a-Common-Key"><a href="#Sorting-a-List-of-Dictionaries-by-a-Common-Key" class="headerlink" title="Sorting a List of Dictionaries by a Common Key"></a>Sorting a List of Dictionaries by a Common Key</h2><p>You have a list of dictionaries and you would like to sort the entries according to one or more of the dictionary values. Sorting this type of structure is easy using the operator module’s <strong>itemgetter</strong> function.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>rows = [</span><br><span class="line"><span class="meta">... </span> &#123;<span class="string">'fname'</span>: <span class="string">'Brian'</span>, <span class="string">'lname'</span>: <span class="string">'Jones'</span>, <span class="string">'uid'</span>: <span class="number">1003</span>&#125;,</span><br><span class="line"><span class="meta">... </span> &#123;<span class="string">'fname'</span>: <span class="string">'David'</span>, <span class="string">'lname'</span>: <span class="string">'Beazley'</span>, <span class="string">'uid'</span>: <span class="number">1002</span>&#125;,</span><br><span class="line"><span class="meta">... </span> &#123;<span class="string">'fname'</span>: <span class="string">'John'</span>, <span class="string">'lname'</span>: <span class="string">'Cleese'</span>, <span class="string">'uid'</span>: <span class="number">1001</span>&#125;,</span><br><span class="line"><span class="meta">... </span> &#123;<span class="string">'fname'</span>: <span class="string">'Big'</span>, <span class="string">'lname'</span>: <span class="string">'Jones'</span>, <span class="string">'uid'</span>: <span class="number">1004</span>&#125;</span><br><span class="line"><span class="meta">... </span>]</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rows_by_fname=sorted(rows, key= itemgetter(<span class="string">'fname'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rows_by_uid= sorted(rows,key= itemgetter(<span class="string">'uid'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rows_by_fname</span><br><span class="line">[&#123;<span class="string">'uid'</span>: <span class="number">1004</span>, <span class="string">'fname'</span>: <span class="string">'Big'</span>, <span class="string">'lname'</span>: <span class="string">'Jones'</span>&#125;, &#123;<span class="string">'uid'</span>: <span class="number">1003</span>, <span class="string">'fname'</span>: <span class="string">'Brian'</span>, <span class="string">'lname'</span>: <span class="string">'Jones'</span>&#125;, &#123;<span class="string">'uid'</span>: <span class="number">1002</span>, <span class="string">'fname'</span>: <span class="string">'David'</span>, <span class="string">'lname'</span>: <span class="string">'Beazley'</span>&#125;, &#123;<span class="string">'uid'</span>: <span class="number">1001</span>, <span class="string">'fname'</span>: <span class="string">'John'</span>, <span class="string">'lname'</span>: <span class="string">'Cleese'</span>&#125;]</span><br></pre></td></tr></table></figure><p>The <strong>itemgetter()</strong> function can also accept multiple keys. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=itemgetter(<span class="string">'lname'</span>, <span class="string">'fname'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a(rows[<span class="number">1</span>])</span><br><span class="line">(<span class="string">'Beazley'</span>, <span class="string">'David'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rows_by_lfname = sorted(rows, key=itemgetter(<span class="string">'lname'</span>,<span class="string">'fname'</span>))</span><br></pre></td></tr></table></figure><p>The <strong>operator.itemgetter()</strong> function takes as arguments the lookup indices used to extract the desired values from the records in rows. It can be a dictionary key name, a numeric list element, or any value that can be fed to an object’s <strong>__getitem__()</strong> method. If you give multiple indices to <strong>itemgetter()</strong>, the callable it produces will return a tuple with all of the elements in it, and <strong>sorted()</strong> will order the output according to the sorted order of the tuples. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>min(rows, key=itemgetter(<span class="string">'uid'</span>))</span><br><span class="line">&#123;<span class="string">'fname'</span>: <span class="string">'John'</span>, <span class="string">'lname'</span>: <span class="string">'Cleese'</span>, <span class="string">'uid'</span>: <span class="number">1001</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>max(rows, key=itemgetter(<span class="string">'uid'</span>))</span><br><span class="line">&#123;<span class="string">'fname'</span>: <span class="string">'Big'</span>, <span class="string">'lname'</span>: <span class="string">'Jones'</span>, <span class="string">'uid'</span>: <span class="number">1004</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="Sorting-Objects-Without-Native-Comparison-Support"><a href="#Sorting-Objects-Without-Native-Comparison-Support" class="headerlink" title="Sorting Objects Without Native Comparison Support"></a>Sorting Objects Without Native Comparison Support</h2><p>You want to sort objects of the same class, but they don’t natively support comparison operations.The built-in <strong>sorted()</strong> function takes a <strong>key</strong> argument that can be passed a <strong>callable</strong> that will return some value in the object that sorted will use to compare the objects. For example, if you have a sequence of <strong>User</strong> instances in your application, and you want to sort them by their <strong>user_id</strong> attribute, you would supply a <strong>callable</strong> that takes a <strong>User</strong> instance as input and returns the <strong>user_id</strong>. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; <span class="class"><span class="keyword">class</span> <span class="title">User</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, user_id)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self.user_id= user_id</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">'User (&#123;&#125;)'</span>.format(self.user_id)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>users=[User(<span class="number">1</span>), User(<span class="number">3</span>), User(<span class="number">99</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(users, key= <span class="keyword">lambda</span> u:u.user_id)</span><br><span class="line">[User (<span class="number">1</span>), User (<span class="number">3</span>), User (<span class="number">99</span>)]</span><br></pre></td></tr></table></figure><p>Instead of using lambda, an alternative approach is to use <strong>operator.attrgetter()</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span>  operator <span class="keyword">import</span> attrgetter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(users, key= attrgetter(<span class="string">'user_id'</span>))</span><br><span class="line">[User (<span class="number">1</span>), User (<span class="number">3</span>), User (<span class="number">99</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>min(users, key= attrgetter(<span class="string">'user_id'</span>))</span><br><span class="line">User (<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>The choice of whether or not to use <strong>lambda</strong> or <strong>attrgetter()</strong> may be one of personal preference. However, <strong>attrgetter()</strong> is often a tad bit faster and also has the added feature of allowing multiple fields to be extracted simultaneously. This is analogous to the use of <strong>operator.itemgetter()</strong> for dictionaries. </p><h2 id="Grouping-Records-Together-Based-on-a-Field"><a href="#Grouping-Records-Together-Based-on-a-Field" class="headerlink" title="Grouping Records Together Based on a Field"></a>Grouping Records Together Based on a Field</h2><p>You have a sequence of dictionaries or instances and you want to iterate over the data in groups based on the value of a particular field, such as date.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>rows = [</span><br><span class="line"><span class="meta">... </span> &#123;<span class="string">'address'</span>: <span class="string">'5412 N CLARK'</span>, <span class="string">'date'</span>: <span class="string">'07/01/2012'</span>&#125;,</span><br><span class="line"><span class="meta">... </span> &#123;<span class="string">'address'</span>: <span class="string">'5148 N CLARK'</span>, <span class="string">'date'</span>: <span class="string">'07/04/2012'</span>&#125;,</span><br><span class="line"><span class="meta">... </span> &#123;<span class="string">'address'</span>: <span class="string">'5800 E 58TH'</span>, <span class="string">'date'</span>: <span class="string">'07/02/2012'</span>&#125;,</span><br><span class="line"><span class="meta">... </span> &#123;<span class="string">'address'</span>: <span class="string">'2122 N CLARK'</span>, <span class="string">'date'</span>: <span class="string">'07/03/2012'</span>&#125;,</span><br><span class="line"><span class="meta">... </span> &#123;<span class="string">'address'</span>: <span class="string">'5645 N RAVENSWOOD'</span>, <span class="string">'date'</span>: <span class="string">'07/02/2012'</span>&#125;,</span><br><span class="line"><span class="meta">... </span> &#123;<span class="string">'address'</span>: <span class="string">'1060 W ADDISON'</span>, <span class="string">'date'</span>: <span class="string">'07/02/2012'</span>&#125;,</span><br><span class="line"><span class="meta">... </span> &#123;<span class="string">'address'</span>: <span class="string">'4801 N BROADWAY'</span>, <span class="string">'date'</span>: <span class="string">'07/01/2012'</span>&#125;,</span><br><span class="line"><span class="meta">... </span> &#123;<span class="string">'address'</span>: <span class="string">'1039 W GRANVILLE'</span>, <span class="string">'date'</span>: <span class="string">'07/04/2012'</span>&#125;,</span><br><span class="line"><span class="meta">... </span>]</span><br></pre></td></tr></table></figure><p>To do it, first sort by the desired field (in this case, date) and then use <strong>itertools.groupby()</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> groupby</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rows.sort(key=itemgetter(<span class="string">'date'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> date, items <span class="keyword">in</span> groupby(rows,key= itemgetter(<span class="string">'date'</span>)):</span><br><span class="line"><span class="meta">... </span>    print(date)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> i <span class="keyword">in</span> items:</span><br><span class="line"><span class="meta">... </span>        print(<span class="string">' '</span>, i)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">07</span>/<span class="number">01</span>/<span class="number">2012</span></span><br><span class="line">  &#123;<span class="string">'address'</span>: <span class="string">'5412 N CLARK'</span>, <span class="string">'date'</span>: <span class="string">'07/01/2012'</span>&#125;</span><br><span class="line">  &#123;<span class="string">'address'</span>: <span class="string">'4801 N BROADWAY'</span>, <span class="string">'date'</span>: <span class="string">'07/01/2012'</span>&#125;</span><br><span class="line"><span class="number">07</span>/<span class="number">02</span>/<span class="number">2012</span></span><br><span class="line">  &#123;<span class="string">'address'</span>: <span class="string">'5800 E 58TH'</span>, <span class="string">'date'</span>: <span class="string">'07/02/2012'</span>&#125;</span><br><span class="line">  &#123;<span class="string">'address'</span>: <span class="string">'5645 N RAVENSWOOD'</span>, <span class="string">'date'</span>: <span class="string">'07/02/2012'</span>&#125;</span><br><span class="line">  &#123;<span class="string">'address'</span>: <span class="string">'1060 W ADDISON'</span>, <span class="string">'date'</span>: <span class="string">'07/02/2012'</span>&#125;</span><br><span class="line"><span class="number">07</span>/<span class="number">03</span>/<span class="number">2012</span></span><br><span class="line">  &#123;<span class="string">'address'</span>: <span class="string">'2122 N CLARK'</span>, <span class="string">'date'</span>: <span class="string">'07/03/2012'</span>&#125;</span><br><span class="line"><span class="number">07</span>/<span class="number">04</span>/<span class="number">2012</span></span><br><span class="line">  &#123;<span class="string">'address'</span>: <span class="string">'5148 N CLARK'</span>, <span class="string">'date'</span>: <span class="string">'07/04/2012'</span>&#125;</span><br><span class="line">  &#123;<span class="string">'address'</span>: <span class="string">'1039 W GRANVILLE'</span>, <span class="string">'date'</span>: <span class="string">'07/04/2012'</span>&#125;</span><br></pre></td></tr></table></figure><p>The <strong>groupby()</strong> function works by scanning a sequence and finding sequential “runs” of identical values (or values returned by the given <strong>key</strong> function). On each iteration, it returns the value along with an iterator that produces all of the items in a group with the same value.</p><p>An important preliminary step is sorting the data according to the field of interest. Since <strong>groupby()</strong> only examines consecutive items, failing to sort first won’t group the records as you want.</p><p>If your goal is to simply group the data together by dates into a large data structure that allows random access, you may have better luck using <strong>defaultdict()</strong> to build a multidict.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;&gt;&gt; from collections import defaultdict</span><br><span class="line">&gt;&gt;&gt; rows_by_date= defaultdict(list)</span><br><span class="line">&gt;&gt;&gt; for row in rows:</span><br><span class="line">...     rows_by_date[row[&apos;date&apos;]].append(row)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h2 id="Filtering-Sequence-Elements"><a href="#Filtering-Sequence-Elements" class="headerlink" title="Filtering Sequence Elements"></a>Filtering Sequence Elements</h2><p>The easiest way to filter sequence data is often to use a <strong>list</strong> comprehension. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>, <span class="number">-7</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">-1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[n <span class="keyword">for</span> n <span class="keyword">in</span> mylist <span class="keyword">if</span> n &gt; <span class="number">0</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[n <span class="keyword">for</span> n <span class="keyword">in</span> mylist <span class="keyword">if</span> n &lt; <span class="number">0</span>]</span><br><span class="line">[<span class="number">-5</span>, <span class="number">-7</span>, <span class="number">-1</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>Sometimes, the filtering criteria cannot be easily expressed in a list comprehension or generator expression. For example, suppose that the filtering process involves exception handling or some other complicated detail. For this, put the filtering code into its own function and use the built-in <strong>filter()</strong> function. <strong>filter()</strong> creates an iterator. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">is_int</span><span class="params">(val)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>        x=int(val)</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">except</span> ValueError:</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ivals= list(filter(is_int, values))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ivals</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'-3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>]</span><br></pre></td></tr></table></figure><p>Another notable filtering tool is <strong>itertools.compress()</strong>, which takes an iterable and an accompanying <strong>Boolean</strong> selector sequence as input. As output, it gives you all of the items in the iterable where the corresponding element in the selector is <strong>True</strong>. This can be useful if you’re trying to apply the results of filtering one sequence to another related sequence. For example, suppose you have the following two columns of data:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>addresses = [</span><br><span class="line"><span class="meta">... </span> <span class="string">'5412 N CLARK'</span>,</span><br><span class="line"><span class="meta">... </span> <span class="string">'5148 N CLARK'</span>,</span><br><span class="line"><span class="meta">... </span> <span class="string">'5800 E 58TH'</span>,</span><br><span class="line"><span class="meta">... </span> <span class="string">'2122 N CLARK'</span></span><br><span class="line"><span class="meta">... </span> <span class="string">'5645 N RAVENSWOOD'</span>,</span><br><span class="line"><span class="meta">... </span> <span class="string">'1060 W ADDISON'</span>,</span><br><span class="line"><span class="meta">... </span> <span class="string">'4801 N BROADWAY'</span>,</span><br><span class="line"><span class="meta">... </span> <span class="string">'1039 W GRANVILLE'</span>,</span><br><span class="line"><span class="meta">... </span>]</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>counts = [ <span class="number">0</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> itertools <span class="keyword">import</span> compress</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>more5=[n &gt; <span class="number">5</span> <span class="keyword">for</span> n <span class="keyword">in</span> counts]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(compress(addresses, more5))</span><br><span class="line">[<span class="string">'5800 E 58TH'</span>, <span class="string">'4801 N BROADWAY'</span>, <span class="string">'1039 W GRANVILLE'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>more5</span><br><span class="line">[<span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">True</span>, <span class="keyword">True</span>, <span class="keyword">False</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Mapping-Names-to-Sequence-Elements"><a href="#Mapping-Names-to-Sequence-Elements" class="headerlink" title="Mapping Names to Sequence Elements"></a>Mapping Names to Sequence Elements</h2><p>You have code that accesses list or tuple elements by position, but this makes the code somewhat difficult to read at times. You’d also like to be less dependent on position in the structure, by accessing the elements by name. <strong>collections.namedtuple()</strong> provides these benefits.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Subcriber= namedtuple(<span class="string">'Subcriber'</span>, [<span class="string">'addr'</span>,<span class="string">'joined'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sub= Subcriber(<span class="string">'a@b.com'</span>, <span class="string">'2012-09-23'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sub</span><br><span class="line">Subcriber(addr=<span class="string">'a@b.com'</span>, joined=<span class="string">'2012-09-23'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sub.addr</span><br><span class="line"><span class="string">'a@b.com'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(sub)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>addr, joined= sub</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>addr, joined</span><br><span class="line">(<span class="string">'a@b.com'</span>, <span class="string">'2012-09-23'</span>)</span><br></pre></td></tr></table></figure></p><p>A major use case for named tuples is decoupling your code from the position of the elements it manipulates.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Stock = namedtuple(<span class="string">'Stock'</span>, [<span class="string">'name'</span>, <span class="string">'shares'</span>, <span class="string">'price'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">compute_cost</span><span class="params">(records)</span>:</span></span><br><span class="line"><span class="meta">... </span>    total=<span class="number">0.0</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> rec <span class="keyword">in</span> records:</span><br><span class="line"><span class="meta">... </span>       s=Stock(*rec)</span><br><span class="line"><span class="meta">... </span>       total+= s.shares * s.price</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><p>One possible use of a <strong>namedtuple</strong> is as a replacement for a dictionary, which requires more space to store. Thus, if you are building large data structures involving dictionaries, use of a <strong>namedtuple</strong> will be more efficient. However, be aware that unlike a dictionary, a <strong>namedtuple</strong> is immutable.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = Stock(<span class="string">'ACME'</span>, <span class="number">100</span>, <span class="number">123.45</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">Stock(name=<span class="string">'ACME'</span>, shares=<span class="number">100</span>, price=<span class="number">123.45</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.shares = <span class="number">75</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: can<span class="string">'t set attribute</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure></p><p>If you need to change any of the attributes, it can be done using the <strong>_replace()</strong> method of a <strong>namedtuple</strong> instance.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s=s._replace(shares= <span class="number">75</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line">Stock(name=<span class="string">'ACME'</span>, shares=<span class="number">75</span>, price=<span class="number">123.45</span>)</span><br></pre></td></tr></table></figure><p>A subtle use of the <strong>_replace()</strong> method is that it can be a convenient way to populate named tuples that have optional or missing fields. To do this, you make a prototype tuple containing the default values and then use <strong>_replace()</strong> to create new instances with values replaced. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stock= namedtuple(<span class="string">'Stock'</span>, [<span class="string">'name'</span>, <span class="string">'shares'</span>,<span class="string">'price'</span>,<span class="string">'date'</span>,<span class="string">'time'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stock_prototype= stock(<span class="string">''</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">None</span>, <span class="keyword">None</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">dict_to_stock</span><span class="params">(s)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> stock_prototype._replace(**s)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">'name'</span>: <span class="string">'ACME'</span>, <span class="string">'shares'</span>: <span class="number">100</span>, <span class="string">'price'</span>: <span class="number">123.45</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict_to_stock(a)</span><br><span class="line">Stock(name=<span class="string">'ACME'</span>, shares=<span class="number">100</span>, price=<span class="number">123.45</span>, date=<span class="keyword">None</span>, time=<span class="keyword">None</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = &#123;<span class="string">'name'</span>: <span class="string">'ACME'</span>, <span class="string">'shares'</span>: <span class="number">100</span>, <span class="string">'price'</span>: <span class="number">123.45</span>, <span class="string">'date'</span>: <span class="string">'12/17/2012'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict_to_stock(b)</span><br><span class="line">Stock(name=<span class="string">'ACME'</span>, shares=<span class="number">100</span>, price=<span class="number">123.45</span>, date=<span class="string">'12/17/2012'</span>, time=<span class="keyword">None</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h2 id="Combining-Multiple-Mappings-into-a-Single-Mapping"><a href="#Combining-Multiple-Mappings-into-a-Single-Mapping" class="headerlink" title="Combining Multiple Mappings into a Single Mapping"></a>Combining Multiple Mappings into a Single Mapping</h2><p>Suppose you have two dictionaries:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'z'</span>: <span class="number">3</span> &#125;</span><br><span class="line">b = &#123;<span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">4</span> &#125;</span><br></pre></td></tr></table></figure><p>Now suppose you want to perform lookups where you have to check both dictionaries (e.g., first checking in <strong>a</strong> and then in <strong>b</strong> if not found). An easy way to do this is to use the <strong>ChainMap</strong> class from the <strong>collections</strong> module. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> ChainMap</span><br><span class="line">c = ChainMap(a,b)</span><br><span class="line">print(c[<span class="string">'x'</span>]) <span class="comment"># Outputs 1 (from a)</span></span><br><span class="line">print(c[<span class="string">'y'</span>]) <span class="comment"># Outputs 2 (from b)</span></span><br><span class="line">print(c[<span class="string">'z'</span>]) <span class="comment"># Outputs 3 (from a)</span></span><br></pre></td></tr></table></figure><p>If there are duplicate keys, the values from the first mapping get used. Thus, the entry <strong>c[‘z’]</strong> in the example would always refer to the value in dictionary <strong>a</strong>, not the value in dictionary <strong>b</strong>.</p><p>Operations that mutate the mapping always affect the first mapping listed. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(c)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(c.keys())</span><br><span class="line">[<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(c.values())</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="string">'z'</span>] = <span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="string">'w'</span>] = <span class="number">40</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> c[<span class="string">'x'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">'w'</span>: <span class="number">40</span>, <span class="string">'z'</span>: <span class="number">10</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> c[<span class="string">'y'</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">KeyError: <span class="string">"Key not found in the first mapping: 'y'"</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'z'</span>: <span class="number">3</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = &#123;<span class="string">'y'</span>: <span class="number">2</span>, <span class="string">'z'</span>: <span class="number">4</span> &#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>merged = ChainMap(a, b)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>merged[<span class="string">'x'</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="string">'x'</span>] = <span class="number">42</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>merged[<span class="string">'x'</span>] <span class="comment"># Notice change to merged dicts</span></span><br><span class="line"><span class="number">42</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Unpacking-a-Sequence-into-Separate-Variables&quot;&gt;&lt;a href=&quot;#Unpacking-a-Sequence-into-Separate-Variables&quot; class=&quot;headerlink&quot; title=&quot;Unpacking a Sequence into Separate Variables&quot;&gt;&lt;/a&gt;Unpacking a Sequence into Separate Variables&lt;/h2&gt;&lt;p&gt;Unpacking actually works with any object that happens to be iterable, not just tuples or lists. This includes strings, files, iterators, and generators. For example:&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
  </entry>
  
  <entry>
    <title>python_time_datetime</title>
    <link href="blog.whistlestop.ml/2018/12/15/python-time-datetime/"/>
    <id>blog.whistlestop.ml/2018/12/15/python-time-datetime/</id>
    <published>2018-12-15T10:34:45.000Z</published>
    <updated>2018-12-15T11:11:32.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><p><strong>time</strong>模块中时间表现的格式主要有三种：<br><strong>timestamp</strong>时间戳，时间戳表示的是从1970年1月1日00:00:00开始按秒计算的偏移量<br><strong>struct_time</strong>时间元组，共有九个元素组。<br><strong>format time</strong> 格式化时间，已格式化的结构使时间更具可读性。包括自定义格式和固定格式。<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 生成timestamp</span></span><br><span class="line">time.time()</span><br><span class="line"><span class="number">1477471508.05</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">time.localtime() <span class="comment">#生成struct_time</span></span><br><span class="line">time.localtime(time.time()) <span class="comment"># timestamp to struct_time 本地时间</span></span><br><span class="line">time.struct_time(tm_year=<span class="number">2016</span>, tm_mon=<span class="number">10</span>, tm_mday=<span class="number">26</span>, tm_hour=<span class="number">16</span>, tm_min=<span class="number">45</span>, tm_sec=<span class="number">8</span>, tm_wday=<span class="number">2</span>, tm_yday=<span class="number">300</span>, tm_isdst=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">time.gmtime()</span><br><span class="line">time.gmtime(time.time())  <span class="comment"># timestamp to struct_time 格林威治时间</span></span><br><span class="line">time.struct_time(tm_year=<span class="number">2016</span>, tm_mon=<span class="number">10</span>, tm_mday=<span class="number">26</span>, tm_hour=<span class="number">8</span>, tm_min=<span class="number">45</span>, tm_sec=<span class="number">8</span>, tm_wday=<span class="number">2</span>, tm_yday=<span class="number">300</span>, tm_isdst=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#format_time to struct_time</span></span><br><span class="line">time.strptime(<span class="string">'2011-05-05 16:37:06'</span>, <span class="string">'%Y-%m-%d %X'</span>)</span><br><span class="line">time.struct_time(tm_year=<span class="number">2011</span>, tm_mon=<span class="number">5</span>, tm_mday=<span class="number">5</span>, tm_hour=<span class="number">16</span>, tm_min=<span class="number">37</span>, tm_sec=<span class="number">6</span>, tm_wday=<span class="number">3</span>, tm_yday=<span class="number">125</span>, tm_isdst=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">time.strftime(<span class="string">"%Y-%m-%d %X"</span>)</span><br><span class="line">time.strftime(<span class="string">"%Y-%m-%d %X"</span>,time.localtime()) <span class="comment"># struct_time to format_time</span></span><br><span class="line"><span class="number">2016</span><span class="number">-10</span><span class="number">-26</span> <span class="number">16</span>:<span class="number">48</span>:<span class="number">41</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成固定格式的时间表示格式</span></span><br><span class="line">time.asctime(time.localtime())</span><br><span class="line">time.ctime(time.time())</span><br><span class="line"><span class="comment"># Wed Oct 26 16:45:08 2016</span></span><br></pre></td></tr></table></figure></p><p><strong>struct_time</strong>元组元素结构</p><ul><li>属性                                值</li><li><strong>tm_year</strong>（年）                  比如2011 </li><li><strong>tm_mon</strong>（月）                   1 - 12</li><li><strong>tm_mday</strong>（日）                  1 - 31</li><li><strong>tm_hour</strong>（时）                  0 - 23</li><li><strong>tm_min</strong>（分）                   0 - 59</li><li><strong>tm_sec</strong>（秒）                   0 - 61</li><li><strong>tm_wday</strong>（weekday）             0 - 6（0表示周日）</li><li><strong>tm_yday</strong>（一年中的第几天）        1 - 366</li><li><strong>tm_isdst</strong>（是否是夏令时）        默认为-1</li></ul><p><strong>format time</strong>结构化表示</p><table><thead><tr><th>格式</th><th>含义</th></tr></thead><tbody><tr><td>%a</td><td>本地（locale）简化星期名称</td></tr><tr><td>%A</td><td>本地完整星期名称</td></tr><tr><td>%b</td><td>本地简化月份名称</td></tr><tr><td>%B</td><td>本地完整月份名称</td></tr><tr><td>%c</td><td>本地相应的日期和时间表示</td></tr><tr><td>%d</td><td>一个月中的第几天（01 - 31）</td></tr><tr><td>%H</td><td>一天中的第几个小时（24小时制，00 - 23）</td></tr><tr><td>%I</td><td>第几个小时（12小时制，01 - 12）</td></tr><tr><td>%j</td><td>一年中的第几天（001 - 366）</td></tr><tr><td>%m</td><td>月份（01 - 12）</td></tr><tr><td>%M</td><td>分钟数（00 - 59）</td></tr><tr><td>%p</td><td>本地am或者pm的相应符</td></tr><tr><td>%S</td><td>秒（01 - 61）</td></tr><tr><td>%U</td><td>一年中的星期数。（00 - 53星期天是一个星期的开始。）第一个星期天之前的所有天数都放在第0周。</td></tr><tr><td>%w</td><td>一个星期中的第几天（0 - 6，0是星期天）</td></tr><tr><td>%W</td><td>和%U基本相同，不同的是%W以星期一为一个星期的开始。</td></tr><tr><td>%x</td><td>本地相应日期</td></tr><tr><td>%X</td><td>本地相应时间</td></tr><tr><td>%y</td><td>去掉世纪的年份（00 - 99）</td></tr><tr><td>%Y</td><td>完整的年份</td></tr><tr><td>%Z</td><td>时区的名字（如果不存在为空字符）</td></tr><tr><td>%%</td><td>‘%’字符</td></tr></tbody></table><h2 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h2><p><strong>datatime</strong>模块重新封装了<strong>time</strong>模块，提供更多接口，提供的类有：<strong>date</strong>,<strong>time</strong>,<strong>datetime</strong>,<strong>timedelta</strong>,<strong>tzinfo</strong>。</p><h3 id="date类"><a href="#date类" class="headerlink" title="date类"></a>date类</h3><p>datetime.date(year, month, day)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>date.max <span class="comment">#所能表示的最大、最小日期</span></span><br><span class="line">datetime.date(<span class="number">9999</span>, <span class="number">12</span>, <span class="number">31</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>date.today() <span class="comment">#返回一个表示当前本地日期的date对象</span></span><br><span class="line">datetime.date(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1=date(<span class="number">2012</span>,<span class="number">3</span>,<span class="number">24</span>) <span class="comment">#date对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.year, d1.month, d1.day</span><br><span class="line">(<span class="number">2012</span>, <span class="number">3</span>, <span class="number">24</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.replace(year=<span class="number">2011</span>, month=<span class="number">2</span>,day=<span class="number">4</span>) <span class="comment">#生成一个新的日期对象，用参数指定的年，月，日代替原有对象中的属性。</span></span><br><span class="line">datetime.date(<span class="number">2011</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.timetuple() <span class="comment">#返回日期对应的time.struct_time对象</span></span><br><span class="line">time.struct_time(tm_year=<span class="number">2012</span>, tm_mon=<span class="number">3</span>, tm_mday=<span class="number">24</span>, tm_hour=<span class="number">0</span>, tm_min=<span class="number">0</span>, tm_sec=<span class="number">0</span>, tm_wday=<span class="number">5</span>, tm_yday=<span class="number">84</span>, tm_isdst=<span class="number">-1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.weekday() <span class="comment">#返回weekday，如果是星期一，返回0；以此类推</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.isoweekday() <span class="comment">#：返回weekday，如果是星期一，返回1；以此类推</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.isocalendar() <span class="comment"># 返回格式如(year，month，day)的元组；</span></span><br><span class="line">(<span class="number">2012</span>, <span class="number">12</span>, <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.isoformat() <span class="comment">#返回格式如'YYYY-MM-DD’的字符串；</span></span><br><span class="line"><span class="string">'2012-03-24'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1.strftime(<span class="string">'%Y/%m/%d'</span>) <span class="comment"># 和time模块format相同。</span></span><br><span class="line"><span class="string">'2012/03/24'</span></span><br></pre></td></tr></table></figure><h3 id="time-类"><a href="#time-类" class="headerlink" title="time 类"></a>time 类</h3><p>datetime.time(hour[ , minute[ , second[ , microsecond[ , tzinfo] ] ] ] )</p><h3 id="datetime类"><a href="#datetime类" class="headerlink" title="datetime类"></a>datetime类</h3><p><strong>datetime</strong>相当于<strong>date</strong>和<strong>time</strong>结合起来。<br>datetime.datetime (year, month, day[ , hour[ , minute[ , second[ , microsecond[ , tzinfo] ] ] ] ] )</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.today()</span><br><span class="line">datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">23</span>, <span class="number">54</span>, <span class="number">38</span>, <span class="number">345372</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.now()</span><br><span class="line">datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">23</span>, <span class="number">55</span>, <span class="number">26</span>, <span class="number">225742</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> time</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>datetime.fromtimestamp(time.time())</span><br><span class="line">datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">23</span>, <span class="number">56</span>, <span class="number">8</span>, <span class="number">748363</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt= datetime.now()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt.year,dt.month,dt.day,dt.hour,dt.second,dt.microsecond,dt.tzinfo</span><br><span class="line">(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">199639</span>, <span class="keyword">None</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt.time() <span class="comment">#获取time对象；</span></span><br><span class="line">datetime.time(<span class="number">23</span>, <span class="number">57</span>, <span class="number">29</span>, <span class="number">199639</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt.date() <span class="comment"># 获取date对象；</span></span><br><span class="line">datetime.date(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt.timetuple()</span><br><span class="line">time.struct_time(tm_year=<span class="number">2018</span>, tm_mon=<span class="number">7</span>, tm_mday=<span class="number">1</span>, tm_hour=<span class="number">23</span>, tm_min=<span class="number">57</span>, tm_sec=<span class="number">29</span>, tm_wday=<span class="number">6</span>, tm_yday=<span class="number">182</span>, tm_isdst=<span class="number">-1</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="timedelta类，时间加减"><a href="#timedelta类，时间加减" class="headerlink" title="timedelta类，时间加减"></a>timedelta类，时间加减</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt= datetime.now()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt1= dt+timedelta(days=<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt,dt1</span><br><span class="line">(datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">878766</span>), datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">878766</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt2=dt+timedelta(hours=<span class="number">-1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dt2</span><br><span class="line">datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">23</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">878766</span>)</span><br></pre></td></tr></table></figure><h3 id="tzinfo时区类"><a href="#tzinfo时区类" class="headerlink" title="tzinfo时区类"></a>tzinfo时区类</h3><p><strong>tzinfo</strong>是关于时区信息的类<br><strong>tzinfo</strong>是一个抽象类，所以不能直接被实例化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">UTC</span><span class="params">(tzinfo)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="string">"""UTC"""</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,offset = <span class="number">0</span>)</span>:</span></span><br><span class="line"><span class="meta">... </span>        self._offset = offset</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">utcoffset</span><span class="params">(self, dt)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> timedelta(hours=self._offset)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">tzname</span><span class="params">(self, dt)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">"UTC +%s"</span> % self._offset</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">dst</span><span class="params">(self, dt)</span>:</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> timedelta(hours=self._offset)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bangkok=datetime(<span class="number">2011</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,tzinfo=UTC(<span class="number">7</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bangkok</span><br><span class="line">datetime.datetime(<span class="number">2011</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">0</span>, tzinfo=&lt;__main__.UTC object at <span class="number">0x03254AB0</span>&gt;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;time&quot;&gt;&lt;a href=&quot;#time&quot; class=&quot;headerlink&quot; title=&quot;time&quot;&gt;&lt;/a&gt;time&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;time&lt;/strong&gt;模块中时间表现的格式主要有三种：&lt;br&gt;&lt;strong&gt;timestamp&lt;/strong&gt;时间戳，时间戳表示的是从1970年1月1日00:00:00开始按秒计算的偏移量&lt;br&gt;&lt;strong&gt;struct_time&lt;/strong&gt;时间元组，共有九个元素组。&lt;br&gt;&lt;strong&gt;format time&lt;/strong&gt; 格式化时间，已格式化的结构使时间更具可读性。包括自定义格式和固定格式。&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="blog.whistlestop.ml/categories/python/"/>
    
    
      <category term="time" scheme="blog.whistlestop.ml/tags/time/"/>
    
      <category term="datetime" scheme="blog.whistlestop.ml/tags/datetime/"/>
    
  </entry>
  
  <entry>
    <title>python_shlex_subprocess.Popen</title>
    <link href="blog.whistlestop.ml/2018/12/15/python-shlex-subprocess-Popen/"/>
    <id>blog.whistlestop.ml/2018/12/15/python-shlex-subprocess-Popen/</id>
    <published>2018-12-15T10:33:17.000Z</published>
    <updated>2018-12-15T11:11:23.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="shlex"><a href="#shlex" class="headerlink" title="shlex"></a>shlex</h2><p>词法分析是编译中的一个很重要的步骤,Python中提供了shlex模块用来做词法分析,用于分析shell中的输入语法, shlex基本只提供一个分词的功能和识别引号的功能</p><a id="more"></a> <p><em><strong>解析一串字符串,以,分割,但引号内的,不用于分割</strong></em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shlex</span><br><span class="line">strin=shlex.shlex(<span class="string">"ab,'cdsfd,sfsd',ewewq,5654"</span>,posix=<span class="keyword">True</span>)</span><br><span class="line">strin.whitespace=<span class="string">','</span></span><br><span class="line">strin.whitesapce_split=<span class="keyword">True</span></span><br><span class="line">b=list(strin)</span><br><span class="line">print(b)</span><br><span class="line">[<span class="string">'ab'</span>, <span class="string">'cdsfd,sfsd'</span>, <span class="string">'ewewq'</span>, <span class="string">'5654'</span>]</span><br></pre></td></tr></table></figure><p><strong><em>split方法可以在用多种空白的时候解析</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shlex</span><br><span class="line">strin2=shlex.split(<span class="string">"ab 'cdsfd  sfsd'   ewewq 5654"</span>,posix=<span class="keyword">True</span>)</span><br><span class="line">b=list(strin)</span><br><span class="line">print(b)</span><br><span class="line">[<span class="string">'ab'</span>, <span class="string">'cdsfd  sfsd'</span>, <span class="string">'ewewq'</span>, <span class="string">'5654'</span>]</span><br></pre></td></tr></table></figure><p> <strong><em>shlex.quote(s)</em></strong></p><p>Return a shell-escaped version of the string <strong>s</strong>. The returned value is a <strong>string</strong> that can safely be used as one token in a shell command line, for cases where you cannot use a <strong>list</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>filename = <span class="string">'somefile; rm -rf ~'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>command = <span class="string">'ls -l &#123;&#125;'</span>.format(filename)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(command)  <span class="comment"># executed by a shell: boom!</span></span><br><span class="line">ls -l somefile; rm -rf ~</span><br></pre></td></tr></table></figure><p> <strong><em>quote() lets you plug the security hole:</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> shlex <span class="keyword">import</span> quote</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>command = <span class="string">'ls -l &#123;&#125;'</span>.format(quote(filename))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(command)</span><br><span class="line">ls -l <span class="string">'somefile; rm -rf ~'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>remote_command = <span class="string">'ssh home &#123;&#125;'</span>.format(quote(command))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(remote_command)</span><br><span class="line">ssh home <span class="string">'ls -l '</span><span class="string">"'"</span><span class="string">'somefile; rm -rf ~'</span><span class="string">"'"</span><span class="string">''</span></span><br></pre></td></tr></table></figure><p><strong><em>The quoting is compatible with UNIX shells and with split():</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> shlex <span class="keyword">import</span> split</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>remote_command = split(remote_command)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>remote_command</span><br><span class="line">[<span class="string">'ssh'</span>, <span class="string">'home'</span>, <span class="string">"ls -l 'somefile; rm -rf ~'"</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>command = split(remote_command[<span class="number">-1</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>command</span><br><span class="line">[<span class="string">'ls'</span>, <span class="string">'-l'</span>, <span class="string">'somefile; rm -rf ~'</span>]</span><br></pre></td></tr></table></figure></p><h2 id="subprocess-Popen"><a href="#subprocess-Popen" class="headerlink" title="subprocess.Popen"></a>subprocess.Popen</h2><p>创建并返回一个子进程，并在这个进程中执行指定的程序。实例化 <strong>Popen</strong> 可以通过许多参数详细定制子进程的环境，但是只有一个参数是必须的，即位置参数 <strong>args</strong> </p><p>subprocess.Popen(args, bufsize=0, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=False, shell=False, cwd=None, env=None, universal_newlines=False, startupinfo=None, creationflags=0)</p><p><strong><em>参数介绍</em></strong></p><ul><li><strong>args</strong>：要执行的命令或可执行文件的路径。一个由字符串组成的序列（通常是列表），列表的第一个元素是可执行程序的路径，剩下的是传给这个程序的参数，如果没有要传给这个程序的参数，<strong>args</strong> 参数可以仅仅是一个字符串。</li><li><strong>bufsize</strong>：控制 <strong>stdin</strong>, <strong>stdout</strong>, <strong>stderr</strong> 等参数指定的文件的缓冲，和打开文件的 <strong>open()</strong>函数中的参数 <strong>bufsize</strong> 含义相同。</li><li><strong>executable</strong>：如果这个参数不是 <strong>None</strong>，将替代参数 <strong>args</strong> 作为可执行程序；</li><li><strong>stdin</strong>：指定子进程的标准输入；</li><li><strong>stdout</strong>：指定子进程的标准输出；</li><li><strong>stderr</strong>：指定子进程的标准错误输出；</li></ul><p>对于 <strong>stdin</strong>, <strong>stdout</strong> 和 <strong>stderr</strong> 而言，如果他们是 <strong>None</strong>（默认情况），那么子进程使用和父进程相同的标准流文件。<br>父进程如果想要和子进程通过 <strong>communicate()</strong> 方法通信，对应的参数必须是 <strong>subprocess.PIPE</strong><br>当然 <strong>stdin</strong>, <strong>stdout</strong> 和 <strong>stderr</strong> 也可以是已经打开的 file 对象，前提是以合理的方式打开，比如 <strong>stdin</strong> 对应的文件必须要可读等。</p><ul><li><strong>preexec_fn</strong>：默认是<strong>None</strong>，否则必须是一个函数或者可调用对象，在子进程中首先执行这个函数，然后再去执行为子进程指定的程序或Shell。</li><li><strong>close_fds</strong>：布尔型变量，为 <strong>True</strong> 时，在子进程执行前强制关闭所有除 <strong>stdin</strong>，<strong>stdout</strong>和<strong>stderr</strong>外的文件；</li><li><strong>shell</strong>：布尔型变量，明确要求使用<strong>shell</strong>运行程序，与参数 <strong>executable</strong> 一同指定子进程运行在什么 <strong>Shell</strong> 中——如果<strong>executable=None</strong> 而 <strong>shell=True</strong>，则使用 <strong>/bin/sh</strong> 来执行 <strong>args</strong> 指定的程序；也就是说，Python首先起一个shell，再用这个shell来解释指定运行的命令。</li><li><strong>cwd</strong>：代表路径的字符串，指定子进程运行的工作目录，要求这个目录必须存在；</li><li><strong>env</strong>：字典，键和值都是为子进程定义环境变量的字符串；</li><li><strong>universal_newline</strong>：布尔型变量，为 <strong>True</strong> 时，<strong>stdout</strong> 和 <strong>stderr</strong> 以通用换行（universal newline）模式打开，</li><li><strong>startupinfo</strong>：见下一个参数；</li><li><strong>creationfalgs</strong>：最后这两个参数是Windows中才有的参数，传递给Win32的CreateProcess API调用。</li></ul><p>同 Linux 中创建子进程类似，父进程创建完子进程后，并不会自动等待子进程执行，父进程在子进程之前推出将导致子进程成为孤儿进程，孤儿进程统一由 <strong>init</strong> 进程接管，负责其终止后的回收工作。</p><p>如果父进程在子进程之后终止，但子进程终止时父进程没有进行最后的回收工作，子进程残留的数据结构称为僵尸进程。大量僵尸进程将耗费系统资源，因此父进程及时等待和回收子进程是必要的，除非能够确认自己比子进程先终止，从而将回收工作过渡给 <strong>init</strong> 进程。</p><p>这个等待和回收子进程的操作就是<strong>wait()</strong>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = subprocess.Popen(<span class="string">'ls -l'</span>, shell=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>total <span class="number">164</span></span><br><span class="line">-rw-r--r--  <span class="number">1</span> root root   <span class="number">133</span> Jul  <span class="number">4</span> <span class="number">16</span>:<span class="number">25</span> admin-openrc.sh</span><br><span class="line">-rw-r--r--  <span class="number">1</span> root root   <span class="number">268</span> Jul <span class="number">10</span> <span class="number">15</span>:<span class="number">55</span> admin-openrc-v3.sh</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.returncode</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.wait()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.returncode</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="Popen-对象的属性"><a href="#Popen-对象的属性" class="headerlink" title="Popen 对象的属性"></a>Popen 对象的属性</h3><p><strong><em>p.pid</em></strong> </p><p>子进程的PID。 </p><p><strong><em>p.returncode</em></strong></p><p>   该属性表示子进程的返回状态，<strong>returncode</strong>可能有多重情况：</p><pre><code>**None** —— 子进程尚未结束；**==0** —— 子进程正常退出；**&gt; 0**—— 子进程异常退出，**returncode**对应于出错码；**&lt; 0**—— 子进程被信号杀掉了。 </code></pre><p><strong><em>p.stdin, p.stdout, p.stderr</em></strong></p><p>子进程对应的一些初始文件，如果调用<strong>Popen()</strong>的时候对应的参数是s<strong>ubprocess.PIPE</strong>，则这里对应的属性是一个包裹了这个管道的 file 对象，</p><h3 id="Popen-对象的方法"><a href="#Popen-对象的方法" class="headerlink" title="Popen 对象的方法"></a>Popen 对象的方法</h3><p><strong><em>p.poll()</em></strong></p><p>　　检查子进程  <strong>p</strong> 是否已经终止，返回 <strong>p.returncode</strong> 属性;<br><strong><em>p.wait()</em></strong></p><p>　　等待子进程 <strong>p</strong> 终止，返回 <strong>p.returncode</strong> 属性；</p><p>　　注意：<br>　　　　<strong>wait()</strong> 立即阻塞父进程，直到子进程结束！</p><p><strong><em>p.communicate(input=None)</em></strong></p><p>　　和子进程 <strong>p</strong> 交流，将参数 <strong>input</strong> （字符串）中的数据发送到子进程的 <strong>stdin</strong>，同时从子进程的 <strong>stdout</strong> 和 <strong>stderr</strong> 读取数据，直到EOF。</p><p>　　返回值：<br>　　　　二元组 <strong>(stdoutdata, stderrdata)</strong> 分别表示从标准出和标准错误中读出的数据。</p><p>　　父进程调用 <strong>p.communicate()</strong> 和子进程通信有以下限制：<br>　　（1） 只能通过管道和子进程通信，也就是说，只有调用 <strong>Popen()</strong> 创建子进程的时候参数 <strong>stdin=subprocess.PIPE</strong>，才能通过 <strong>p.communicate(input)</strong> 向子进程的 stdin 发送数据；只有参数 <strong>stdout</strong> 和 <strong>stderr</strong> 也都为 <strong>subprocess.PIPE</strong> ，才能通过<strong>p.communicate()</strong> 从子进程接收数据，否则接收到的二元组中，对应的位置是<strong>None</strong>。<br>　　（2）父进程从子进程读到的数据缓存在内存中，因此<strong>commucate()</strong>不适合与子进程交换过大的数据。<br>　　注意：<br>　　　　<strong>communicate()</strong> 立即阻塞父进程，直到子进程结束！</p><p><strong>_p.send_signal(signal)_</strong></p><p>　　向子进程发送信号 <strong>signal</strong>；</p><p><strong><em>p.terminate()</em></strong></p><p>　　终止子进程 <strong>p</strong> ，等于向子进程发送 <strong>SIGTERM</strong> 信号；</p><p><strong><em>p.kill()</em></strong></p><pre><code>杀死子进程 **p** ，等于向子进程发送 **SIGKILL** 信号；</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;shlex&quot;&gt;&lt;a href=&quot;#shlex&quot; class=&quot;headerlink&quot; title=&quot;shlex&quot;&gt;&lt;/a&gt;shlex&lt;/h2&gt;&lt;p&gt;词法分析是编译中的一个很重要的步骤,Python中提供了shlex模块用来做词法分析,用于分析shell中的输入语法, shlex基本只提供一个分词的功能和识别引号的功能&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="blog.whistlestop.ml/categories/python/"/>
    
    
      <category term="shelx" scheme="blog.whistlestop.ml/tags/shelx/"/>
    
      <category term="subprocess" scheme="blog.whistlestop.ml/tags/subprocess/"/>
    
  </entry>
  
  <entry>
    <title>python_lxml_03</title>
    <link href="blog.whistlestop.ml/2018/12/15/python-lxml-03/"/>
    <id>blog.whistlestop.ml/2018/12/15/python-lxml-03/</id>
    <published>2018-12-15T10:31:27.000Z</published>
    <updated>2018-12-15T11:11:28.668Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Using-XPath-to-find-text"><a href="#Using-XPath-to-find-text" class="headerlink" title="Using XPath to find text"></a>Using XPath to find text</h3><p>Another way to extract the text content of a tree is XPath, which also allows you to extract the separate text chunks into a list:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(html.xpath(<span class="string">"string()"</span>)) <span class="comment"># lxml.etree only!</span></span><br><span class="line">TEXTTAIL</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(html.xpath(<span class="string">"//text()"</span>)) <span class="comment"># lxml.etree only!</span></span><br><span class="line">[<span class="string">'TEXT'</span>, <span class="string">'TAIL'</span>]</span><br><span class="line"><span class="comment"># If you want to use this more often, you can wrap it in a function:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>build_text_list = etree.XPath(<span class="string">"//text()"</span>) <span class="comment"># lxml.etree only!</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(build_text_list(html))</span><br><span class="line">[<span class="string">'TEXT'</span>, <span class="string">'TAIL'</span>]</span><br></pre></td></tr></table></figure><a id="more"></a> <p>Note that a string result returned by XPath is a special ‘smart’ object that knows about its origins. You can ask it where it came from through its <strong>getparent()</strong> method, just as you would with <strong>Elements</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>texts = build_text_list(html)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(texts[<span class="number">0</span>])</span><br><span class="line">TEXT</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parent = texts[<span class="number">0</span>].getparent()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(parent.tag)</span><br><span class="line">body</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(texts[<span class="number">1</span>])</span><br><span class="line">TAIL</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(texts[<span class="number">1</span>].getparent().tag)</span><br><span class="line">br</span><br><span class="line">You can also find out <span class="keyword">if</span> it<span class="string">'s normal text content or tail text:</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(texts[0].is_text)</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(texts[1].is_text)</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; print(texts[1].is_tail)</span></span><br><span class="line"><span class="string">True</span></span><br></pre></td></tr></table></figure><p>While this works for the results of the <strong>text()</strong> function, <strong>lxml</strong> will not tell you the origin of a string value that was constructed by the XPath functions <strong>string()</strong> or <strong>concat()</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stringify = etree.XPath(<span class="string">"string()"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stringify(html))</span><br><span class="line">TEXTTAIL</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(stringify(html).getparent())</span><br><span class="line"><span class="keyword">None</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Using-XPath-to-find-text&quot;&gt;&lt;a href=&quot;#Using-XPath-to-find-text&quot; class=&quot;headerlink&quot; title=&quot;Using XPath to find text&quot;&gt;&lt;/a&gt;Using XPath to find text&lt;/h3&gt;&lt;p&gt;Another way to extract the text content of a tree is XPath, which also allows you to extract the separate text chunks into a list:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;print(html.xpath(&lt;span class=&quot;string&quot;&gt;&quot;string()&quot;&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;# lxml.etree only!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TEXTTAIL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;print(html.xpath(&lt;span class=&quot;string&quot;&gt;&quot;//text()&quot;&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;# lxml.etree only!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&#39;TEXT&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;TAIL&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# If you want to use this more often, you can wrap it in a function:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;build_text_list = etree.XPath(&lt;span class=&quot;string&quot;&gt;&quot;//text()&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;# lxml.etree only!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;print(build_text_list(html))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&#39;TEXT&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;TAIL&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="python module" scheme="blog.whistlestop.ml/categories/python-module/"/>
    
    
      <category term="lxml" scheme="blog.whistlestop.ml/tags/lxml/"/>
    
  </entry>
  
  <entry>
    <title>python_lxml_02</title>
    <link href="blog.whistlestop.ml/2018/12/15/python-lxml-02/"/>
    <id>blog.whistlestop.ml/2018/12/15/python-lxml-02/</id>
    <published>2018-12-15T10:29:59.000Z</published>
    <updated>2018-12-15T11:11:11.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-Element-class"><a href="#The-Element-class" class="headerlink" title="The Element class"></a>The Element class</h2><p>An <strong>Element</strong> is the main container object for the <strong>ElementTree</strong> API. Most of the XML tree functionality is accessed through this class. <strong>Elements</strong> are easily created through the <strong>Element</strong> factory.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root= etree.Element(<span class="string">'root'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root.tag</span><br><span class="line"><span class="string">'root'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root.append(etree.Element(<span class="string">'child1'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>child2= etree.SubElement(root, <span class="string">'child2'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>child3= etree.SubElement(root, <span class="string">'child3'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>etree.tostring(root, pretty_print= <span class="keyword">True</span>)</span><br><span class="line"><span class="string">b'&lt;root&gt;\n  &lt;child1/&gt;\n  &lt;child2/&gt;\n  &lt;child3/&gt;\n&lt;/root&gt;\n'</span></span><br></pre></td></tr></table></figure></p><a id="more"></a>  <h3 id="Elements-are-lists"><a href="#Elements-are-lists" class="headerlink" title="Elements are lists"></a>Elements are lists</h3><p>To make the access to these subelements easy and straight forward, elements mimic the behaviour of normal Python lists as closely as possible.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>child= root[<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>child.tag</span><br><span class="line"><span class="string">'child1'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="number">1</span>]</span><br><span class="line">&lt;Element child2 at <span class="number">0x3b6bb20</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> child <span class="keyword">in</span> root: print(child.tag)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">child1</span><br><span class="line">child2</span><br><span class="line">child3</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root.insert(<span class="number">0</span>, etree.Element(<span class="string">'child0'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root[:<span class="number">1</span>]</span><br><span class="line">[&lt;Element child0 at <span class="number">0x3b70d28</span>&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="number">-1</span>:]</span><br><span class="line">[&lt;Element child3 at <span class="number">0x3b6ba80</span>&gt;]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(root)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> child <span class="keyword">in</span> root:</span><br><span class="line"><span class="meta">... </span>    print(child.tag)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">child0</span><br><span class="line">child1</span><br><span class="line">child2</span><br><span class="line">child3</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="number">0</span>]= root[<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> child <span class="keyword">in</span> root:<span class="keyword">print</span> (child.tag)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">child3</span><br><span class="line">child1</span><br><span class="line">child2</span><br></pre></td></tr></table></figure><p>In above example, the last element is moved to a different position, instead of being copied, i.e. it is automatically removed from its previous position when it is put in a different place. In lists, objects can appear in multiple positions at the same time, and the above assignment would just copy the item reference into the first position, so that both contain the exact same item.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>element= etree.Element(<span class="string">'neu'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>element.append(deepcopy(root[<span class="number">1</span>]))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>element[<span class="number">0</span>].tag</span><br><span class="line"><span class="string">'child1'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[c.tag <span class="keyword">for</span> c <span class="keyword">in</span> root]</span><br><span class="line">[<span class="string">'child0'</span>, <span class="string">'child1'</span>, <span class="string">'child2'</span>, <span class="string">'child3'</span>]</span><br></pre></td></tr></table></figure><p>If you want to <strong>copy</strong> an element to a different position in <strong>lxml.etree</strong>, consider creating an independent <strong>deep copy</strong> using the <strong>copy</strong> module from Python’s standard library</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>root <span class="keyword">is</span> root[<span class="number">0</span>].getparent()  <span class="comment"># lxml.etree only!</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="number">0</span>] <span class="keyword">is</span> root[<span class="number">1</span>].getprevious()</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root[<span class="number">1</span>] <span class="keyword">is</span> root[<span class="number">0</span>].getnext()</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>The siblings (or neighbours) of an element are accessed as next and previous elements.</p><h3 id="Elements-carry-attributes-as-a-dict"><a href="#Elements-carry-attributes-as-a-dict" class="headerlink" title="Elements carry attributes as a dict"></a>Elements carry attributes as a dict</h3><p>XML elements support attributes. You can create them directly in the Element factory:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root = etree.Element(<span class="string">"root"</span>, interesting=<span class="string">"totally"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>etree.tostring(root)</span><br><span class="line"><span class="string">b'&lt;root interesting="totally"/&gt;'</span></span><br></pre></td></tr></table></figure></p><p>Attributes are just unordered name-value pairs, so a very convenient way of dealing with them is through the dictionary-like interface of Elements:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(root.get(<span class="string">"interesting"</span>))</span><br><span class="line">totally</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(root.get(<span class="string">"hello"</span>))</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root.set(<span class="string">"hello"</span>, <span class="string">"Huhu"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(root.get(<span class="string">"hello"</span>))</span><br><span class="line">Huhu</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>etree.tostring(root)</span><br><span class="line"><span class="string">b'&lt;root interesting="totally" hello="Huhu"/&gt;'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(root.keys())</span><br><span class="line">[<span class="string">'hello'</span>, <span class="string">'interesting'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name, value <span class="keyword">in</span> sorted(root.items()):</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'%s = %r'</span> % (name, value))</span><br><span class="line">hello = <span class="string">'Huhu'</span></span><br><span class="line">interesting = <span class="string">'totally'</span></span><br></pre></td></tr></table></figure><p>For the cases where you want to do item lookup or have other reasons for getting a ‘real’ dictionary-like object, e.g. for passing it around, you can use the <strong>attrib</strong> property:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>attributes = root.attrib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(attributes[<span class="string">"interesting"</span>])</span><br><span class="line">totally</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(attributes.get(<span class="string">"no-such-attribute"</span>))</span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>attributes[<span class="string">"hello"</span>] = <span class="string">"Guten Tag"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(attributes[<span class="string">"hello"</span>])</span><br><span class="line">Guten Tag</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(root.get(<span class="string">"hello"</span>))</span><br><span class="line">Guten Tag</span><br></pre></td></tr></table></figure><p>Note that attrib is a dict-like object backed by the Element itself. This means that any changes to the Element are reflected in <strong>attrib</strong> and vice versa. It also means that the XML tree stays alive in memory as long as the <strong>attrib</strong> of one of its Elements is in use. To get an independent snapshot of the attributes that does not depend on the XML tree, copy it into a <strong>dict</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict(root.attrib)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(d.items())</span><br><span class="line">[(<span class="string">'hello'</span>, <span class="string">'Guten Tag'</span>), (<span class="string">'interesting'</span>, <span class="string">'totally'</span>)]</span><br></pre></td></tr></table></figure><h3 id="Elements-contain-text"><a href="#Elements-contain-text" class="headerlink" title="Elements contain text"></a>Elements contain text</h3><p>Elements can contain text:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>root = etree.Element(<span class="string">"root"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root.text = <span class="string">"TEXT"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(root.text)</span><br><span class="line">TEXT</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>etree.tostring(root)</span><br><span class="line"><span class="string">b'&lt;root&gt;TEXT&lt;/root&gt;'</span></span><br></pre></td></tr></table></figure><p>In many XML documents (data-centric documents), this is the only place where text can be found. It is encapsulated by a leaf tag at the very bottom of the tree hierarchy.<br>However, if XML is used for tagged text documents such as (X)HTML, text can also appear between different elements, right in the middle of the tree:</p><p><code>&lt;html&gt;&lt;body&gt;Hello&lt;br/&gt;World&lt;/body&gt;&lt;/html&gt;</code></p><p>Here, the <br> tag is surrounded by text. This is often referred to as document-style or mixed-content XML. Elements support this through their tail property. It contains the text that directly follows the element, up to the next element in the XML tree:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>html = etree.Element(<span class="string">"html"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>body = etree.SubElement(html, <span class="string">"body"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>body.text = <span class="string">"TEXT"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>etree.tostring(html)</span><br><span class="line"><span class="string">b'&lt;html&gt;&lt;body&gt;TEXT&lt;/body&gt;&lt;/html&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>br = etree.SubElement(body, <span class="string">"br"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>etree.tostring(html)</span><br><span class="line"><span class="string">b'&lt;html&gt;&lt;body&gt;TEXT&lt;br/&gt;&lt;/body&gt;&lt;/html&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>br.tail = <span class="string">"TAIL"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>etree.tostring(html)</span><br><span class="line"><span class="string">b'&lt;html&gt;&lt;body&gt;TEXT&lt;br/&gt;TAIL&lt;/body&gt;&lt;/html&gt;'</span></span><br></pre></td></tr></table></figure><p>The two properties <strong>.text</strong> and <strong>.tail</strong> are enough to represent any text content in an XML document. This way, the ElementTree API does not require any special text nodes in addition to the Element class, that tend to get in the way fairly often (as you might know from classic DOM APIs).<br>However, there are cases where the tail text also gets in the way. For example, when you serialise an Element from within the tree, you do not always want its tail text in the result (although you would still want the tail text of its children). For this purpose, the <strong>tostring()</strong> function accepts the keyword argument <strong>with_tail</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>etree.tostring(br)</span><br><span class="line"><span class="string">b'&lt;br/&gt;TAIL'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>etree.tostring(br, with_tail=<span class="keyword">False</span>) <span class="comment"># lxml.etree only!</span></span><br><span class="line"><span class="string">b'&lt;br/&gt;'</span></span><br></pre></td></tr></table></figure><p>If you want to read only the text, i.e. without any intermediate tags, you have to recursively concatenate all text and tail attributes in the correct order. Again, the <strong>tostring()</strong> function comes to the rescue, this time using the <strong>method</strong> keyword:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>etree.tostring(html, method=<span class="string">"text"</span>)</span><br><span class="line"><span class="string">b'TEXTTAIL'</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;The-Element-class&quot;&gt;&lt;a href=&quot;#The-Element-class&quot; class=&quot;headerlink&quot; title=&quot;The Element class&quot;&gt;&lt;/a&gt;The Element class&lt;/h2&gt;&lt;p&gt;An &lt;strong&gt;Element&lt;/strong&gt; is the main container object for the &lt;strong&gt;ElementTree&lt;/strong&gt; API. Most of the XML tree functionality is accessed through this class. &lt;strong&gt;Elements&lt;/strong&gt; are easily created through the &lt;strong&gt;Element&lt;/strong&gt; factory.&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root= etree.Element(&lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root.tag&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;root.append(etree.Element(&lt;span class=&quot;string&quot;&gt;&#39;child1&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;child2= etree.SubElement(root, &lt;span class=&quot;string&quot;&gt;&#39;child2&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;child3= etree.SubElement(root, &lt;span class=&quot;string&quot;&gt;&#39;child3&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;etree.tostring(root, pretty_print= &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;b&#39;&amp;lt;root&amp;gt;\n  &amp;lt;child1/&amp;gt;\n  &amp;lt;child2/&amp;gt;\n  &amp;lt;child3/&amp;gt;\n&amp;lt;/root&amp;gt;\n&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="python module" scheme="blog.whistlestop.ml/categories/python-module/"/>
    
    
      <category term="lxml" scheme="blog.whistlestop.ml/tags/lxml/"/>
    
  </entry>
  
  <entry>
    <title>python_lxml_01</title>
    <link href="blog.whistlestop.ml/2018/12/15/python-lxml-01/"/>
    <id>blog.whistlestop.ml/2018/12/15/python-lxml-01/</id>
    <published>2018-12-15T10:29:30.000Z</published>
    <updated>2018-12-15T11:11:16.086Z</updated>
    
    <content type="html"><![CDATA[<p>etree.parse<br>etree.HTML</p><h3 id="文本获取"><a href="#文本获取" class="headerlink" title="文本获取"></a>文本获取</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;&lt;a href="link1.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-inactive"&gt;&lt;a href="link3.html"&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;</span></span><br><span class="line"><span class="string">     &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = etree.tostring(html)</span><br><span class="line">print(result.decode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 輸出：</span></span><br><span class="line"></span><br><span class="line">&lt;html&gt;&lt;body&gt;&lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">         &lt;li class="item-0"&gt;&lt;a href="link1.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class="item-inactive"&gt;&lt;a href="link3.html"&gt;third item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class="item-1"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;</span><br><span class="line">     &lt;/li&gt;&lt;/ul&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><a id="more"></a>  <p>经过处理之后 li 节点标签被补全，并且还自动添加了 body、html 节点<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">result = html.xpath(<span class="string">'//li[@class="item-0"]/text()'</span>)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># 运行结果如下：</span></span><br><span class="line">[<span class="string">'\n     '</span>]</span><br></pre></td></tr></table></figure></p><p>XPath 中 text() 前面是 /，而此 / 的含义是选取直接子节点，而此处很明显 li 的直接子节点都是 a 节点，文本都是在 a 节点内部的，所以这里匹配到的结果就是被修正的 li 节点内部的换行符，因为自动修正的li节点的尾标签换行了。<br>即选中的是这两个节点：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link1.html"</span>&gt;</span>first item<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item-0"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"link5.html"</span>&gt;</span>fifth item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中一个节点因为自动修正，li 节点的尾标签添加的时候换行了，所以提取文本得到的唯一结果就是 li 节点的尾标签和 a 节点的尾标签之间的换行符。<br>因此，如果我们想获取 li 节点内部的文本就有两种方式，一种是选取到 a 节点再获取文本，另一种就是使用 //，我们来看下二者的区别是什么。<br>首先我们选取到 a 节点再获取文本，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./test.html'</span>, etree.HTMLParser())</span><br><span class="line">result = html.xpath(<span class="string">'//li[@class="item-0"]/a/text()'</span>)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># 运行结果：</span></span><br><span class="line">[<span class="string">'first item'</span>, <span class="string">'fifth item'</span>]</span><br></pre></td></tr></table></figure><p>用另一种方式 // 选取的结果，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./test.html'</span>, etree.HTMLParser())</span><br><span class="line">result = html.xpath(<span class="string">'//li[@class="item-0"]//text()'</span>)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># 运行结果：</span></span><br><span class="line">[<span class="string">'first item'</span>, <span class="string">'fifth item'</span>, <span class="string">'\n     '</span>]</span><br></pre></td></tr></table></figure></p><h3 id="属性获取"><a href="#属性获取" class="headerlink" title="属性获取"></a>属性获取</h3><p>我们知道了用 <strong>text()</strong> 可以获取节点内部文本，那么节点属性该怎样获取呢？其实还是用 @ 符号就可以，例如我们想获取所有 <strong>li</strong> 节点下所有 <strong>a</strong> 节点的 <strong>href</strong> 属性，代码如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">html = etree.parse(<span class="string">'./test.html'</span>, etree.HTMLParser())</span><br><span class="line">result = html.xpath(<span class="string">'//li/a/@href'</span>)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># 运行结果：</span></span><br><span class="line">[<span class="string">'link1.html'</span>, <span class="string">'link2.html'</span>, <span class="string">'link3.html'</span>, <span class="string">'link4.html'</span>, <span class="string">'link5.html'</span>]</span><br></pre></td></tr></table></figure></p><p>通过 <strong>@href</strong> 即可获取节点的 <strong>href</strong> 属性，注意此处和属性匹配的方法不同，属性匹配是中括号加属性名和值来限定某个属性，如 <strong>[@href=”link1.html”]</strong>，而此处的 <strong>@href</strong> 指的是获取节点的某个属性，二者需要做好区分。</p><h3 id="属性多值匹配"><a href="#属性多值匹配" class="headerlink" title="属性多值匹配"></a>属性多值匹配</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;li class="li li-first"&gt;&lt;a href="link.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[contains(@class, "li")]/a/text()'</span>)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># 运行结果：</span></span><br><span class="line">[<span class="string">'first item'</span>]</span><br></pre></td></tr></table></figure><p>这样我们通过 <strong>contains()</strong> 方法，第一个参数传入属性名称，第二个参数传入属性值，这样只要此属性包含所传入的属性值就可以完成匹配了。</p><h3 id="多属性匹配"><a href="#多属性匹配" class="headerlink" title="多属性匹配"></a>多属性匹配</h3><p>另外我们可能还遇到一种情况，我们可能需要根据多个属性才能确定一个节点，这是就需要同时匹配多个属性才可以，那么这里可以使用运算符 <strong>and</strong> 来连接，示例如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;li class="li li-first" name="item"&gt;&lt;a href="link.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[contains(@class, "li") and @name="item"]/a/text()'</span>)</span><br><span class="line">print(result)</span><br><span class="line">[<span class="string">'first item'</span>]</span><br></pre></td></tr></table></figure></p><p>在这里 HTML 文本的 <strong>li</strong> 节点又增加了一个属性 <strong>name</strong>，这时候我们需要同时根据 <strong>class</strong> 和 <strong>name</strong> 属性来选择，就可以 <strong>and</strong> 运算符连接两个条件，两个条件都被中括号包围，</p><h3 id="按序选择"><a href="#按序选择" class="headerlink" title="按序选择"></a>按序选择</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>text = <span class="string">'''</span></span><br><span class="line"><span class="string"><span class="meta">... </span>&lt;div&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>    &lt;ul&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>         &lt;li class="item-0"&gt;&lt;a href="link1.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>         &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>         &lt;li class="item-inactive"&gt;&lt;a href="link3.html"&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>         &lt;li class="item-1"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>         &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>     &lt;/ul&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span> &lt;/div&gt;</span></span><br><span class="line"><span class="string"><span class="meta">... </span>'''</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>html=etree.HTML(text)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>html.xpath(<span class="string">'//li[1]/a/text()'</span>)</span><br><span class="line">[<span class="string">'first item'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>html.xpath(<span class="string">'//li[last()]/a/text()'</span>)</span><br><span class="line">[<span class="string">'fifth item'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>html.xpath(<span class="string">'//li[position()&lt;3]/a/text()'</span>)</span><br><span class="line">[<span class="string">'first item'</span>, <span class="string">'second item'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>html.xpath(<span class="string">'//li[last()-2]/a/text()'</span>)</span><br><span class="line">[<span class="string">'third item'</span>]</span><br></pre></td></tr></table></figure><h3 id="节点轴选择"><a href="#节点轴选择" class="headerlink" title="节点轴选择"></a>节点轴选择</h3><p>XPath 提供了很多节点轴选择方法，英文叫做 XPath Axes，包括获取子元素、兄弟元素、父元素、祖先元素等等，在一定情况下使用它可以方便地完成节点的选择。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;&lt;a href="link1.html"&gt;&lt;span&gt;first item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-inactive"&gt;&lt;a href="link3.html"&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-1"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">         &lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;</span></span><br><span class="line"><span class="string">     &lt;/ul&gt;</span></span><br><span class="line"><span class="string"> &lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/ancestor::*'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/ancestor::div'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/attribute::*'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/child::a[@href="link1.html"]'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/descendant::span'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/following::*[2]'</span>)</span><br><span class="line">print(result)</span><br><span class="line">result = html.xpath(<span class="string">'//li[1]/following-sibling::*'</span>)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># 运行结果：</span></span><br><span class="line">[&lt;Element html at <span class="number">0x107941808</span>&gt;, &lt;Element body at <span class="number">0x1079418c8</span>&gt;, &lt;Element div at <span class="number">0x107941908</span>&gt;, &lt;Element ul at <span class="number">0x107941948</span>&gt;]</span><br><span class="line">[&lt;Element div at <span class="number">0x107941908</span>&gt;]</span><br><span class="line">[<span class="string">'item-0'</span>]</span><br><span class="line">[&lt;Element a at <span class="number">0x1079418c8</span>&gt;]</span><br><span class="line">[&lt;Element span at <span class="number">0x107941948</span>&gt;]</span><br><span class="line">[&lt;Element a at <span class="number">0x1079418c8</span>&gt;]</span><br><span class="line">[&lt;Element li at <span class="number">0x107941948</span>&gt;, &lt;Element li at <span class="number">0x107941988</span>&gt;, &lt;Element li at <span class="number">0x1079419c8</span>&gt;, &lt;Element li at <span class="number">0x10794</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>html.xpath(<span class="string">'//ul/child::[@class="item-0"]'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"src\lxml\etree.pyx"</span>, line <span class="number">1589</span>, <span class="keyword">in</span> lxml.etree._Element.xpath (src\lxml\etree.c:<span class="number">61209</span>)</span><br><span class="line">  File <span class="string">"src\lxml\xpath.pxi"</span>, line <span class="number">307</span>, <span class="keyword">in</span> lxml.etree.XPathElementEvaluator.__call__ (src\lxml\etree.c:<span class="number">178748</span>)</span><br><span class="line">  File <span class="string">"src\lxml\xpath.pxi"</span>, line <span class="number">227</span>, <span class="keyword">in</span> lxml.etree._XPathEvaluatorBase._handle_result (src\lxml\etree.c:<span class="number">177700</span>)</span><br><span class="line">lxml.etree.XPathEvalError: Invalid expression</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>html.xpath(<span class="string">'//ul/child::li[@class="item-0"]'</span>)</span><br><span class="line">[&lt;Element li at <span class="number">0x3b6bb20</span>&gt;, &lt;Element li at <span class="number">0x3b6bc88</span>&gt;]</span><br></pre></td></tr></table></figure><p>第一次选择我们调用了 ancestor 轴，可以获取所有祖先节点，其后需要跟两个冒号，然后是节点的选择器，这里我们直接使用了 <em>，表示匹配所有节点，因此返回结果是第一个 li 节点的所有祖先节点，包括 html，body，div，ul。<br>第二次选择我们又加了限定条件，这次在冒号后面加了 div，这样得到的结果就只有 div 这个祖先节点了。<br>第三次选择我们调用了 attribute 轴，可以获取所有属性值，其后跟的选择器还是 </em>，这代表获取节点的所有属性，返回值就是 li 节点的所有属性值。<br>第四次选择我们调用了 child 轴，可以获取所有直接子节点，在这里我们又加了限定条件选取 href 属性为 link1.html 的 a 节点。<br>第五次选择我们调用了 descendant 轴，可以获取所有子孙节点，这里我们又加了限定条件获取 span 节点，所以返回的就是只包含 span 节点而没有 a 节点。<br>第六次选择我们调用了 following 轴，可以获取当前节点之后的所有节点，这里我们虽然使用的是 <em> 匹配，但又加了索引选择，所以只获取了第二个后续节点。<br>第七次选择我们调用了 following-sibling 轴，可以获取当前节点之后的所有同级节点，这里我们使用的是 </em> 匹配，所以获取了所有后续同级节点。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;etree.parse&lt;br&gt;etree.HTML&lt;/p&gt;
&lt;h3 id=&quot;文本获取&quot;&gt;&lt;a href=&quot;#文本获取&quot; class=&quot;headerlink&quot; title=&quot;文本获取&quot;&gt;&lt;/a&gt;文本获取&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; lxml &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; etree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;text = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &amp;lt;ul&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;         &amp;lt;li class=&quot;item-0&quot;&amp;gt;&amp;lt;a href=&quot;link1.html&quot;&amp;gt;first item&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;         &amp;lt;li class=&quot;item-1&quot;&amp;gt;&amp;lt;a href=&quot;link2.html&quot;&amp;gt;second item&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;         &amp;lt;li class=&quot;item-inactive&quot;&amp;gt;&amp;lt;a href=&quot;link3.html&quot;&amp;gt;third item&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;         &amp;lt;li class=&quot;item-1&quot;&amp;gt;&amp;lt;a href=&quot;link4.html&quot;&amp;gt;fourth item&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;         &amp;lt;li class=&quot;item-0&quot;&amp;gt;&amp;lt;a href=&quot;link5.html&quot;&amp;gt;fifth item&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;     &amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt; &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;html = etree.HTML(text)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;result = etree.tostring(html)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(result.decode(&lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 輸出：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;li class=&quot;item-0&quot;&amp;gt;&amp;lt;a href=&quot;link1.html&quot;&amp;gt;first item&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;li class=&quot;item-1&quot;&amp;gt;&amp;lt;a href=&quot;link2.html&quot;&amp;gt;second item&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;li class=&quot;item-inactive&quot;&amp;gt;&amp;lt;a href=&quot;link3.html&quot;&amp;gt;third item&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;li class=&quot;item-1&quot;&amp;gt;&amp;lt;a href=&quot;link4.html&quot;&amp;gt;fourth item&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;li class=&quot;item-0&quot;&amp;gt;&amp;lt;a href=&quot;link5.html&quot;&amp;gt;fifth item&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="python module" scheme="blog.whistlestop.ml/categories/python-module/"/>
    
    
      <category term="lxml" scheme="blog.whistlestop.ml/tags/lxml/"/>
    
  </entry>
  
  <entry>
    <title>python_unitteste</title>
    <link href="blog.whistlestop.ml/2018/12/15/python-unittest/"/>
    <id>blog.whistlestop.ml/2018/12/15/python-unittest/</id>
    <published>2018-12-15T10:28:33.000Z</published>
    <updated>2018-12-15T11:11:07.681Z</updated>
    
    <content type="html"><![CDATA[<p>unittest库提供了test cases, test suites, test fixtures，test runner：</p><ol><li>test case ：通过继承TestCase类，我们可以创建一个test，或者一组tests，包括测试前准备环境的搭建(setUp)，执行测试代码(run)，以及测试后环境的还原(tearDown)。</li><li>test suites ： 测试套件,多个测试用例集合在一起,TestSuite也可以嵌套TestSuite。</li><li>test fixtures ： setup + test case + teardown结构</li><li>TestLoader:用来加载TestCase到TestSuite中，其中的方法从各个地方寻找TestCase，创建它们的实例，然后add到TestSuite中，返回一个TestSuite实例。</li><li>test runner：执行测试用例，其中的run()会执行TestSuite/TestCase。</li><li>TextTestResult：测试的结果会保存到TextTestResult实例中，包括运行用例数，成功数，失败数等</li></ol><p>写好TestCase，然后由TestLoader加载TestCase到TestSuite，然后由TextTestRunner来运行TestSuite，运行的结果保存在TextTestResult中，整个过程集成在unittest.main模块中。所有的测试函数以test开头，test_XXX。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStringMethods</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_upper</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.assertEqual(<span class="string">'foo'</span>.upper(),<span class="string">'FOO'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_split</span><span class="params">(self)</span>:</span></span><br><span class="line">        s=<span class="string">'hello world'</span></span><br><span class="line">        self.assertEqual(s.split(),[<span class="string">'hello'</span>, <span class="string">'world'</span>])</span><br><span class="line">        <span class="comment">#with self.assertEqualRaise(TypeError): s.split(2)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran <span class="number">2</span> tests <span class="keyword">in</span> <span class="number">0.001</span>s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">python -m unittest test_module1 test_module2  <span class="comment">#同时测试多个module</span></span><br><span class="line">python -m unittest test_module.TestClass</span><br><span class="line">python -m unittest test_module.TestClass.test_method</span><br></pre></td></tr></table></figure><h3 id="TestCase"><a href="#TestCase" class="headerlink" title="TestCase"></a>TestCase</h3><p><strong>TestCase</strong>的实例是最小的可测试单元。 testcase 是由unittest的<strong>TestCase</strong>类的实例表示的。要编写自己的测试用例必须继承TestCase类,或者使用FunctionTestCase。且Testcase类提供了各种<strong>assert</strong>的方法来检测预期结果和实际结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultWidgetSizeTestCase</span><span class="params">(unittest.TestCase)</span>:</span> <span class="comment">#unittest.TestCase表示某个测试函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runTest</span><span class="params">(self)</span>:</span></span><br><span class="line">        widget = Widget(<span class="string">'The widget'</span>)</span><br><span class="line">        self.assertEqual(widget.size(), (<span class="number">50</span>, <span class="number">50</span>), <span class="string">'incorrect default size'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立这样一个测试用例的一个实例,使用该类的构造函数，且不带参数(这样会执行所有的测试方法)</span></span><br><span class="line">testCase = DefaultWidgetSizeTestCase()</span><br><span class="line"></span><br><span class="line"><span class="comment">#建了两个**WidgetTestCase**的实例，每个实例只运行**WidgetTestCase**类中的一个测试方法(通过参数传入)</span></span><br><span class="line"></span><br><span class="line">defaultSizeTestCase = WidgetTestCase(<span class="string">'test_default_size'</span>)</span><br><span class="line">resizeTestCase = WidgetTestCase(<span class="string">'test_resize'</span>)</span><br></pre></td></tr></table></figure><h3 id="Test-fixtures"><a href="#Test-fixtures" class="headerlink" title="Test fixtures"></a>Test fixtures</h3><p><em>方法固定装置：</em></p><p>如果要对一个模块中的每一个测试函数都做同样的初始化操作和结尾清除等操作，那么创建n个测试用例就得写n遍一样的代码，为了减少重复的代码，可以使用下面两个函数：</p><ul><li><strong>setUp()</strong>: 每次执行测试用例之前调用。无参数，无返回值。该方法抛出的异常都视为error，而不是测试不通过。没有默认的实现。</li><li><strong>tearDown()</strong>: 每次执行测试用例之后调用。无参数，无返回值。测试方法抛出异常，该方法也正常调用，该方法抛出的异常都视为error，而不是测试不通过。只用setUp()调用成功，该方法才会被调用。没有默认的实现。通过<strong>setup</strong> 和 <strong>tearDown</strong>组装一个module成为一个固定的测试装置。</li></ul><p><em>Class固定装置：</em></p><p>必须为类实现<br><strong>setUpClass()</strong>:一个类方法在单个类测试之前运行。<strong>setUpClass</strong>作为唯一的参数被调用时,必须使用<strong>classmethod()</strong>作为装饰器。<br><strong>tearDownClass()</strong>:一个类方法在单个类测试之后运行。<strong>setUpClass</strong>作为唯一的参数被调用时,必须使用<strong>classmethod()</strong>作为装饰器。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span><span class="params">(cls)</span>:</span> <span class="comment">#这里的cls是当前类的对象</span></span><br><span class="line">        cls._connection = createExpensiveConnectionObject()</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDownClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">        cls._connection.destroy()</span><br></pre></td></tr></table></figure></p><p>Module固定装置：</p><p>必须为方法实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setUpModule</span><span class="params">()</span>:</span></span><br><span class="line">    createConnection()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tearDownModule</span><span class="params">()</span>:</span></span><br><span class="line">    closeConnection()</span><br></pre></td></tr></table></figure><p>特殊方法:</p><ol><li><strong>setup()</strong>:每个测试函数运行前运行</li><li><strong>teardown()</strong>:每个测试函数运行完后执行</li><li><strong>setUpClass()</strong>:必须使用<strong>@classmethod</strong> 装饰器,所有test运行前运行一次</li><li><strong>tearDownClass()</strong>:必须使用<strong>@classmethod</strong>装饰器,所有test运行完后运行一次</li><li><strong>setUpModule()</strong> 和 <strong>tearDownModule()</strong>：在整个文件级别上只调用一次 </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;unittest库提供了test cases, test suites, test fixtures，test runner：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;test case ：通过继承TestCase类，我们可以创建一个test，或者一组tests，包括测试前准备环境的搭建
      
    
    </summary>
    
      <category term="python" scheme="blog.whistlestop.ml/categories/python/"/>
    
    
      <category term="unittest" scheme="blog.whistlestop.ml/tags/unittest/"/>
    
  </entry>
  
  <entry>
    <title>logging_module_three_ways_to_configure</title>
    <link href="blog.whistlestop.ml/2018/12/15/logging-module-three-ways-to-configure/"/>
    <id>blog.whistlestop.ml/2018/12/15/logging-module-three-ways-to-configure/</id>
    <published>2018-12-15T10:27:09.000Z</published>
    <updated>2018-12-15T11:11:03.450Z</updated>
    
    <content type="html"><![CDATA[<p>Configure logging in three ways:</p><ol><li>Creating loggers, handlers, and formatters explicitly using Python code that calls the configuration methods listed above.</li><li>Creating a logging config file and reading it using the <strong>fileConfig()</strong> function.</li><li>Creating a dictionary of configuration information and passing it to the <strong>dictConfig()</strong> function.<a id="more"></a>  <h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># create logger</span></span><br><span class="line">logger = logging.getLogger(<span class="string">'simple_example'</span>)</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create console handler and set level to debug</span></span><br><span class="line">ch = logging.StreamHandler()</span><br><span class="line">ch.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create formatter</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add formatter to ch</span></span><br><span class="line">ch.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add ch to logger</span></span><br><span class="line">logger.addHandler(ch)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'application' code</span></span><br><span class="line">logger.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logger.info(<span class="string">'info message'</span>)</span><br><span class="line">logger.warn(<span class="string">'warn message'</span>)</span><br><span class="line">logger.error(<span class="string">'error message'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure><p>Running this module from the command line produces the following output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ python simple_logging_module.py</span><br><span class="line">2005-03-19 15:10:26,618 - simple_example - DEBUG - debug message</span><br><span class="line">2005-03-19 15:10:26,620 - simple_example - INFO - info message</span><br><span class="line">2005-03-19 15:10:26,695 - simple_example - WARNING - warn message</span><br><span class="line">2005-03-19 15:10:26,697 - simple_example - ERROR - error message</span><br><span class="line">2005-03-19 15:10:26,773 - simple_example - CRITICAL - critical message</span><br></pre></td></tr></table></figure><h3 id="2-fileConfig"><a href="#2-fileConfig" class="headerlink" title="2 fileConfig"></a>2 fileConfig</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line"></span><br><span class="line">logging.config.fileConfig(<span class="string">'logging.conf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create logger</span></span><br><span class="line">logger = logging.getLogger(<span class="string">'simpleExample'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'application' code</span></span><br><span class="line">logger.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logger.info(<span class="string">'info message'</span>)</span><br><span class="line">logger.warn(<span class="string">'warn message'</span>)</span><br><span class="line">logger.error(<span class="string">'error message'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure><p>Here is the logging.conf file:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[loggers]</span><br><span class="line">keys=root,simpleExample</span><br><span class="line"></span><br><span class="line">[handlers]</span><br><span class="line">keys=consoleHandler</span><br><span class="line"></span><br><span class="line">[formatters]</span><br><span class="line">keys=simpleFormatter</span><br><span class="line"></span><br><span class="line">[logger_root]</span><br><span class="line">level=DEBUG</span><br><span class="line">handlers=consoleHandler</span><br><span class="line"></span><br><span class="line">[logger_simpleExample]</span><br><span class="line">level=DEBUG</span><br><span class="line">handlers=consoleHandler</span><br><span class="line">qualname=simpleExample</span><br><span class="line">propagate=0</span><br><span class="line"></span><br><span class="line">[handler_consoleHandler]</span><br><span class="line">class=StreamHandler</span><br><span class="line">level=DEBUG</span><br><span class="line">formatter=simpleFormatter</span><br><span class="line">args=(sys.stdout,)</span><br><span class="line"></span><br><span class="line">[formatter_simpleFormatter]</span><br><span class="line">format=%(asctime)s - %(name)s - %(levelname)s - %(message)s</span><br><span class="line">datefmt=</span><br></pre></td></tr></table></figure></p><p>The output is nearly identical to that of the non-config-file-based example:</p><p>The <strong>fileConfig()</strong> function takes a default parameter, <strong>disable_existing_loggers</strong>, which defaults to <strong>True</strong> for reasons of backward compatibility. This may or may not be what you want, since it will cause any loggers existing before the <strong>fileConfig()</strong> call to be disabled unless they (or an ancestor) are explicitly named in the configuration. Please refer to the reference documentation for more information, and specify <strong>False</strong> for this parameter if you wish.</p><p>The dictionary passed to <strong>dictConfig()</strong> can also specify a <strong>Boolean</strong> value with key <strong>disable_existing_loggers</strong>, which if not specified explicitly in the dictionary also defaults to being interpreted as <strong>True</strong>. This leads to the logger-disabling behaviour described above, which may not be what you want - in which case, provide the key explicitly with a value of <strong>False</strong>.</p><h3 id="using-dictionaries-to-hold-configuration-information"><a href="#using-dictionaries-to-hold-configuration-information" class="headerlink" title="using dictionaries to hold configuration information"></a>using dictionaries to hold configuration information</h3><p>In Python 3.2, a new means of configuring logging has been introduced, using dictionaries to hold configuration information. This provides a superset of the functionality of the config-file-based approach outlined above, and is the recommended configuration method for new applications and deployments. Because a Python dictionary is used to hold configuration information, and since you can populate that dictionary using different means, you have more options for configuration. For example, you can use a configuration file in JSON format, or, if you have access to YAML processing functionality, a file in YAML format, to populate the configuration dictionary. Or, of course, you can construct the dictionary in Python code, receive it in pickled form over a socket, or use whatever approach makes sense for your application.<br>Here’s an example of the same configuration as above, in YAML format for the new dictionary-based approach:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">formatters:</span></span><br><span class="line"><span class="attr">  simple:</span></span><br><span class="line"><span class="attr">    format:</span> <span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span></span><br><span class="line"><span class="attr">handlers:</span></span><br><span class="line"><span class="attr">  console:</span></span><br><span class="line"><span class="attr">    class:</span> <span class="string">logging.StreamHandler</span></span><br><span class="line"><span class="attr">    level:</span> <span class="string">DEBUG</span></span><br><span class="line"><span class="attr">    formatter:</span> <span class="string">simple</span></span><br><span class="line"><span class="attr">    stream:</span> <span class="attr">ext://sys.stdout</span></span><br><span class="line"><span class="attr">loggers:</span></span><br><span class="line"><span class="attr">  simpleExample:</span></span><br><span class="line"><span class="attr">    level:</span> <span class="string">DEBUG</span></span><br><span class="line"><span class="attr">    handlers:</span> <span class="string">[console]</span></span><br><span class="line"><span class="attr">    propagate:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">root:</span></span><br><span class="line"><span class="attr">  level:</span> <span class="string">DEBUG</span></span><br><span class="line"><span class="attr">  handlers:</span> <span class="string">[console]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Configure logging in three ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Creating loggers, handlers, and formatters explicitly using Python code that calls the configuration methods listed above.&lt;/li&gt;
&lt;li&gt;Creating a logging config file and reading it using the &lt;strong&gt;fileConfig()&lt;/strong&gt; function.&lt;/li&gt;
&lt;li&gt;Creating a dictionary of configuration information and passing it to the &lt;strong&gt;dictConfig()&lt;/strong&gt; function.
    
    </summary>
    
      <category term="python module" scheme="blog.whistlestop.ml/categories/python-module/"/>
    
    
      <category term="logging" scheme="blog.whistlestop.ml/tags/logging/"/>
    
  </entry>
  
</feed>

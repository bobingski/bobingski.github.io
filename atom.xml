<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>whistlestop</title>
  
  <subtitle>Never start something you&#39;re not willing to finish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="blog.whistlestop.ml/"/>
  <updated>2018-04-22T13:56:41.006Z</updated>
  <id>blog.whistlestop.ml/</id>
  
  <author>
    <name>eustoma</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>春天的一些照片</title>
    <link href="blog.whistlestop.ml/2018/04/22/%E6%98%A5%E5%A4%A9%E7%9A%84%E4%B8%80%E4%BA%9B%E7%85%A7%E7%89%87/"/>
    <id>blog.whistlestop.ml/2018/04/22/春天的一些照片/</id>
    <published>2018-04-22T18:32:30.000Z</published>
    <updated>2018-04-22T13:56:41.006Z</updated>
    
    <content type="html"><![CDATA[<p>照片非出自本人，双休日这么好的日子，宅着，看看nba, 看看番。</p><p>2018年3月，同事去某个植物园，可能是上海植物园，陶堰情操，拍拍花草，感觉比以前拍的好看点。</p><p><img src="https://img.whistlestop.ml/images/2018/04/21/004.jpg" alt="004.jpg"></p><a id="more"></a><p><img src="https://img.whistlestop.ml/images/2018/04/21/007.jpg" alt="007.jpg"><br><img src="https://img.whistlestop.ml/images/2018/04/21/006.jpg" alt="006.jpg"><br><img src="https://img.whistlestop.ml/images/2018/04/21/005.jpg" alt="005.jpg"><br><img src="https://img.whistlestop.ml/images/2018/04/21/004.jpg" alt="004.jpg"><br><img src="https://img.whistlestop.ml/images/2018/04/21/003.jpg" alt="003.jpg"><br><img src="https://img.whistlestop.ml/images/2018/04/21/002.jpg" alt="002.jpg"><br><img src="https://img.whistlestop.ml/images/2018/04/21/001.jpg" alt="001.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;照片非出自本人，双休日这么好的日子，宅着，看看nba, 看看番。&lt;/p&gt;
&lt;p&gt;2018年3月，同事去某个植物园，可能是上海植物园，陶堰情操，拍拍花草，感觉比以前拍的好看点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.whistlestop.ml/images/2018/04/21/004.jpg&quot; alt=&quot;004.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="blog.whistlestop.ml/categories/life/"/>
    
    
      <category term="photo" scheme="blog.whistlestop.ml/tags/photo/"/>
    
  </entry>
  
  <entry>
    <title>静态博客太好用！！！</title>
    <link href="blog.whistlestop.ml/2018/04/22/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%A4%AA%E5%A5%BD%E7%94%A8%EF%BC%81%EF%BC%81%EF%BC%81/"/>
    <id>blog.whistlestop.ml/2018/04/22/静态博客太好用！！！/</id>
    <published>2018-04-22T13:46:39.000Z</published>
    <updated>2018-04-22T13:56:10.899Z</updated>
    
    <content type="html"><![CDATA[<p>用hexo搭的这个博客， 太好搭了，就用了node.js和git, 不需要vps, 省钱。<br>之前flask搭的那个博客，要先看完书，然后找了一个别人写好的框架，一步一步网上谷歌，废了九牛二虎之力<br>才弄好， 弄完后眼睛那个酸。这个flask博客还是蛮好看的，羡慕别人怎么就可以写的出这么好的框架。</p><p>hexo博客优点：<br>样式简洁美观<br>上传文章超级方便 hexo n, hexo g, hexo s, hexo d</p><p>不过发现图片总是404错误，于是在vps上搭了个图床，第一次发现宝塔这个工具，真是强大方便。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用hexo搭的这个博客， 太好搭了，就用了node.js和git, 不需要vps, 省钱。&lt;br&gt;之前flask搭的那个博客，要先看完书，然后找了一个别人写好的框架，一步一步网上谷歌，废了九牛二虎之力&lt;br&gt;才弄好， 弄完后眼睛那个酸。这个flask博客还是蛮好看的，羡慕别
      
    
    </summary>
    
      <category term="杂谈" scheme="blog.whistlestop.ml/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="吐槽" scheme="blog.whistlestop.ml/tags/%E5%90%90%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>C08_Object References, Mutability, and Recycling_01</title>
    <link href="blog.whistlestop.ml/2018/04/22/C08-Object-References-Mutability-and-Recycling-01/"/>
    <id>blog.whistlestop.ml/2018/04/22/C08-Object-References-Mutability-and-Recycling-01/</id>
    <published>2018-04-22T13:45:26.000Z</published>
    <updated>2018-04-22T13:45:49.144Z</updated>
    
    <content type="html"><![CDATA[<p>The distinction between objects and their names. A name is not the object; a name is a separate thing.</p><h2 id="Variables-Are-Not-Boxes"><a href="#Variables-Are-Not-Boxes" class="headerlink" title="Variables Are Not Boxes"></a>Variables Are Not Boxes</h2><p>It’s better to think of  <strong>Python variables</strong> as labels attached to objects</p><p><strong><em>Variables a and b hold references to the same list, not copies of the list</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>With reference variables, it makes much more sense to say that the variable is <strong>assigned</strong> to an object,<br>and not the other way around. After all, the object is created before the assignment.</p><p><strong><em>The righthand side of an assignment happens first</em>(Variables are assigned to objects only after the objects are created)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Gizmo</span>:</span></span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>print(<span class="string">'Gizmo id: %d'</span> % id(self))</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = Gizmo()</span><br><span class="line">Gizmo id: <span class="number">4301489152</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># a second Gizmo was actually instantiated before the multiplication was attempted.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = Gizmo() * <span class="number">10</span> </span><br><span class="line">Gizmo id: <span class="number">4301489432</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unsupported operand type(s) <span class="keyword">for</span> *: <span class="string">'Gizmo'</span> <span class="keyword">and</span> <span class="string">'int'</span></span><br></pre></td></tr></table></figure><h2 id="Identity-Equality-and-Aliases"><a href="#Identity-Equality-and-Aliases" class="headerlink" title="Identity, Equality, and Aliases"></a>Identity, Equality, and Aliases</h2><p><strong><em>charles and lewis refer to the same object</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>charles = &#123;<span class="string">'name'</span>: <span class="string">'Charles L. Dodgson'</span>, <span class="string">'born'</span>: <span class="number">1832</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lewis = charles <span class="comment"># lewis is an alias for charles.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lewis <span class="keyword">is</span> charles</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(charles), id(lewis) </span><br><span class="line">(<span class="number">4300473992</span>, <span class="number">4300473992</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lewis[<span class="string">'balance'</span>] = <span class="number">950</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>charles</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'Charles L. Dodgson'</span>, <span class="string">'balance'</span>: <span class="number">950</span>, <span class="string">'born'</span>: <span class="number">1832</span>&#125;</span><br></pre></td></tr></table></figure></p><p> <strong><em>alex and charles compare equal, but alex is not charles</em></strong></p><p>#alex refers to an object that is a replica of the object assigned to charles.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>alex = &#123;<span class="string">'name'</span>: <span class="string">'Charles L. Dodgson'</span>, <span class="string">'born'</span>: <span class="number">1832</span>, <span class="string">'balance'</span>: <span class="number">950</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>alex == charles</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>alex <span class="keyword">is</span> <span class="keyword">not</span> charles</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><p>In The Python Language Reference, “3.1. Objects, values and types” states:</p><blockquote><p>Every object has an identity, a type and a value. An object’s identity never changes once<br>it has been created; you may think of it as the object’s address in memory. The is operator<br>compares the identity of two objects; the id() function returns an integer representing<br>its identity.</p></blockquote><p>In CPython, <strong>id()</strong> returns the memory address of the object, but it may be something else in another<br>Python interpreter. The key point is that the ID is guaranteed to be a unique numeric label, and it will<br>never change during the life of the object.</p><h3 id="Choosing-Between-and-is"><a href="#Choosing-Between-and-is" class="headerlink" title="Choosing Between == and is"></a>Choosing Between == and is</h3><p>The <strong>==</strong> operator compares the values of objects (the data they hold), while <strong>is</strong> compares their<br>identities.</p><p><strong><em>checking whether a variable is bound to None</em></strong><br><code>x is None</code></p><p>The <strong>is</strong> operator is faster than <strong>==</strong>, because it cannot be overloaded, so Python does not have to<br>find and invoke special methods to evaluate it, and computing is as simple as comparing two integer IDs.<br>In contrast, <strong>a == b</strong> is syntactic sugar for <strong>a.__eq__(b)</strong>. The <strong>__eq__</strong> method inherited from<br>object compares object IDs, so it produces the same result as <strong>is</strong>.</p><h3 id="The-Relative-Immutability-of-Tuples"><a href="#The-Relative-Immutability-of-Tuples" class="headerlink" title="The Relative Immutability of Tuples"></a>The Relative Immutability of Tuples</h3><p><strong>Tuples</strong>, like most Python collections—<strong>lists</strong>, <strong>dicts</strong>, <strong>sets</strong>, etc.—hold <strong>references</strong> to<br>objects.If the referenced items are <strong>mutable</strong>, they may change even if the <strong>tuple</strong> itself does not. In<br>other words, the <strong>immutability</strong> of tuples really refers to <strong>the physical contents of the tuple data<br>structure (i.e., the references it holds)</strong>, and does not extend to the referenced objects.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1 = (<span class="number">1</span>, <span class="number">2</span>, [<span class="number">30</span>, <span class="number">40</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t2 = (<span class="number">1</span>, <span class="number">2</span>, [<span class="number">30</span>, <span class="number">40</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1 == t2</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(t1[<span class="number">-1</span>])</span><br><span class="line"><span class="number">4302515784</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1[<span class="number">-1</span>].append(<span class="number">99</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, [<span class="number">30</span>, <span class="number">40</span>, <span class="number">99</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(t1[<span class="number">-1</span>]) <span class="comment">#The identity of t1[-1] has not changed, only its value.</span></span><br><span class="line"><span class="number">4302515784</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t1 == t2</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><h3 id="Copies-Are-Shallow-by-Default"><a href="#Copies-Are-Shallow-by-Default" class="headerlink" title="Copies Are Shallow by Default"></a>Copies Are Shallow by Default</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l1 = [<span class="number">3</span>, [<span class="number">55</span>, <span class="number">44</span>], (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2 = list(l1) <span class="comment">#list(l1) creates a copy of l1.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2</span><br><span class="line">[<span class="number">3</span>, [<span class="number">55</span>, <span class="number">44</span>], (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2 == l1</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l2 <span class="keyword">is</span> l1 <span class="comment">#The copies are equal. But refer to two different objects</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>For <strong>lists</strong> and other <strong>mutable</strong> sequences, the shortcut <strong>l2 = l1[:]</strong> also makes a copy.</p><p>Using the <strong>constructor</strong> or <strong>[:]</strong> produces a shallow copy (i.e., the outermost container is duplicated,<br>but the copy is filled with <strong>references</strong> to the same items held by the original container). This saves<br>memory and causes no problems if all the items are immutable. But if there are mutable items, this may<br>lead to unpleasant surprises.</p><p><strong><em>Making a shallow copy of a list containing another list</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">3</span>, [<span class="number">66</span>, <span class="number">55</span>, <span class="number">44</span>], (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)]</span><br><span class="line">l2 = list(l1) <span class="comment">#</span></span><br><span class="line">l1.append(<span class="number">100</span>) <span class="comment">#</span></span><br><span class="line">l1[<span class="number">1</span>].remove(<span class="number">55</span>) <span class="comment">#</span></span><br><span class="line">print(<span class="string">'l1:'</span>, l1)</span><br><span class="line">print(<span class="string">'l2:'</span>, l2)</span><br><span class="line">l2[<span class="number">1</span>] += [<span class="number">33</span>, <span class="number">22</span>] <span class="comment">#</span></span><br><span class="line">l2[<span class="number">2</span>] += (<span class="number">10</span>, <span class="number">11</span>) <span class="comment">#</span></span><br><span class="line">print(<span class="string">'l1:'</span>, l1)</span><br><span class="line">print(<span class="string">'l2:'</span>, l2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ouput:</span></span><br><span class="line">l1: [<span class="number">3</span>, [<span class="number">66</span>, <span class="number">44</span>], (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>), <span class="number">100</span>]</span><br><span class="line">l2: [<span class="number">3</span>, [<span class="number">66</span>, <span class="number">44</span>], (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#For a mutable object like the list referred by l2[1], the operator += changes the list in place. This change </span></span><br><span class="line"><span class="comment">#is visible at l1[1], which is an alias for l2[1].</span></span><br><span class="line">l1: [<span class="number">3</span>, [<span class="number">66</span>, <span class="number">44</span>, <span class="number">33</span>, <span class="number">22</span>], (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>), <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># += on a tuple creates a new tuple and rebinds the variable l2[2] here. This is the same as doing l2[2] = # l2[2] + (10, 11). Now the tuples in the last position of l1 and l2 are no longer the same object. </span></span><br><span class="line">l2: [<span class="number">3</span>, [<span class="number">66</span>, <span class="number">44</span>, <span class="number">33</span>, <span class="number">22</span>], (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>)]</span><br></pre></td></tr></table></figure><h3 id="Deep-and-Shallow-Copies-of-Arbitrary-Objects"><a href="#Deep-and-Shallow-Copies-of-Arbitrary-Objects" class="headerlink" title="Deep and Shallow Copies of Arbitrary Objects"></a>Deep and Shallow Copies of Arbitrary Objects</h3><p>The <strong>copy</strong> module provides the <strong>deepcopy</strong> and <strong>copy</strong> functions that return deep and shallow<br>copies of arbitrary objects.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bus</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, passengers=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> passengers <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            self.passengers=[]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.passengers = list(passengers)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.passengers.append(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drop</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.passengers.remove(name)</span><br></pre></td></tr></table></figure></p><p> <strong><em>Effects of using copy versus deepcopy</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> copy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus1 = Bus([<span class="string">'Alice'</span>, <span class="string">'Bill'</span>, <span class="string">'Claire'</span>, <span class="string">'David'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus2 = copy.copy(bus1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus3 = copy.deepcopy(bus1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#Using copy and deepcopy, we create three distinct Bus instances.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(bus1), id(bus2), id(bus3)</span><br><span class="line">(<span class="number">4301498296</span>, <span class="number">4301499416</span>, <span class="number">4301499752</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus1.drop(<span class="string">'Bill'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus2.passengers</span><br><span class="line">[<span class="string">'Alice'</span>, <span class="string">'Claire'</span>, <span class="string">'David'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(bus1.passengers), id(bus2.passengers), id(bus3.passengers)</span><br><span class="line">(<span class="number">4302658568</span>, <span class="number">4302658568</span>, <span class="number">4302657800</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bus3.passengers</span><br><span class="line">[<span class="string">'Alice'</span>, <span class="string">'Bill'</span>, <span class="string">'Claire'</span>, <span class="string">'David'</span>]</span><br></pre></td></tr></table></figure></p><p><strong><em>Cyclic references: b refers to a, and then is appended to a; deepcopy still manages to copy a</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">10</span>,<span class="number">20</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=[a,<span class="number">30</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(b)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>, [[...], <span class="number">30</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=deepcopy(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">[<span class="number">10</span>, <span class="number">20</span>, [[...], <span class="number">30</span>]]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The distinction between objects and their names. A name is not the object; a name is a separate thing.&lt;/p&gt;
&lt;h2 id=&quot;Variables-Are-Not-Boxes&quot;&gt;&lt;a href=&quot;#Variables-Are-Not-Boxes&quot; class=&quot;headerlink&quot; title=&quot;Variables Are Not Boxes&quot;&gt;&lt;/a&gt;Variables Are Not Boxes&lt;/h2&gt;&lt;p&gt;It’s better to think of  &lt;strong&gt;Python variables&lt;/strong&gt; as labels attached to objects&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Variables a and b hold references to the same list, not copies of the list&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b = a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;a.append(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C07_Stacked Decorators_Parameterized Decorators</title>
    <link href="blog.whistlestop.ml/2018/04/22/C07-Stacked-Decorators-Parameterized-Decorators/"/>
    <id>blog.whistlestop.ml/2018/04/22/C07-Stacked-Decorators-Parameterized-Decorators/</id>
    <published>2018-04-22T13:44:39.000Z</published>
    <updated>2018-04-22T13:45:04.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Stacked-Decorators"><a href="#Stacked-Decorators" class="headerlink" title="Stacked Decorators"></a>Stacked Decorators</h2><p>When two decorators <strong>@d1</strong> and @<strong>d2</strong> are applied to a function f in that order, the result is<br>the same as <strong>f = d1(d2(f))</strong>.</p><h2 id="Parameterized-Decorators"><a href="#Parameterized-Decorators" class="headerlink" title="Parameterized Decorators"></a>Parameterized Decorators</h2><p>When parsing a decorator in source code, Python takes the decorated function and passes it as the first<br>argument to the decorator function. So how do you make a decorator accept other arguments? The<br>answer is: make a decorator factory that takes those arguments and returns a decorator, which is then<br>applied to the function to be decorated.<br><a id="more"></a><br><strong>_registration_param.py_</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">registry=set()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(active=True)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(func)</span>:</span></span><br><span class="line">        print(<span class="string">'running register (active=%s) -&gt; decorate(%s)'</span>)%(active, func)</span><br><span class="line">        <span class="keyword">if</span> active:</span><br><span class="line">            registry.add(func)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            registry.discard(func)</span><br><span class="line">        <span class="keyword">return</span> func</span><br><span class="line">    <span class="keyword">return</span> decorate</span><br><span class="line"></span><br><span class="line"><span class="meta">@register(active=False)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'running f1()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@register(active=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'running f2()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'running f3()'</span>)</span><br></pre></td></tr></table></figure></p><p><strong>_Using the registration_param module_</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> registration_param <span class="keyword">import</span> *</span><br><span class="line">running register(active=False)-&gt;decorate(&lt;function f1 at 0x10073c1e0&gt;)</span><br><span class="line">running register(active=True)-&gt;decorate(&lt;function f2 at 0x10073c268&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>registry <span class="comment">#</span></span><br><span class="line">&#123;&lt;function f2 at <span class="number">0x10073c268</span>&gt;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>register()(f3) <span class="comment">#</span></span><br><span class="line">running register(active=True)-&gt;decorate(&lt;function f3 at 0x10073c158&gt;)</span><br><span class="line">&lt;function f3 at <span class="number">0x10073c158</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>registry <span class="comment">#</span></span><br><span class="line">&#123;&lt;function f3 at <span class="number">0x10073c158</span>&gt;, &lt;function f2 at <span class="number">0x10073c268</span>&gt;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>register(active=<span class="keyword">False</span>)(f2) <span class="comment">#</span></span><br><span class="line">running register(active=False)-&gt;decorate(&lt;function f2 at 0x10073c268&gt;)</span><br><span class="line">&lt;function f2 at <span class="number">0x10073c268</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>registry <span class="comment">#</span></span><br><span class="line">&#123;&lt;function f3 at <span class="number">0x10073c158</span>&gt;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>_clockdeco_param.py_</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">DEFAULT_FMT=<span class="string">'[&#123;elasped: 0.8f&#125;s &#123;name&#125;(&#123;args&#125;) -&gt; &#123;result&#125;]'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clock</span><span class="params">(fmt=DEFAULT_FMT)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">clocked</span><span class="params">(*_args)</span>:</span></span><br><span class="line">            t0=time.time()</span><br><span class="line">            _result=func(*_args)</span><br><span class="line">            elapsed=time.time()- t0</span><br><span class="line">            name=func.__name__</span><br><span class="line">            <span class="comment">#_args holds the actual arguments of clocked</span></span><br><span class="line">            args=<span class="string">', '</span>.join(repr(arg) <span class="keyword">for</span> arg <span class="keyword">in</span> _args)</span><br><span class="line">            result=repr(_result)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#Using **locals() here allows any local variable of</span></span><br><span class="line">            <span class="comment">#clocked to be referenced in the fmt.</span></span><br><span class="line">            print(fmt.format(**locals()))</span><br><span class="line">            <span class="keyword">return</span> _result</span><br><span class="line">        <span class="keyword">return</span> clocked</span><br><span class="line">    <span class="keyword">return</span> decorate</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line"><span class="meta">    @clock()</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">snooze</span><span class="params">(seconds)</span>:</span></span><br><span class="line">        time.sleep(seconds)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        snooze(<span class="number">.123</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line">$ python3 clockdeco_param.py</span><br><span class="line">[0.12412500s] snooze(0.123) -&gt; None</span><br><span class="line">[0.12411904s] snooze(0.123) -&gt; None</span><br><span class="line">[0.12410498s] snooze(0.123) -&gt; None</span><br></pre></td></tr></table></figure></p><p><strong>_clockdeco_param_demo1.py_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> clockdeco_param <span class="keyword">import</span> clock</span><br><span class="line"><span class="meta">@clock('&#123;name&#125;: &#123;elapsed&#125;s')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snooze</span><span class="params">(seconds)</span>:</span></span><br><span class="line"> time.sleep(seconds)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line"> snooze(<span class="number">.123</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line">$ python3 clockdeco_param_demo1.py</span><br><span class="line">snooze: <span class="number">0.12414693832397461</span>s</span><br><span class="line">snooze: <span class="number">0.1241159439086914</span>s</span><br><span class="line">snooze: <span class="number">0.12412118911743164</span>s</span><br></pre></td></tr></table></figure><p> <strong>_clockdeco_param_demo2.py_</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> clockdeco_param <span class="keyword">import</span> clock</span><br><span class="line"><span class="meta">@clock('&#123;name&#125;(&#123;args&#125;) dt=&#123;elapsed:0.3f&#125;s')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snooze</span><span class="params">(seconds)</span>:</span></span><br><span class="line"> time.sleep(seconds)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line"> snooze(<span class="number">.123</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line">$ python3 clockdeco_param_demo2.py</span><br><span class="line">snooze(<span class="number">0.123</span>) dt=<span class="number">0.124</span>s</span><br><span class="line">snooze(<span class="number">0.123</span>) dt=<span class="number">0.124</span>s</span><br><span class="line">snooze(<span class="number">0.123</span>) dt=<span class="number">0.124</span>s</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Stacked-Decorators&quot;&gt;&lt;a href=&quot;#Stacked-Decorators&quot; class=&quot;headerlink&quot; title=&quot;Stacked Decorators&quot;&gt;&lt;/a&gt;Stacked Decorators&lt;/h2&gt;&lt;p&gt;When two decorators &lt;strong&gt;@d1&lt;/strong&gt; and @&lt;strong&gt;d2&lt;/strong&gt; are applied to a function f in that order, the result is&lt;br&gt;the same as &lt;strong&gt;f = d1(d2(f))&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Parameterized-Decorators&quot;&gt;&lt;a href=&quot;#Parameterized-Decorators&quot; class=&quot;headerlink&quot; title=&quot;Parameterized Decorators&quot;&gt;&lt;/a&gt;Parameterized Decorators&lt;/h2&gt;&lt;p&gt;When parsing a decorator in source code, Python takes the decorated function and passes it as the first&lt;br&gt;argument to the decorator function. So how do you make a decorator accept other arguments? The&lt;br&gt;answer is: make a decorator factory that takes those arguments and returns a decorator, which is then&lt;br&gt;applied to the function to be decorated.&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C07_Implementing a Simple Decorator</title>
    <link href="blog.whistlestop.ml/2018/04/22/C07-Implementing-a-Simple-Decorator/"/>
    <id>blog.whistlestop.ml/2018/04/22/C07-Implementing-a-Simple-Decorator/</id>
    <published>2018-04-22T13:43:48.000Z</published>
    <updated>2018-04-22T13:44:15.690Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>clockdeco.py:</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clock</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clocked</span><span class="params">(*args)</span>:</span></span><br><span class="line">        t0=time.perf_counter()</span><br><span class="line">        result=func(*args) </span><br><span class="line">        elapsed=time.perf_counter()- t0</span><br><span class="line">        name=func.__name__</span><br><span class="line">        arg_str=<span class="string">', '</span>.join(repr(arg) <span class="keyword">for</span> arg <span class="keyword">in</span> args)</span><br><span class="line">        print(<span class="string">'[%0.8fs] %s(%s) -&gt; %r'</span>%(elapsed, name, arg_str, result))</span><br><span class="line">    <span class="keyword">return</span> clocked</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>_clockdeco_demo.py:_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> clockdeco <span class="keyword">import</span> clock</span><br><span class="line"></span><br><span class="line"><span class="meta">@clock</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snooze</span><span class="params">(seconds)</span>:</span></span><br><span class="line">    time.sleep(seconds)</span><br><span class="line"></span><br><span class="line"><span class="meta">@clock</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> n ==<span class="number">1</span> <span class="keyword">else</span> n * factorial(n<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'*'</span>*<span class="number">40</span>, <span class="string">'Calling snooze(.123)'</span>)</span><br><span class="line">    snooze(<span class="number">.123</span>)</span><br><span class="line">    print(<span class="string">'*'</span>*<span class="number">40</span>, <span class="string">'Calling factorial(6)'</span>)</span><br><span class="line">    print(<span class="string">'6!= '</span>, factorial(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> clockdeco_demo</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clockdeco_demo.factorial.__name__</span><br><span class="line"><span class="string">'clocked'</span></span><br></pre></td></tr></table></figure><p>So <strong>factorial</strong> now actually holds a reference to the <strong>clocked</strong> function. The typical behavior of a decorator: it replaces the decorated function with a new function that accepts the same arguments and (usually) returns whatever the decorated function was supposed to return, while also doing some extra processing.</p><h3 id="functools-wraps"><a href="#functools-wraps" class="headerlink" title="functools.wraps"></a>functools.wraps</h3><p>The <strong>clock</strong> decorator has a few shortcomings: it does not support keyword arguments, and it masks<br>the <strong>__name__</strong> and <strong>__doc__</strong> of the decorated function.</p><p><strong><em>clockdeco2.py</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clock</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clocked</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        t0=time.time()</span><br><span class="line">        result=func(*args, **kwargs)</span><br><span class="line">        elapsed=time.time() - t0</span><br><span class="line">        name=func.__name__</span><br><span class="line">        arg_lst=[]</span><br><span class="line">        <span class="keyword">if</span> args:</span><br><span class="line">            arg_lst.append(<span class="string">', '</span>.join(repr(arg) <span class="keyword">for</span> arg <span class="keyword">in</span> args))</span><br><span class="line">        <span class="keyword">if</span> kwargs:</span><br><span class="line">            pairs=[<span class="string">'%s = %s'</span> %(k,w) <span class="keyword">for</span> k,w <span class="keyword">in</span> sorted(kwargs.items())]</span><br><span class="line">            arg_lst.append(<span class="string">', '</span>.join(pairs))</span><br><span class="line">        arg_str=<span class="string">', '</span>.join(arg_lst)</span><br><span class="line">        print(<span class="string">'[%0.8fs] %s(%s) -&gt; %r'</span>%(elapsed, name, arg_str, result))</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> clocked</span><br></pre></td></tr></table></figure></p><h3 id="functools-lru-cache"><a href="#functools-lru-cache" class="headerlink" title="functools.lru_cache"></a>functools.lru_cache</h3><p>A very practical decorator is <strong>functools.lru_cache</strong>. It implements memoization: an optimization<br>technique that works by saving the results of previous invocations of an expensive function, avoiding<br>repeat computations on previously used arguments. The letters LRU stand for <strong><em>Least Recently Used</em></strong>,<br>meaning that the growth of the cache is limited by discarding the entries that have not been read for a<br>while.</p><p><strong>_fibo_demo.py_</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> clockdeco <span class="keyword">import</span> clock</span><br><span class="line"><span class="meta">@clock</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(n)</span>:</span></span><br><span class="line"> <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line"> <span class="keyword">return</span> n</span><br><span class="line"> <span class="keyword">return</span> fibonacci(n<span class="number">-2</span>) + fibonacci(n<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line"> print(fibonacci(<span class="number">6</span>))</span><br><span class="line"><span class="comment"># $ python3 fibo_demo.py</span></span><br><span class="line"><span class="comment"># [0.00000095s] fibonacci(0) -&gt; 0</span></span><br><span class="line"><span class="comment"># [0.00000095s] fibonacci(1) -&gt; 1</span></span><br><span class="line"><span class="comment"># [0.00007892s] fibonacci(2) -&gt; 1</span></span><br><span class="line"><span class="comment"># [0.00000095s] fibonacci(1) -&gt; 1</span></span><br><span class="line"><span class="comment"># [0.00000095s] fibonacci(0) -&gt; 0</span></span><br><span class="line"><span class="comment"># [0.00000095s] fibonacci(1) -&gt; 1</span></span><br><span class="line"><span class="comment"># [0.00003815s] fibonacci(2) -&gt; 1</span></span><br><span class="line"><span class="comment"># [0.00007391s] fibonacci(3) -&gt; 2</span></span><br><span class="line"><span class="comment"># [0.00018883s] fibonacci(4) -&gt; 3</span></span><br><span class="line"><span class="comment"># [0.00000000s] fibonacci(1) -&gt; 1</span></span><br><span class="line"><span class="comment"># [0.00000095s] fibonacci(0) -&gt; 0</span></span><br><span class="line"><span class="comment"># [0.00000119s] fibonacci(1) -&gt; 1</span></span><br><span class="line"><span class="comment"># [0.00004911s] fibonacci(2) -&gt; 1</span></span><br><span class="line"><span class="comment"># [0.00009704s] fibonacci(3) -&gt; 2</span></span><br><span class="line"><span class="comment"># [0.00000000s] fibonacci(0) -&gt; 0</span></span><br><span class="line"><span class="comment"># [0.00000000s] fibonacci(1) -&gt; 1</span></span><br><span class="line"><span class="comment"># [0.00002694s] fibonacci(2) -&gt; 1</span></span><br><span class="line"><span class="comment"># [0.00000095s] fibonacci(1) -&gt; 1</span></span><br><span class="line"><span class="comment"># [0.00000095s] fibonacci(0) -&gt; 0</span></span><br><span class="line"><span class="comment"># [0.00000095s] fibonacci(1) -&gt; 1</span></span><br><span class="line"><span class="comment"># [0.00005102s] fibonacci(2) -&gt; 1</span></span><br><span class="line"><span class="comment"># [0.00008917s] fibonacci(3) -&gt; 2</span></span><br><span class="line"><span class="comment"># [0.00015593s] fibonacci(4) -&gt; 3</span></span><br><span class="line"><span class="comment"># [0.00029993s] fibonacci(5) -&gt; 5</span></span><br><span class="line"><span class="comment"># [0.00052810s] fibonacci(6) -&gt; 8</span></span><br><span class="line"><span class="comment"># 8</span></span><br></pre></td></tr></table></figure></p><p><strong>_fibo_demo_lru.py_</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> functools </span><br><span class="line"><span class="keyword">from</span> clockdeco <span class="keyword">import</span> clock</span><br><span class="line"></span><br><span class="line"><span class="meta">@functools.lru_cache()</span></span><br><span class="line"><span class="meta">@clock</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibnacci</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>: <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">return</span> fibnacci(n<span class="number">-2</span>)+ fibnacci(n<span class="number">-1</span>)</span><br><span class="line">$ python3 fibo_demo_lru.py</span><br><span class="line"><span class="comment"># [0.00000119s] fibonacci(0) -&gt; 0</span></span><br><span class="line"><span class="comment"># [0.00000119s] fibonacci(1) -&gt; 1</span></span><br><span class="line"><span class="comment"># [0.00010800s] fibonacci(2) -&gt; 1</span></span><br><span class="line"><span class="comment"># [0.00000787s] fibonacci(3) -&gt; 2</span></span><br><span class="line"><span class="comment"># [0.00016093s] fibonacci(4) -&gt; 3</span></span><br><span class="line"><span class="comment"># [0.00001216s] fibonacci(5) -&gt; 5</span></span><br><span class="line"><span class="comment"># [0.00025296s] fibonacci(6) -&gt; 8</span></span><br></pre></td></tr></table></figure></p><p><strong>lru_cache</strong> can be tuned by passing two optional arguments. Its full signature is:</p><p><code>functools.lru_cache(maxsize=128, typed=False)</code></p><p>The <strong>maxsize</strong> argument determines how many call results are stored. After the cache is full, older results are discarded to make room. For optimal performance, <strong>maxsize</strong> should be a power of 2. The <strong>typed</strong> argument, if set to <strong>True</strong>, stores results of different argument types separately, i.e., distinguishing between <strong>float</strong> and <strong>integer</strong> arguments that are normally considered equal, like 1 and 1.0. By the way, because <strong>lru_cache</strong> uses a <strong>dict</strong> to store the results, and the keys are made from the <strong>positional</strong> and <strong>keyword</strong> arguments used in the calls, all the arguments taken by the decorated function must be <strong>hashable</strong>.</p><h3 id="functools-singledispatch"><a href="#functools-singledispatch" class="headerlink" title="functools.singledispatch"></a>functools.singledispatch</h3><p>If you decorate a plain function with <strong>@singledispatch</strong>, it becomes a <strong>generic</strong> function: a group of<br>functions to perform the same operation in different ways, depending on the type of the first argument.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> singledispatch</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> abc</span><br><span class="line"><span class="keyword">import</span> numbers</span><br><span class="line"><span class="keyword">import</span> html</span><br><span class="line"></span><br><span class="line"><span class="meta">@singledispatch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">htmlize</span><span class="params">(obj)</span>:</span></span><br><span class="line">    content=html.escape(repr(obj))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;pre&gt;&#123;&#125;&lt;/pre&gt;'</span>.format(content)</span><br><span class="line"></span><br><span class="line"><span class="meta">@htmlize.register(str)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(text)</span>:</span></span><br><span class="line">    content=html.escape(text).replace(<span class="string">'\n'</span>,<span class="string">'&lt;br&gt;\n'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;p&gt;&#123;0&#125;&lt;/p&gt;'</span>.format(content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#numbers.Integral is a virtual superclass of int.</span></span><br><span class="line"><span class="meta">@htmlize.register(numbers.Integral)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;pre&gt;&#123;0&#125; (0x&#123;0:x&#125;)&lt;/pre&gt;'</span>.format(n)</span><br><span class="line"></span><br><span class="line"> <span class="comment">#stack several register decorators to support different types</span></span><br><span class="line"> <span class="comment">#with the same function</span></span><br><span class="line"><span class="meta">@htmlize.register(tuple)</span></span><br><span class="line"><span class="meta">@htmlize.register(abc.MutableSequence)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(seq)</span>:</span></span><br><span class="line">    inner=<span class="string">'&lt;/li&gt;\n&lt;li&gt;'</span>.join(htmlize(item) <span class="keyword">for</span> item <span class="keyword">in</span> seq)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;ul&gt;\n&lt;li&gt;'</span>+inner+<span class="string">'&lt;/li&gt;\n&lt;/ul&gt;'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;clockdeco.py:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;clock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(func)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;clocked&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(*args)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        t0=time.perf_counter()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result=func(*args) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        elapsed=time.perf_counter()- t0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        name=func.__name__&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        arg_str=&lt;span class=&quot;string&quot;&gt;&#39;, &#39;&lt;/span&gt;.join(repr(arg) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; arg &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; args)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&#39;[%0.8fs] %s(%s) -&amp;gt; %r&#39;&lt;/span&gt;%(elapsed, name, arg_str, result))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; clocked&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C07_Function Decorators and Closures_02</title>
    <link href="blog.whistlestop.ml/2018/04/22/C07-Function-Decorators-and-Closures-02/"/>
    <id>blog.whistlestop.ml/2018/04/22/C07-Function-Decorators-and-Closures-02/</id>
    <published>2018-04-22T13:42:56.000Z</published>
    <updated>2018-04-22T13:43:23.840Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Closures"><a href="#Closures" class="headerlink" title="Closures"></a>Closures</h2><p>A <strong>closure</strong> is a function with an extended scope that encompasses <strong>nonglobal</strong> variables referenced<br>in the body of the function but not defined there. It does not matter whether the function is anonymous<br>or not; what matters is that it can access <strong>nonglobal</strong> variables that are defined outside of its body.<br><a id="more"></a><br><strong><em>A class to calculate a running average</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Averager</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.series=[]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, new_value)</span>:</span></span><br><span class="line">        self.series.append(new_value)</span><br><span class="line">        total=sum(self.series)</span><br><span class="line">        <span class="keyword">return</span> total / len(self.series)</span><br></pre></td></tr></table></figure></p><p><strong><em>A higher-order function to calculate a running average</em></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span><span class="params">()</span>:</span></span><br><span class="line">    series=[]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">(new_value)</span>:</span></span><br><span class="line">        series.append(new_value)</span><br><span class="line">        total=sum(series)</span><br><span class="line">        <span class="keyword">return</span> total / len(series)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> averager</span><br></pre></td></tr></table></figure></p><p>When  invoked,  <strong>make_averager</strong>  returns  an  <strong>averager</strong>  function  object.  Each  time  an<br><strong>averager</strong>  is  called,  it  appends  the  passed  argument  to  the  series,  and  computes  the current<br>average, as shown:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg = make_averager()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">10</span>)</span><br><span class="line"><span class="number">10.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">11</span>)</span><br><span class="line"><span class="number">10.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">12</span>)</span><br><span class="line"><span class="number">11.0</span></span><br></pre></td></tr></table></figure><p><strong>_inspecting the function created by make_average_</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg.__code__</span><br><span class="line">.co_varnames(<span class="string">'new_value'</span>, <span class="string">'total'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg.__code__.co_freevars</span><br><span class="line">(<span class="string">'series'</span>,)</span><br></pre></td></tr></table></figure><p>The binding for series is kept in the <strong>__closure__</strong> attribute of the returned function avg. Each item in<br>avg.<strong>__closure__</strong>corresponds to a name in avg.<strong>__closure__**</strong>.co<strong>_free vars. These items are </strong>cells<strong>, and they have an attribute called </strong>cell_contents** where the actual value can be found.</p><p>A <strong>closure</strong> is a function that retains the bindings of the free variables that exist when the function is<br>defined, so that they can be used later when the function is invoked and the defining scope is no longer<br>available.</p><h2 id="nonlocal-Declaration"><a href="#nonlocal-Declaration" class="headerlink" title="nonlocal Declaration"></a>nonlocal Declaration</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span><span class="params">()</span>:</span></span><br><span class="line">    count=<span class="number">0</span></span><br><span class="line">    total=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">(new_value)</span>:</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        total += new_value</span><br><span class="line">        <span class="keyword">return</span> total / count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> averager</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg= make_averager()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>avg(<span class="number">10</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">6</span>, <span class="keyword">in</span> averager</span><br><span class="line">UnboundLocalError: local variable <span class="string">'count'</span> referenced before assignment</span><br></pre></td></tr></table></figure><p>The problem is that the statement <strong>count += 1</strong> actually means the same as <strong>count = count + 1</strong>,<br>when <strong>count</strong> is a number or any immutable type. So we are actually assigning to <strong>count</strong> in the body<br>of <strong>averager</strong>, and that makes it a <strong>local</strong> variable. The same problem affects the <strong>total</strong> variable.</p><p>We did not have this problem in <strong>series</strong> because we never assigned to the <strong>series</strong> name; we only<br>called <strong>series.append</strong> and invoked <strong>sum</strong> and <strong>len</strong> on it. So we took advantage of the fact that lists are <strong>mutable</strong>.</p><p>But with <strong>immutable</strong> types like numbers, strings, tuples, etc., all you can do is read, but never update. If<br>you try to rebind them, as in <strong>count = count + 1</strong>, then you are <strong>implicitly creating a local variable<br>count</strong>. It is no longer a free variable, and therefore it is not saved in the closure.</p><p>To work around this, the <strong>nonlocal</strong> declaration was introduced in Python 3. It lets you flag a variable as<br>a free variable even when it is <strong>assigned</strong> a new value within the function. If a new value is assigned to a<br><strong>nonlocal</strong> variable, the binding stored in the closure is changed.</p><p><strong><em>Calculate a running average without keeping all history (fixed with the use of nonlocal)</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span><span class="params">()</span>:</span></span><br><span class="line"> count = <span class="number">0</span></span><br><span class="line"> total = <span class="number">0</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">averager</span><span class="params">(new_value)</span>:</span></span><br><span class="line"> <span class="keyword">nonlocal</span> count, total</span><br><span class="line"> count += <span class="number">1</span></span><br><span class="line"> total += new_value</span><br><span class="line"> <span class="keyword">return</span> total / count</span><br><span class="line"> <span class="keyword">return</span> averager</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Closures&quot;&gt;&lt;a href=&quot;#Closures&quot; class=&quot;headerlink&quot; title=&quot;Closures&quot;&gt;&lt;/a&gt;Closures&lt;/h2&gt;&lt;p&gt;A &lt;strong&gt;closure&lt;/strong&gt; is a function with an extended scope that encompasses &lt;strong&gt;nonglobal&lt;/strong&gt; variables referenced&lt;br&gt;in the body of the function but not defined there. It does not matter whether the function is anonymous&lt;br&gt;or not; what matters is that it can access &lt;strong&gt;nonglobal&lt;/strong&gt; variables that are defined outside of its body.&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C07_Function Decorators and Closures01</title>
    <link href="blog.whistlestop.ml/2018/04/22/C07-Function-Decorators-and-Closures01/"/>
    <id>blog.whistlestop.ml/2018/04/22/C07-Function-Decorators-and-Closures01/</id>
    <published>2018-04-22T13:42:05.000Z</published>
    <updated>2018-04-22T13:42:36.991Z</updated>
    
    <content type="html"><![CDATA[<h2 id="decorator"><a href="#decorator" class="headerlink" title="decorator"></a>decorator</h2><p>A <strong>decorator</strong> is a callable that takes another function as argument (the decorated function). The<br><strong>decorator</strong> may perform some processing with the decorated function, and returns it or replaces it with<br>another function or <strong>callable</strong> object.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>        print(<span class="string">'running inner'</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> inner</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>@deco</span><br><span class="line"><span class="meta">... </span><span class="function"><span class="keyword">def</span> <span class="title">target</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'running target()'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>target()</span><br><span class="line">running inner</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>target</span><br><span class="line">&lt;function deco.&lt;locals&gt;.inner at <span class="number">0x05CDF348</span>&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><p>The  first  crucial  fact  about  decorators  is  that  they  have  the  power  to replace the decorated<br>function with a different one. The second crucial fact is that they are executed immediately when a module<br>is loaded. This is explained next.</p><h3 id="When-Python-Executes-Decorators"><a href="#When-Python-Executes-Decorators" class="headerlink" title="When Python Executes Decorators"></a>When Python Executes Decorators</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _registration.py_</span></span><br><span class="line">registry=[]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(<span class="string">'running register(%s)'</span>%func)</span><br><span class="line">    registry.append(func)</span><br><span class="line">    <span class="keyword">return</span> func</span><br><span class="line"></span><br><span class="line"><span class="meta">@register</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span> print(<span class="string">'running f1()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@register</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span>print(<span class="string">'running f2()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>:</span>print(<span class="string">'running f3()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'running main()'</span>)</span><br><span class="line">    print(<span class="string">'registry -&gt;'</span>, registry)</span><br><span class="line">    f1()</span><br><span class="line">    f2()</span><br><span class="line">    f3()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="comment">#If registration.py is imported</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span></span><br><span class="line">registration</span><br><span class="line">running register(&lt;function f1 at <span class="number">0x10063b1e0</span>&gt;)</span><br><span class="line">running register(&lt;function f2 at <span class="number">0x10063b268</span>&gt;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>registration.registry</span><br><span class="line">[&lt;function f1 at <span class="number">0x10063b1e0</span>&gt;, &lt;function f2 at <span class="number">0x10063b268</span>&gt;]</span><br></pre></td></tr></table></figure><p><strong>decorators</strong> are executed as soon as the module is imported, but the decorated functions only run<br>when they are explicitly invoked. This highlights the difference between what Pythonistas call  <strong>import<br>time</strong>  and  <strong>runtime</strong>.</p><p>Considering how decorators are commonly employed in real code, above example is unusual in two ways:</p><ul><li>The decorator function is defined in the same module as the decorated functions. A real decorator is usually defined in one module and applied to functions in other modules.</li><li>The <strong>register</strong> decorator returns the same function passed as argument. In practice, most decorators define an inner function and return it.</li></ul><h3 id="Decorator-Enhanced-Strategy-Pattern"><a href="#Decorator-Enhanced-Strategy-Pattern" class="headerlink" title="Decorator-Enhanced Strategy Pattern"></a>Decorator-Enhanced Strategy Pattern</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">promos=[]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">promotion</span><span class="params">(promo_func)</span>:</span></span><br><span class="line">    promos.append(promo_func)</span><br><span class="line">    <span class="keyword">return</span> promo_func</span><br><span class="line"></span><br><span class="line"><span class="meta">@promotion</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fidelity</span><span class="params">(order)</span>:</span></span><br><span class="line">    <span class="string">"""5% discount for customers with 1000 or more fidelity points"""</span></span><br><span class="line">    <span class="keyword">return</span> order.total() *<span class="number">0.05</span> <span class="keyword">if</span> order.customer.fidelity &gt;=<span class="number">1000</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@promotion</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bulk_item</span><span class="params">(order)</span>:</span></span><br><span class="line">    <span class="string">"""10% discount for each LineItem with 20 or more units"""</span></span><br><span class="line">    discount=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> order.cart:</span><br><span class="line">        <span class="keyword">if</span> item.quantity &gt;= <span class="number">20</span>:</span><br><span class="line">            discount += item.total() * <span class="number">0.1</span></span><br><span class="line">    <span class="keyword">return</span> discount</span><br><span class="line"></span><br><span class="line"><span class="meta">@promotion</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">large_order</span><span class="params">(order)</span>:</span></span><br><span class="line">    <span class="string">"""7% discount for orders with 10 or more distinct items"""</span></span><br><span class="line">    distinct_items=&#123;item.product <span class="keyword">for</span> item <span class="keyword">in</span> order.cart&#125;</span><br><span class="line">    <span class="keyword">if</span> len(distinct_items) &gt;= <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> order.total() * <span class="number">0.07</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_promo</span><span class="params">(order)</span>:</span></span><br><span class="line">    <span class="string">"""Select best discount available"""</span></span><br><span class="line">    <span class="keyword">return</span> max(promo(order) <span class="keyword">for</span> promo <span class="keyword">in</span> promos)</span><br></pre></td></tr></table></figure><p>Most decorators do change the decorated function. They usually do it by defining an inner function and<br>returning it to replace the decorated function. Code that uses inner functions almost always depends on<br>closures to operate correctly.</p><h2 id="Variable-Scope-Rules"><a href="#Variable-Scope-Rules" class="headerlink" title="Variable Scope Rules"></a>Variable Scope Rules</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=<span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(a)</span>:</span></span><br><span class="line"><span class="meta">... </span>    print(a)</span><br><span class="line"><span class="meta">... </span>    print(b)</span><br><span class="line"><span class="meta">... </span>    b=<span class="number">9</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">3</span>, <span class="keyword">in</span> f2</span><br><span class="line">UnboundLocalError: local variable <span class="string">'b'</span> referenced before assignment</span><br></pre></td></tr></table></figure><p>When Python compiles the body of the function, it decides that <strong>b</strong>  is a local variable because it is assigned within the function.</p><p><strong>Python</strong> does not require you to declare variables, but  assumes  that  a  variable  assigned  in  the<br>body  of  a  function  is  local.  This  is  much better  than  the  behavior  of  <strong>JavaScript</strong>,  which  does<br>not  require  variable  declarations either, but if you do forget to declare that a variable is local (with<br><strong>var</strong>), you may clobber a <strong>global</strong> variable without knowing.</p><p>If we want the interpreter to treat <strong>b</strong> as a global variable in spite of the assignment within the function,<br>we use the  <strong>global</strong>  declaration：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(a)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">global</span> b</span><br><span class="line"><span class="meta">... </span>    print(a)</span><br><span class="line"><span class="meta">... </span>    print(b)</span><br><span class="line"><span class="meta">... </span>    b=<span class="number">9</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f3(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f3(<span class="number">3</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;decorator&quot;&gt;&lt;a href=&quot;#decorator&quot; class=&quot;headerlink&quot; title=&quot;decorator&quot;&gt;&lt;/a&gt;decorator&lt;/h2&gt;&lt;p&gt;A &lt;strong&gt;decorator&lt;/strong&gt; is a callable that takes another function as argument (the decorated function). The&lt;br&gt;&lt;strong&gt;decorator&lt;/strong&gt; may perform some processing with the decorated function, and returns it or replaces it with&lt;br&gt;another function or &lt;strong&gt;callable&lt;/strong&gt; object.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;deco&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(func)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;        print(&lt;span class=&quot;string&quot;&gt;&#39;running inner&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; inner&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;@deco&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;running target()&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;target()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;running inner&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;function deco.&amp;lt;locals&amp;gt;.inner at &lt;span class=&quot;number&quot;&gt;0x05CDF348&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C06_design pattern- Command</title>
    <link href="blog.whistlestop.ml/2018/04/22/C06-design-pattern-Command/"/>
    <id>blog.whistlestop.ml/2018/04/22/C06-design-pattern-Command/</id>
    <published>2018-04-22T13:41:19.000Z</published>
    <updated>2018-04-22T13:41:46.175Z</updated>
    
    <content type="html"><![CDATA[<p>Command is another design pattern that can be simplified by the use of functions passed as arguments. </p><h3 id="MacroCommand"><a href="#MacroCommand" class="headerlink" title="MacroCommand"></a>MacroCommand</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MacroCommand</span>:</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, commands)</span>:</span></span><br><span class="line">  self.commands=list(commands)</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">  <span class="keyword">for</span> command <span class="keyword">in</span> self.commands:</span><br><span class="line">   command()</span><br></pre></td></tr></table></figure><a id="more"></a><p>More  advanced  uses  of  the  Command  pattern—to  support  undo,  for  example—may require more<br>than a simple callback function. Even then, Python provides a couple of alternatives that deserve<br>consideration:</p><ul><li>A callable instance like <strong>MacroCommand</strong>  can keep whatever state is necessary, and provide extra methods in addition to  <strong>__call__</strong>.</li><li>A closure can be used to hold the internal state of a function between calls.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Command is another design pattern that can be simplified by the use of functions passed as arguments. &lt;/p&gt;
&lt;h3 id=&quot;MacroCommand&quot;&gt;&lt;a href=&quot;#MacroCommand&quot; class=&quot;headerlink&quot; title=&quot;MacroCommand&quot;&gt;&lt;/a&gt;MacroCommand&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MacroCommand&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, commands)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  self.commands=list(commands)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__call__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; command &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; self.commands:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   command()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C06_Strategy Design and Function-Oriented Strategy</title>
    <link href="blog.whistlestop.ml/2018/04/22/C06-Strategy-Design-and-Function-Oriented-Strategy/"/>
    <id>blog.whistlestop.ml/2018/04/22/C06-Strategy-Design-and-Function-Oriented-Strategy/</id>
    <published>2018-04-22T13:40:21.000Z</published>
    <updated>2018-04-22T13:41:03.190Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Strategy-Design"><a href="#Strategy-Design" class="headerlink" title="Strategy Design"></a>Strategy Design</h3><p><strong>promotion.py</strong><br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABC, abstractmethod</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">Customer=namedtuple(<span class="string">'Customer'</span>, <span class="string">'name fidelity'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,product,quantity,price)</span>:</span></span><br><span class="line">        self.product=product</span><br><span class="line">        self.quantity=quantity</span><br><span class="line">        self.price=price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.price * self.quantity</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, customer,cart, promotion=None)</span>:</span></span><br><span class="line">        self.customer=customer</span><br><span class="line">        self.cart=list(cart)</span><br><span class="line">        self.promotion=promotion</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self,<span class="string">'__total'</span>):</span><br><span class="line">            self.__total=sum(item.total() <span class="keyword">for</span> item <span class="keyword">in</span> self.cart)</span><br><span class="line">        <span class="keyword">return</span> self.__total</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">due</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.promotion <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            discount=<span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            discount=self.promotion.discount(self)</span><br><span class="line">        <span class="keyword">return</span> self.total()- discount</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        fmt=<span class="string">'&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;'</span></span><br><span class="line">        <span class="keyword">return</span> fmt.format(self.total, self.due())</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promotion</span><span class="params">(ABC)</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discount</span><span class="params">(self,order)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        return discount as a positive dollar amount</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FidelityPromo</span><span class="params">(Promotion)</span>:</span></span><br><span class="line">    <span class="string">''' </span></span><br><span class="line"><span class="string">    5% discount for customers with 1000 or more fidelity points</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discount</span><span class="params">(self, order)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> order.total() *<span class="number">0.05</span> <span class="keyword">if</span> order.customer.fidelity &gt;=<span class="number">1000</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BulkItemPromo</span><span class="params">(Promotion)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    10% discount for each LineItem with 20 or more units</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discount</span><span class="params">(self, order)</span>:</span></span><br><span class="line">        discount=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> order.cart:</span><br><span class="line">            <span class="keyword">if</span> item.quantity &gt;= <span class="number">20</span>:</span><br><span class="line">                discount+= item.total() * <span class="number">0.1</span></span><br><span class="line">        <span class="keyword">return</span> discount</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LargeOrderPromo</span><span class="params">(Promotion)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    "7% discount for orders with 10 or more distinct items</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">discount</span><span class="params">(self, order)</span>:</span></span><br><span class="line">        distinct_items=&#123;item.products <span class="keyword">for</span> item <span class="keyword">in</span> order.cart&#125;</span><br><span class="line">        <span class="keyword">if</span> len(distinct_items) &gt; <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> order.total() * <span class="number">0.07</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></p><p><strong>Sample usage of Order class with different promotions applied</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>joe = Customer(<span class="string">'John Doe'</span>, <span class="number">0</span>)</span><br><span class="line"> &gt;&gt;&gt; ann = Customer(<span class="string">'Ann Smith'</span>, <span class="number">1100</span>)</span><br><span class="line"> &gt;&gt;&gt; cart = [LineItem(<span class="string">'banana'</span>, <span class="number">4</span>, <span class="number">.5</span>),</span><br><span class="line"> ... LineItem(<span class="string">'apple'</span>, <span class="number">10</span>, <span class="number">1.5</span>),</span><br><span class="line"> ... LineItem(<span class="string">'watermellon'</span>, <span class="number">5</span>, <span class="number">5.0</span>)]</span><br><span class="line"> &gt;&gt;&gt; Order(joe, cart, FidelityPromo())</span><br><span class="line"> &lt;Order total: <span class="number">42.00</span> due: <span class="number">42.00</span>&gt;</span><br><span class="line"> &gt;&gt;&gt; Order(ann, cart, FidelityPromo())</span><br><span class="line"> &lt;Order total: <span class="number">42.00</span> due: <span class="number">39.90</span>&gt;</span><br><span class="line"> &gt;&gt;&gt; banana_cart = [LineItem(<span class="string">'banana'</span>, <span class="number">30</span>, <span class="number">.5</span>),</span><br><span class="line"> ... LineItem(<span class="string">'apple'</span>, <span class="number">10</span>, <span class="number">1.5</span>)]</span><br><span class="line"> &gt;&gt;&gt; Order(joe, banana_cart, BulkItemPromo())</span><br><span class="line"> &lt;Order total: <span class="number">30.00</span> due: <span class="number">28.50</span>&gt;</span><br><span class="line"> &gt;&gt;&gt; long_order = [LineItem(str(item_code), <span class="number">1</span>, <span class="number">1.0</span>)</span><br><span class="line"> ... <span class="keyword">for</span> item_code <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"> &gt;&gt;&gt; Order(joe, long_order, LargeOrderPromo())</span><br><span class="line"> &lt;Order total: <span class="number">10.00</span> due: <span class="number">9.30</span>&gt;</span><br><span class="line"> &gt;&gt;&gt; Order(joe, cart, LargeOrderPromo())</span><br><span class="line"> &lt;Order total: <span class="number">42.00</span> due: <span class="number">42.00</span>&gt;</span><br></pre></td></tr></table></figure></p><h3 id="Function-Oriented-Strategy"><a href="#Function-Oriented-Strategy" class="headerlink" title="Function-Oriented Strategy"></a>Function-Oriented Strategy</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">Customer = namedtuple(<span class="string">'Customer'</span>, <span class="string">'name fidelity'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineItem</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, product, quantity, price)</span>:</span></span><br><span class="line">        self.product = product</span><br><span class="line">        self.quantity = quantity</span><br><span class="line">        self.price = price</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.price * self.quantity</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span>:</span>  <span class="comment"># the Context</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, customer, cart, promotion=None)</span>:</span></span><br><span class="line">        self.customer = customer</span><br><span class="line">        self.cart = list(cart)</span><br><span class="line">        self.promotion = promotion</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">total</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'__total'</span>):</span><br><span class="line">            self.__total = sum(item.total() <span class="keyword">for</span> item <span class="keyword">in</span> self.cart)</span><br><span class="line">        <span class="keyword">return</span> self.__total</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">due</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.promotion <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            discount = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            discount = self.promotion(self)  <span class="comment"># &lt;1&gt;</span></span><br><span class="line">        <span class="keyword">return</span> self.total() - discount</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        fmt = <span class="string">'&lt;Order total: &#123;:.2f&#125; due: &#123;:.2f&#125;&gt;'</span></span><br><span class="line">        <span class="keyword">return</span> fmt.format(self.total(), self.due())</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;2&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fidelity_promo</span><span class="params">(order)</span>:</span>  <span class="comment"># &lt;3&gt;</span></span><br><span class="line">    <span class="string">"""5% discount for customers with 1000 or more fidelity points"""</span></span><br><span class="line">    <span class="keyword">return</span> order.total() * <span class="number">.05</span> <span class="keyword">if</span> order.customer.fidelity &gt;= <span class="number">1000</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bulk_item_promo</span><span class="params">(order)</span>:</span></span><br><span class="line">    <span class="string">"""10% discount for each LineItem with 20 or more units"""</span></span><br><span class="line">    discount = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> order.cart:</span><br><span class="line">        <span class="keyword">if</span> item.quantity &gt;= <span class="number">20</span>:</span><br><span class="line">            discount += item.total() * <span class="number">.1</span></span><br><span class="line">    <span class="keyword">return</span> discount</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">large_order_promo</span><span class="params">(order)</span>:</span></span><br><span class="line">    <span class="string">"""7% discount for orders with 10 or more distinct items"""</span></span><br><span class="line">    distinct_items = &#123;item.product <span class="keyword">for</span> item <span class="keyword">in</span> order.cart&#125;</span><br><span class="line">    <span class="keyword">if</span> len(distinct_items) &gt;= <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> order.total() * <span class="number">.07</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># END STRATEGY</span></span><br></pre></td></tr></table></figure><p><strong>Sample usage of Order class with promotions as functions</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>joe = Customer(<span class="string">'John Doe'</span>, <span class="number">0</span>)</span><br><span class="line"> &gt;&gt;&gt; ann = Customer(<span class="string">'Ann Smith'</span>, <span class="number">1100</span>)</span><br><span class="line"> &gt;&gt;&gt; cart = [LineItem(<span class="string">'banana'</span>, <span class="number">4</span>, <span class="number">.5</span>),</span><br><span class="line"> ... LineItem(<span class="string">'apple'</span>, <span class="number">10</span>, <span class="number">1.5</span>),</span><br><span class="line"> ... LineItem(<span class="string">'watermellon'</span>, <span class="number">5</span>, <span class="number">5.0</span>)]</span><br><span class="line"> &gt;&gt;&gt; Order(joe, cart, fidelity_promo)</span><br><span class="line"> &lt;Order total: <span class="number">42.00</span> due: <span class="number">42.00</span>&gt;</span><br></pre></td></tr></table></figure></p><h3 id="best-promo"><a href="#best-promo" class="headerlink" title="best_promo"></a>best_promo</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">promos=[fidelity_promo, bulk_item_promo, large_order_promo]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_promo</span><span class="params">(order)</span>:</span></span><br><span class="line"> <span class="keyword">return</span> max(promo(order) <span class="keyword">for</span> promo <span class="keyword">in</span> promos)</span><br></pre></td></tr></table></figure><h3 id="globals"><a href="#globals" class="headerlink" title="globals()"></a>globals()</h3><p><strong>globals()</strong><br>Return a dictionary representing the current global symbol table. This is always the dictionary of the current module (inside a function or method, this is the module where it is defined, not the module from which it is called).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">promos=[globals()[name] <span class="keyword">for</span> name <span class="keyword">in</span> globals() <span class="keyword">if</span> name.endswith(<span class="string">'_promo'</span>) <span class="keyword">and</span> name != <span class="string">'best_promo'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_promo</span><span class="params">(order)</span>:</span></span><br><span class="line"> <span class="keyword">return</span> max(promo(order) <span class="keyword">for</span> promo <span class="keyword">in</span> promos)</span><br></pre></td></tr></table></figure><h3 id="create-a-module-and-put-all-the-strategy-functions-there-except-for-best-promo"><a href="#create-a-module-and-put-all-the-strategy-functions-there-except-for-best-promo" class="headerlink" title="create a module and put all the strategy functions there, except for best_promo"></a>create a module and put all the strategy functions there, except for best_promo</h3><p>The list of strategy functions is built by introspection of a separate module called <strong>promotions</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">promos=[func <span class="keyword">for</span> name, func <span class="keyword">in</span> inspect.getmembsers(promotions, inspect.isfunction)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">best_promo</span><span class="params">(order)</span>:</span></span><br><span class="line"> <span class="keyword">return</span> max(promo(order) <span class="keyword">for</span> promo <span class="keyword">in</span> promos)</span><br></pre></td></tr></table></figure><p>The function <strong>inspect.getmembers</strong>  returns the attributes of an object—in this case, the <strong>promotions</strong>  module—optionally filtered by a predicate (a <strong>boolean</strong> function). We use <strong>inspect.isfunction</strong>  to get only the functions from the module.</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Strategy-Design&quot;&gt;&lt;a href=&quot;#Strategy-Design&quot; class=&quot;headerlink&quot; title=&quot;Strategy Design&quot;&gt;&lt;/a&gt;Strategy Design&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;promotion.py&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C05_functional programming</title>
    <link href="blog.whistlestop.ml/2018/04/22/C05-functional-programming/"/>
    <id>blog.whistlestop.ml/2018/04/22/C05-functional-programming/</id>
    <published>2018-04-22T13:39:26.000Z</published>
    <updated>2018-04-22T13:39:54.335Z</updated>
    
    <content type="html"><![CDATA[<h3 id="The-operator-Module"><a href="#The-operator-Module" class="headerlink" title="The operator Module"></a>The operator Module</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> a,b : a*b, ranage(<span class="number">1</span>,n+<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>To save you the trouble of writing trivial anonymous functions like <strong>lambda a, b:a*b</strong>, the <strong>operator</strong> module provides function equivalents for dozens of arithmetic operators.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator  <span class="keyword">import</span> mul</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> reduce(mul, range(<span class="number">1</span>,n+<span class="number">1</span>))</span><br></pre></td></tr></table></figure></p><a id="more"></a><h4 id="itemgetter-and-attrgetter"><a href="#itemgetter-and-attrgetter" class="headerlink" title="itemgetter and attrgetter"></a>itemgetter and attrgetter</h4><p><strong><em>itemgetter</em></strong> </p><p><strong>itemgetter(1)</strong> does the same as <strong>lambda fields: fields[1]</strong>: create a function that, given a <strong>collection</strong>, returns the item at index 1.</p><p>Because <strong>itemgetter</strong> uses the <strong>[ ]</strong> operator, it supports not only sequences but also mappings and<br>any class that implements <strong>__getitem__</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>metro_data = [</span><br><span class="line"><span class="meta">... </span> (<span class="string">'Tokyo'</span>, <span class="string">'JP'</span>, <span class="number">36.933</span>, (<span class="number">35.689722</span>, <span class="number">139.691667</span>)),</span><br><span class="line"><span class="meta">... </span> (<span class="string">'Delhi NCR'</span>, <span class="string">'IN'</span>, <span class="number">21.935</span>, (<span class="number">28.613889</span>, <span class="number">77.208889</span>)),</span><br><span class="line"><span class="meta">... </span> ]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> city <span class="keyword">in</span> sorted(metro_data, key=itemgetter(<span class="number">1</span>)):</span><br><span class="line"><span class="meta">... </span>print(city)</span><br><span class="line">(<span class="string">'Delhi NCR'</span>, <span class="string">'IN'</span>, <span class="number">21.935</span>, (<span class="number">28.613889</span>, <span class="number">77.208889</span>))</span><br><span class="line">(<span class="string">'Tokyo'</span>, <span class="string">'JP'</span>, <span class="number">36.933</span>, (<span class="number">35.689722</span>, <span class="number">139.691667</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#  pass multiple index arguments to itemgetter, the function it builds will return</span></span><br><span class="line">tuples <span class="keyword">with</span> the extracted values</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cc_name = itemgetter(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> city <span class="keyword">in</span> metro_data:</span><br><span class="line"><span class="meta">... </span>print(cc_name(city))</span><br><span class="line">(<span class="string">'JP'</span>, <span class="string">'Tokyo'</span>)</span><br><span class="line">(<span class="string">'IN'</span>, <span class="string">'Delhi NCR'</span>)</span><br></pre></td></tr></table></figure><p><strong><em>attrgetter</em></strong><br> <strong>attrgetter</strong> creates functions to extract object attributes by name. If you pass <strong>attrgetter</strong> several<br>attribute names as arguments, it also returns a tuple of values. In addition, if any argument name contains a <strong>.</strong> (dot), <strong>attrgetter</strong> navigates through nested objects to retrieve the attribute.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>LatLong = namedtuple(<span class="string">'LatLong'</span>, <span class="string">'lat long'</span>) <span class="comment">#</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Metropolis = namedtuple(<span class="string">'Metropolis'</span>, <span class="string">'name cc pop coord'</span>) <span class="comment"># </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>metro_areas = [Metropolis(name, cc, pop, LatLong(lat, long)) <span class="comment">#</span></span><br><span class="line"><span class="meta">... </span><span class="keyword">for</span> name, cc, pop, (lat, long) <span class="keyword">in</span> metro_data]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>metro_areas[<span class="number">0</span>]</span><br><span class="line">Metropolis(name=<span class="string">'Tokyo'</span>, cc=<span class="string">'JP'</span>, pop=<span class="number">36.933</span>, coord=LatLong(lat=<span class="number">35.689722</span>,</span><br><span class="line">long=<span class="number">139.691667</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>metro_areas[<span class="number">0</span>].coord.lat <span class="comment">#Reach into element metro_areas[0] to get its latitude.</span></span><br><span class="line"><span class="number">35.689722</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> attrgetter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name_lat = attrgetter(<span class="string">'name'</span>, <span class="string">'coord.lat'</span>)</span><br><span class="line"> <span class="comment">#Define an attrgetter to retrieve the name and the coord.lat nested attribute</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> city <span class="keyword">in</span> sorted(metro_areas, key=attrgetter(<span class="string">'coord.lat'</span>)): </span><br><span class="line"><span class="comment"># Use attrgetter again to sort list of cities by latitude.</span></span><br><span class="line"><span class="meta">... </span>print(name_lat(city)) <span class="comment">#</span></span><br><span class="line">...</span><br><span class="line">(<span class="string">'Sao Paulo'</span>, <span class="number">-23.547778</span>)</span><br><span class="line">(<span class="string">'Mexico City'</span>, <span class="number">19.433333</span>)</span><br><span class="line">(<span class="string">'Delhi NCR'</span>, <span class="number">28.613889</span>)</span><br><span class="line">(<span class="string">'Tokyo'</span>, <span class="number">35.689722</span>)</span><br><span class="line">(<span class="string">'New York-Newark'</span>, <span class="number">40.808611</span>)</span><br></pre></td></tr></table></figure></p><p><strong>methodcaller</strong><br><strong>methodcaller</strong> creates a function on the fly. The function it creates calls a method by name on the<br>object given as argument.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> methodcaller</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'The time has come'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>upcase = methodcaller(<span class="string">'upper'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>upcase(s)</span><br><span class="line"><span class="string">'THE TIME HAS COME'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hiphenate = methodcaller(<span class="string">'replace'</span>, <span class="string">' '</span>, <span class="string">'-'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hiphenate(s)</span><br><span class="line"><span class="string">'The-time-has-come'</span></span><br></pre></td></tr></table></figure><h3 id="functools-partial"><a href="#functools-partial" class="headerlink" title="functools.partial"></a>functools.partial</h3><p><strong>functools.partial</strong> is a higher-order function that allows partial application of a function. Given a function, a partial application produces a new <strong>callable</strong> with some of the arguments of the original function fixed.</p><p><strong>partial</strong> takes a callable as first argument, followed by an arbitrary number of positional and keyword<br>arguments to bind.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>triple=partial(mul, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>triple(<span class="number">7</span>)</span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(triple, range(<span class="number">1</span>,<span class="number">10</span>)))</span><br><span class="line">[<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">27</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tag</span><br><span class="line">&lt;function tag at <span class="number">0x03DFA300</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>picture=partial(tag, <span class="string">'img'</span>, cls=<span class="string">'pic-frame'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>picture</span><br><span class="line">functools.partial(&lt;function tag at <span class="number">0x03DFA300</span>&gt;, <span class="string">'img'</span>, cls=<span class="string">'pic-frame'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>picture.func</span><br><span class="line">&lt;function tag at <span class="number">0x03DFA300</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>picture.args</span><br><span class="line">(<span class="string">'img'</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>picture.keywords</span><br><span class="line">&#123;<span class="string">'cls'</span>: <span class="string">'pic-frame'</span>&#125;</span><br></pre></td></tr></table></figure><p>The <strong>functools.partialmethod</strong> function (new in Python 3.4) does the same job as <strong>partial</strong>, but is<br>designed to work with <strong>methods</strong>.</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;The-operator-Module&quot;&gt;&lt;a href=&quot;#The-operator-Module&quot; class=&quot;headerlink&quot; title=&quot;The operator Module&quot;&gt;&lt;/a&gt;The operator Module&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; functools &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; reduce&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; reduce(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; a,b : a*b, ranage(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;To save you the trouble of writing trivial anonymous functions like &lt;strong&gt;lambda a, b:a*b&lt;/strong&gt;, the &lt;strong&gt;operator&lt;/strong&gt; module provides function equivalents for dozens of arithmetic operators.&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; operator  &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; mul&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(n)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;... &lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; reduce(mul, range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C05_functions </title>
    <link href="blog.whistlestop.ml/2018/04/22/C05-functions/"/>
    <id>blog.whistlestop.ml/2018/04/22/C05-functions/</id>
    <published>2018-04-22T13:38:34.000Z</published>
    <updated>2018-04-22T13:39:02.549Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Higher-Order-Functions"><a href="#Higher-Order-Functions" class="headerlink" title="Higher-Order Functions"></a>Higher-Order Functions</h3><h4 id="Replacements-for-map-filter-and-reduce"><a href="#Replacements-for-map-filter-and-reduce" class="headerlink" title="Replacements for map, filter, and reduce"></a>Replacements for <strong>map</strong>, <strong>filter</strong>, and <strong>reduce</strong></h4><p>Functional languages commonly offer the <strong>map</strong>, <strong>filter</strong>, and <strong>reduce</strong> higher-order functions<br>(sometimes with different names). A <strong>listcomp</strong> or a <strong>genexp</strong> does the job of <strong>map</strong> and <strong>filter</strong><br>combined, but is more readable.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(fact, range(<span class="number">6</span>)))</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">120</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[fact(n) <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">6</span>)]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">24</span>, <span class="number">120</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(factorial, filter(<span class="keyword">lambda</span> n: n % <span class="number">2</span>, range(<span class="number">6</span>))))</span><br><span class="line">[<span class="number">1</span>, <span class="number">6</span>, <span class="number">120</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[factorial(n) <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">6</span>) <span class="keyword">if</span> n % <span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">6</span>, <span class="number">120</span>]</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>map</strong> and <strong>filter</strong> return generators—a form of <strong>iterator</strong>—so their direct substitute is now a <strong>generator</strong> expression .</p><p>The <strong>reduce</strong> function was demoted from a built-in in Python 2 to the <strong>functools</strong> module in Python 3.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> reduce <span class="comment">#Starting with Python 3.0, reduce is not a built-in</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> operator <span class="keyword">import</span> add</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(add, range(<span class="number">100</span>))</span><br><span class="line"><span class="number">4950</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sum(range(<span class="number">100</span>))</span><br></pre></td></tr></table></figure></p><p>Other reducing built-ins are <strong>all</strong> and <strong>any</strong>:<br><strong>all(iterable)</strong><br>Returns True if every element of the <strong>iterable</strong> is truthy; all([ ]) returns True.<br><strong>any(iterable)</strong><br>Returns True if any element of the <strong>iterable</strong> is truthy; any([ ]) returns False.</p><h3 id="Anonymous-Functions"><a href="#Anonymous-Functions" class="headerlink" title="Anonymous Functions"></a>Anonymous Functions</h3><p>The best use of anonymous functions is in the context of an argument list.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fruits = [<span class="string">'strawberry'</span>, <span class="string">'fig'</span>, <span class="string">'apple'</span>, <span class="string">'cherry'</span>, <span class="string">'raspberry'</span>, <span class="string">'banana'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(fruits, key=<span class="keyword">lambda</span> word: word[::<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><h3 id="Callable-Objects"><a href="#Callable-Objects" class="headerlink" title="Callable Objects"></a>Callable Objects</h3><p>The <strong>call</strong> operator (i.e., ()) may be applied to other objects beyond user-defined functions. To determine<br>whether an object is <strong>callable</strong>, use the <strong>callable()</strong> built-in function.</p><h4 id="User-Defined-Callable-Types"><a href="#User-Defined-Callable-Types" class="headerlink" title="User-Defined Callable Types"></a>User-Defined Callable Types</h4><p>Arbitrary Python objects may also be made to behave like functions. Implementing a <strong>__call__</strong><br>instance method is all it takes.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BingoCage</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, items)</span>:</span></span><br><span class="line">        self._items=list(items)</span><br><span class="line">        random.shuffle(self._items)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pick</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self._items.pop()</span><br><span class="line">        <span class="keyword">except</span> IndexError:</span><br><span class="line">            <span class="keyword">raise</span> LookupError(<span class="string">'pick from empty BingoCage'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.pick()</span><br></pre></td></tr></table></figure><p>A class implementing *__call__**is an easy way to create function-like objects that have<br>some internal state that must be kept across invocations. An example is a decorator. Decorators must be<br>functions, but it is sometimes convenient to be able to “remember” something between calls of the<br>decorator.</p><h4 id="Function-Introspection"><a href="#Function-Introspection" class="headerlink" title="Function Introspection"></a>Function Introspection</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(factorial)</span><br><span class="line">[<span class="string">'__annotations__'</span>, <span class="string">'__call__'</span>, <span class="string">'__class__'</span>, <span class="string">'__closure__'</span>, <span class="string">'__code__'</span>, <span class="string">'__defaults__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__dict__'</span>, </span><br><span class="line"><span class="string">'__dir__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__get__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__globals__'</span>, <span class="string">'__gt__'</span>, </span><br><span class="line"><span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__kwdefaults__'</span>, <span class="string">'__le__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__module__'</span>, <span class="string">'__name__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, </span><br><span class="line"><span class="string">'__qualname__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, </span><br><span class="line"><span class="string">'__subclasshook__'</span>]</span><br></pre></td></tr></table></figure><h5 id="dict"><a href="#dict" class="headerlink" title="__dict__"></a>__dict__</h5><p>Like the instances of a plain user-defined class, a function uses the<strong>__dict__</strong>attribute to store user<br>attributes assigned to it.</p><p><em>Listing attributes of functions that don’t exist in plain instances</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span> <span class="keyword">pass</span> <span class="comment">#</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = C() <span class="comment">#</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span> <span class="keyword">pass</span> <span class="comment">#</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(set(dir(func)) - set(dir(obj))) <span class="comment">#</span></span><br><span class="line">[<span class="string">'__annotations__'</span>, <span class="string">'__call__'</span>, <span class="string">'__closure__'</span>, <span class="string">'__code__'</span>, <span class="string">'__defaults__'</span>,</span><br><span class="line"><span class="string">'__get__'</span>, <span class="string">'__globals__'</span>, <span class="string">'__kwdefaults__'</span>, <span class="string">'__name__'</span>, <span class="string">'__qualname__'</span>]</span><br></pre></td></tr></table></figure></p><h5 id="Positional-and-Keyword-Only-Parameters"><a href="#Positional-and-Keyword-Only-Parameters" class="headerlink" title="Positional and  Keyword-Only Parameters"></a>Positional and  Keyword-Only Parameters</h5><p>Using* and ** to “explode” <strong>iterables</strong> and <strong>mappings</strong> into separate arguments whenwe call a function.</p><p><strong>__defaults__</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clip</span><span class="params">(text, max_len=<span class="number">80</span>)</span>:</span></span><br><span class="line"> <span class="string">"""Return text clipped at the last space before or after max_len</span></span><br><span class="line"><span class="string"> """</span></span><br><span class="line"> end = <span class="keyword">None</span></span><br><span class="line"> <span class="keyword">if</span> len(text) &gt; max_len:</span><br><span class="line"> space_before = text.rfind(<span class="string">' '</span>, <span class="number">0</span>, max_len)</span><br><span class="line"> <span class="keyword">if</span> space_before &gt;= <span class="number">0</span>:</span><br><span class="line"> end = space_before</span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line"> space_after = text.rfind(<span class="string">' '</span>, max_len)</span><br><span class="line"> <span class="keyword">if</span> space_after &gt;= <span class="number">0</span>:</span><br><span class="line"> end = space_after</span><br><span class="line"> <span class="keyword">if</span> end <span class="keyword">is</span> <span class="keyword">None</span>: <span class="comment"># no spaces were found</span></span><br><span class="line"> end = len(text)</span><br><span class="line"> <span class="keyword">return</span> text[:end].rstrip()</span><br></pre></td></tr></table></figure><p>The values of <strong>__defaults__</strong>, <strong>__code__.co_varnames</strong>, and<strong>__code__.co_argcount</strong> for the clip function:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from clip import clip</span><br><span class="line">&gt;&gt;&gt; clip.__defaults__</span><br><span class="line">(80,)</span><br><span class="line">&gt;&gt;&gt; clip.__code__ # doctest: +ELLIPSIS</span><br><span class="line">&lt;code object clip at 0x...&gt;</span><br><span class="line">&gt;&gt;&gt; clip.__code__.co_varnames</span><br><span class="line">(&apos;text&apos;, &apos;max_len&apos;, &apos;end&apos;, &apos;space_before&apos;, &apos;space_after&apos;)</span><br><span class="line">&gt;&gt;&gt; clip.__code__.co_argcount</span><br><span class="line">2</span><br></pre></td></tr></table></figure></p><p>Extracting the function signature:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> clip <span class="keyword">import</span> clip</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> inspect <span class="keyword">import</span> signature</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sig = signature(clip)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sig <span class="comment"># doctest: +ELLIPSIS</span></span><br><span class="line">&lt;inspect.Signature object at <span class="number">0</span>x...&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>str(sig)</span><br><span class="line"><span class="string">'(text, max_len=80)'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name, param <span class="keyword">in</span> sig.parameters.items():</span><br><span class="line"><span class="meta">... </span>print(param.kind, <span class="string">':'</span>, name, <span class="string">'='</span>, param.default)</span><br><span class="line">...</span><br><span class="line">POSITIONAL_OR_KEYWORD : text = &lt;<span class="class"><span class="keyword">class</span> '<span class="title">inspect</span>.<span class="title">_empty</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">POSITIONAL_OR_KEYWORD</span> :</span> max_len = <span class="number">80</span></span><br></pre></td></tr></table></figure></p><p>The <strong>kind</strong> attribute holds one of five possible values from the <strong>_ParameterKind</strong> class:<br><strong>POSITIONAL_OR_KEYWORD</strong><br>A parameter that may be passed as a positional or as a keyword argument (most Python function<br>parameters are of this kind).<br><strong>VAR_POSITIONAL</strong><br>A tuple of positional parameters.<br><strong>VAR_KEYWORD</strong><br>A dict of keyword parameters.<br><strong>KEYWORD_ONLY</strong><br>A keyword-only parameter (new in Python 3).<br><strong>POSITIONAL_ONLY</strong><br>A positional-only parameter; currently unsupported by Python function declaration syntax.</p><p><strong>inspect.Signature</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tag</span><span class="params">(name,*content, cls=None, **attrs)</span>:</span> <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> inspect</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sig = inspect.signature(tag)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_tag = &#123;<span class="string">'name'</span>: <span class="string">'img'</span>, <span class="string">'title'</span>: <span class="string">'Sunset Boulevard'</span>,</span><br><span class="line"><span class="meta">... </span><span class="string">'src'</span>: <span class="string">'sunset.jpg'</span>, <span class="string">'cls'</span>: <span class="string">'framed'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bound_args = sig.bind(**my_tag)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bound_args</span><br><span class="line">&lt;inspect.BoundArguments object at <span class="number">0</span>x...&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name, value <span class="keyword">in</span> bound_args.arguments.items(): </span><br><span class="line"><span class="comment">#Iterate over the items in bound_args.arguments, which is an OrderedDict, to display the names and </span></span><br><span class="line"><span class="comment"># values of the arguments.</span></span><br><span class="line"><span class="meta">... </span>print(name, <span class="string">'='</span>, value)</span><br><span class="line">...</span><br><span class="line">name = img</span><br><span class="line">cls = framed</span><br><span class="line">attrs = &#123;<span class="string">'title'</span>: <span class="string">'Sunset Boulevard'</span>, <span class="string">'src'</span>: <span class="string">'sunset.jpg'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> my_tag[<span class="string">'name'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bound_args = sig.bind(**my_tag)</span><br><span class="line">Traceback (most recent call last):</span><br></pre></td></tr></table></figure><h3 id="Function-Annotations"><a href="#Function-Annotations" class="headerlink" title="Function Annotations"></a>Function Annotations</h3><p>Each argument in the function declaration may have an annotation expression preceded by <strong>:</strong>. If there is a default value, the annotation goes between the argument name and the <strong>=</strong> sign. To annotate the return value, add <strong>-&gt;</strong> and another expression between the <strong>)</strong> and the <strong>:</strong> at the tail of the function declaration. The expressions may be of any type. </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># clip_annot.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clip</span><span class="params">(text:str, max_len:<span class="string">'int &gt; 0'</span> =<span class="number">80</span>)</span> -&gt;str:</span></span><br><span class="line">    end=<span class="keyword">None</span></span><br><span class="line">    <span class="keyword">if</span> len(text) &gt; max_len:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> clip_annot <span class="keyword">import</span> clip</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>clip.__annotations__</span><br><span class="line">&#123;'text': &lt;class 'str'&gt;, 'max_len': 'int &gt; 0', 'return': &lt;class 'str'&gt;&#125;</span><br></pre></td></tr></table></figure><h4 id="Extracting-annotations-from-the-function-signature"><a href="#Extracting-annotations-from-the-function-signature" class="headerlink" title="Extracting annotations from the function signature"></a>Extracting annotations from the function signature</h4><p>The signature function returns a Signature object, which has a return_annotation attribute and a<br>parameters dictionary mapping parameter names to Parameter objects. Each Parameter object has its<br>own annotation attribute. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> clip_annot <span class="keyword">import</span> clip</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> inspect <span class="keyword">import</span> signature</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sig = signature(clip)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sig.return_annotation</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">for</span> <span class="title">param</span> <span class="title">in</span> <span class="title">sig</span>.<span class="title">parameters</span>.<span class="title">values</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>note = repr(param.annotation).ljust(<span class="number">13</span>)</span><br><span class="line"><span class="meta">... </span>print(note, <span class="string">':'</span>, param.name, <span class="string">'='</span>, param.default)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt; :</span> text = &lt;<span class="class"><span class="keyword">class</span> '<span class="title">inspect</span>.<span class="title">_empty</span>'&gt;</span></span><br><span class="line"><span class="class">'<span class="title">int</span> &gt; 0' :</span> max_len = <span class="number">80</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Higher-Order-Functions&quot;&gt;&lt;a href=&quot;#Higher-Order-Functions&quot; class=&quot;headerlink&quot; title=&quot;Higher-Order Functions&quot;&gt;&lt;/a&gt;Higher-Order Functions&lt;/h3&gt;&lt;h4 id=&quot;Replacements-for-map-filter-and-reduce&quot;&gt;&lt;a href=&quot;#Replacements-for-map-filter-and-reduce&quot; class=&quot;headerlink&quot; title=&quot;Replacements for map, filter, and reduce&quot;&gt;&lt;/a&gt;Replacements for &lt;strong&gt;map&lt;/strong&gt;, &lt;strong&gt;filter&lt;/strong&gt;, and &lt;strong&gt;reduce&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;Functional languages commonly offer the &lt;strong&gt;map&lt;/strong&gt;, &lt;strong&gt;filter&lt;/strong&gt;, and &lt;strong&gt;reduce&lt;/strong&gt; higher-order functions&lt;br&gt;(sometimes with different names). A &lt;strong&gt;listcomp&lt;/strong&gt; or a &lt;strong&gt;genexp&lt;/strong&gt; does the job of &lt;strong&gt;map&lt;/strong&gt; and &lt;strong&gt;filter&lt;/strong&gt;&lt;br&gt;combined, but is more readable.&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;list(map(fact, range(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;120&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[fact(n) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;120&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;list(map(factorial, filter(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; n: n % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, range(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;120&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;[factorial(n) &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; n &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;120&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C04_bytes, bytesarray, struct module, memory views</title>
    <link href="blog.whistlestop.ml/2018/04/22/C04-bytes-bytesarray-struct-module-memory-views/"/>
    <id>blog.whistlestop.ml/2018/04/22/C04-bytes-bytesarray-struct-module-memory-views/</id>
    <published>2018-04-22T13:37:42.000Z</published>
    <updated>2018-04-22T13:38:15.558Z</updated>
    
    <content type="html"><![CDATA[<p>The Unicode standard explicitly separates the identity of characters from specific byte representations:</p><ul><li>The identity of a character</li><li>The actual bytes that represent a character depend on the encoding in use.</li></ul><p>Although binary sequences are really sequences of integers, their literal notation reflects the fact that ASCII text is often embedded in them. Therefore, three different displays are used, depending on each byte value:<br><a id="more"></a></p><ul><li>For bytes in the printable ASCII range—from space to ~—the ASCII character itself is used.</li><li>For bytes corresponding to tab, newline, carriage return, and \, the escape sequences \t, \n, \r, and \ are used.</li><li>For every other byte value, a hexadecimal escape sequence is used (e.g., \x00 is the  null byte).</li></ul><p>Binary sequences have a class method that str doesn’t have, called fromhex, which builds a binary sequence by parsing pairs of hex digits optionally separated by spaces:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytes.fromhex(<span class="string">'31 4B CE A9'</span>)</span><br><span class="line"><span class="string">b'1K\xce\xa9'</span></span><br></pre></td></tr></table></figure></p><p>Building a binary sequence from a buffer-like object is a low-level operation that may involve type casting.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> array</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers = array.array(<span class="string">'h'</span>, [<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>octets = bytes(numbers)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>octets</span><br><span class="line"><span class="string">b'\xfe\xff\xff\xff\x00\x00\x01\x00\x02\x00'</span></span><br></pre></td></tr></table></figure></p><h3 id="Structs-and-Memory-Views"><a href="#Structs-and-Memory-Views" class="headerlink" title="Structs and Memory Views"></a>Structs and Memory Views</h3><p>The struct module provides functions to parse packed bytes into a tuple of fields of different types and to perform the opposite conversion, from a tuple into packed bytes. Struct is used with bytes, bytearray, and memoryview objects.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> struct</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fmt = <span class="string">'&lt;3s3sHH'</span> <span class="comment">#struct format: &lt; little-endian; 3s3s two sequences of 3 bytes; HH two 16-bit</span></span><br><span class="line">integers.</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> open(<span class="string">'filter.gif'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line"><span class="meta">... </span>img = memoryview(fp.read()) <span class="comment">#</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>header = img[:<span class="number">10</span>] <span class="comment"># another memoryview by slicing the first one; no bytes are copied here</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bytes(header) <span class="comment">#Convert to bytes for display only; 10 bytes are copied here</span></span><br><span class="line"><span class="string">b'GIF89a+\x02\xe6\x00'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>struct.unpack(fmt, header) <span class="comment">#Unpack memoryview into tuple of: type, version, width, and height</span></span><br><span class="line">(<span class="string">b'GIF'</span>, <span class="string">b'89a'</span>, <span class="number">555</span>, <span class="number">230</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> header <span class="comment">#Delete references to release the memory associated with the memoryview</span></span><br><span class="line">instances</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> img</span><br></pre></td></tr></table></figure><h3 id="Discover-the-Encoding-of-a-Byte-Sequence"><a href="#Discover-the-Encoding-of-a-Byte-Sequence" class="headerlink" title="Discover the Encoding of a Byte Sequence"></a>Discover the Encoding of a Byte Sequence</h3><p>If you omit the encoding argument when opening a file, the default is given by locale.getpreferredencoding() (‘cp1252’ on Windows). It is the default for opening text files and for sys.stdout/stdin/stderr when they are redirected to files.</p><p>The encoding of sys.stdout/stdin/stderr is given by the PYTHONIOENCODING environment variable, if present, otherwise it is either inherited from the console or defined by locale.getpreferredencoding() if the output/input is redirected to/from a file.</p><p>sys.getdefaultencoding() is used internally by Python to convert binary data to/from str; this happens less often in Python 3, but still happens.</p><p>sys.getfilesystemencoding() is used to encode/decode filenames (not file contents). It is used when open() gets a str argument for the filename; if the filename is given as a bytes argument, it is passed unchanged to the OS API. The Python Unicode HOWTO says: “on Windows, Python uses the name mbcs to refer to whatever the currently configured encoding is.” The acronym MBCS stands for Multi Byte Character Set, which for Microsoft are the legacy variable-width encodings like gb2312 or Shift_JIS, but not UTF-8.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The Unicode standard explicitly separates the identity of characters from specific byte representations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The identity of a character&lt;/li&gt;
&lt;li&gt;The actual bytes that represent a character depend on the encoding in use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although binary sequences are really sequences of integers, their literal notation reflects the fact that ASCII text is often embedded in them. Therefore, three different displays are used, depending on each byte value:&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C03_set, hash tables</title>
    <link href="blog.whistlestop.ml/2018/04/22/C03-set-hash-tables/"/>
    <id>blog.whistlestop.ml/2018/04/22/C03-set-hash-tables/</id>
    <published>2018-04-22T13:35:22.000Z</published>
    <updated>2018-04-22T13:36:32.748Z</updated>
    
    <content type="html"><![CDATA[<h3 id="set-forzenset"><a href="#set-forzenset" class="headerlink" title="set, forzenset"></a>set, forzenset</h3><p>A set is a collection of unique objects. A basic use case is removing duplication:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="string">'spam'</span>, <span class="string">'spam'</span>, <span class="string">'eggs'</span>, <span class="string">'spam'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set(l)</span><br><span class="line">&#123;<span class="string">'eggs'</span>, <span class="string">'spam'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(set(l))</span><br><span class="line">[<span class="string">'eggs'</span>, <span class="string">'spam'</span>]</span><br></pre></td></tr></table></figure><a id="more"></a><p>There is no special syntax to represent frozenset literals—they must be created by calling the constructor.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>frozenset(range(<span class="number">10</span>))</span><br><span class="line">frozenset(&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;)</span><br></pre></td></tr></table></figure><p>There’s no literal notation for the empty set, so we must remember to write set().</p><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>A hash table is a sparse array (i.e., an array that always has empty cells). In standard data structure texts,<br>the cells in a hash table are often called “buckets.” In a dict hash table, there is a bucket for each item, and<br>it contains two fields: a reference to the key and a reference to the value of the item. Because all buckets<br>have the same size, access to an individual bucket is done by offset.</p><p>To put an item in a hash table, the first step is to calculate the hash value of the item key, which is done<br>with the hash() built-in function.</p><h4 id="Hashes-and-equality"><a href="#Hashes-and-equality" class="headerlink" title="Hashes and equality"></a>Hashes and equality</h4><p>The hash() built-in function works directly with built-in types and falls back to calling __hash__ for user-<br>defined types. If two objects compare equal, their hash values must also be equal, otherwise the hash<br>table algorithm does not work.</p><p>To be effective as hash table indexes, hash values should scatter around the index space as much as<br>possible. This means that, ideally, objects that are similar but not equal should have hash values that differ<br>widely.</p><h4 id="hash-table-algorithm"><a href="#hash-table-algorithm" class="headerlink" title="hash table algorithm"></a>hash table algorithm</h4><p>To fetch the value at my_dict[search_key], Python calls hash(search_key) to obtain the hash value of<br>search_key and uses the least significant bits of that number as an offset to look up a bucket in the hash<br>table (the number of bits used depends on the current size of the table). If the found bucket is empty,<br>KeyError is raised.</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;set-forzenset&quot;&gt;&lt;a href=&quot;#set-forzenset&quot; class=&quot;headerlink&quot; title=&quot;set, forzenset&quot;&gt;&lt;/a&gt;set, forzenset&lt;/h3&gt;&lt;p&gt;A set is a collection of unique objects. A basic use case is removing duplication:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l = [&lt;span class=&quot;string&quot;&gt;&#39;spam&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;spam&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;eggs&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;spam&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;set(l)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;eggs&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;spam&#39;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;list(set(l))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&#39;eggs&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;spam&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>re module_compile, finditer, group, match</title>
    <link href="blog.whistlestop.ml/2018/04/22/re-module-compile-finditer-group-match/"/>
    <id>blog.whistlestop.ml/2018/04/22/re-module-compile-finditer-group-match/</id>
    <published>2018-04-22T13:34:26.000Z</published>
    <updated>2018-04-22T13:36:27.667Z</updated>
    
    <content type="html"><![CDATA[<p>使用 re 模块有两种方式：</p><ul><li>使用 re.compile 函数生成一个 Pattern 对象，然后使用 Pattern 对象的一系列方法对文本进行匹配查找；</li><li>直接使用 re.match, re.search 和 re.findall 等函数直接对文本匹配查找。</li></ul><p>re 模块的一般使用步骤如下：</p><ul><li>使用 compile 函数将正则表达式的字符串形式编译为一个 Pattern 对象</li><li>通过 Pattern 对象提供的一系列方法对文本进行匹配查找，获得匹配结果（一个 Match 对象）</li><li>最后使用 Match 对象提供的属性和方法获得信息，根据需要进行其他的操作<a id="more"></a><em>Python 的正则匹配默认是贪婪匹配。</em></li></ul><h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">pattern=re.compile(<span class="string">r'\w+'</span>)</span><br></pre></td></tr></table></figure><p>pattern的常用方法：</p><ul><li>match 方法</li><li>search 方法</li><li>findall 方法</li><li>finditer 方法</li><li>split 方法</li><li>sub 方法</li><li>subn 方法</li></ul><h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><p>match 方法用于查找字符串的头部（也可以指定起始位置），它是一次匹配，只要找到了一个匹配的结果就返回，而不是查找所有匹配的结果。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern=re.compile(<span class="string">r'\d+'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m=pattern.match(<span class="string">''</span>one12twothree34fo<span class="string">ur', 3, 10'</span>) <span class="comment">#从'1'的位置开始匹配，正好匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(m) <span class="comment"># 返回一个 Match 对象</span></span><br><span class="line">&lt;_sre.SRE_Match object at <span class="number">0x10a42aac0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)  <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="string">'12'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.start(<span class="number">0</span>)   <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.end(<span class="number">0</span>)     <span class="comment"># 可省略 0</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.span(<span class="number">0</span>)    <span class="comment"># 可省略 0</span></span><br><span class="line">(<span class="number">3</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure></p><p>当匹配成功时返回一个 Match 对象，其中：</p><ul><li>group([group1, …]) 方法用于获得一个或多个分组匹配的字符串，当要获得整个匹配的子串时，可直接使用 group() 或 group(0)；</li><li>start([group]) 方法用于获取分组匹配的子串在整个字符串中的起始位置（子串第一个字符的索引），参数默认值为 0；</li><li>end([group]) 方法用于获取分组匹配的子串在整个字符串中的结束位置（子串最后一个字符的索引+1），参数默认值为 0；</li><li>span([group]) 方法返回 (start(group), end(group))。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern = re.compile(<span class="string">r'([a-z]+) ([a-z]+)'</span>, re.I)   <span class="comment"># re.I 表示忽略大小写</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = pattern.match(<span class="string">'Hello World Wide Web'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)                            <span class="comment"># 返回匹配成功的整个子串</span></span><br><span class="line"><span class="string">'Hello World'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.groups()                            <span class="comment"># 等价于 (m.group(1), m.group(2), ...)</span></span><br><span class="line">(<span class="string">'Hello'</span>, <span class="string">'World'</span>)</span><br></pre></td></tr></table></figure><h3 id="finditer"><a href="#finditer" class="headerlink" title="finditer"></a>finditer</h3><p>finditer 方法的行为跟 findall 的行为类似，也是搜索整个字符串，获得所有匹配的结果。但它返回一个顺序访问每一个匹配结果（Match 对象）的迭代器<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> match <span class="keyword">in</span> pattern.finditer(hello <span class="number">234</span> re<span class="string">f'):</span></span><br><span class="line"><span class="string">    print(match.group(), m1.span())</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 re 模块有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 re.compile 函数生成一个 Pattern 对象，然后使用 Pattern 对象的一系列方法对文本进行匹配查找；&lt;/li&gt;
&lt;li&gt;直接使用 re.match, re.search 和 re.findall 等函数直接对文本匹配查找。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;re 模块的一般使用步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 compile 函数将正则表达式的字符串形式编译为一个 Pattern 对象&lt;/li&gt;
&lt;li&gt;通过 Pattern 对象提供的一系列方法对文本进行匹配查找，获得匹配结果（一个 Match 对象）&lt;/li&gt;
&lt;li&gt;最后使用 Match 对象提供的属性和方法获得信息，根据需要进行其他的操作
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C03_Generic Mapping Types, hashable</title>
    <link href="blog.whistlestop.ml/2018/04/22/C03-Generic-Mapping-Types-hashable/"/>
    <id>blog.whistlestop.ml/2018/04/22/C03-Generic-Mapping-Types-hashable/</id>
    <published>2018-04-22T13:33:36.000Z</published>
    <updated>2018-04-22T13:34:04.356Z</updated>
    
    <content type="html"><![CDATA[<h3 id="hashable"><a href="#hashable" class="headerlink" title="hashable"></a>hashable</h3><p>An object is hashable if it has a hash value which never changes during its lifetime (it needs a <strong>hash</strong>()<br>method), and can be compared to other objects (it needs an <strong>eq</strong>() method). Hashable objects which<br>compare equal must have the same hash value.<br><a id="more"></a><br>The atomic immutable types (str, bytes, numeric types) are all hashable. A frozen set is always hashable,<br>because its elements must be hashable by definition. A tuple is hashable only if all its items are hashable.</p><p>User-defined types are hashable by default because their hash value is their id() and they all compare not<br>equal. If an object implements a custom <strong>eq</strong> that takes into account its internal state, it may be hashable only if all its attributes are immutable.</p><h4 id="ways-to-build-a-dict"><a href="#ways-to-build-a-dict" class="headerlink" title="ways to build a dict"></a>ways to build a dict</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = dict(one=<span class="number">1</span>, two=<span class="number">2</span>, three=<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = &#123;<span class="string">'one'</span>: <span class="number">1</span>, <span class="string">'two'</span>: <span class="number">2</span>, <span class="string">'three'</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = dict(zip([<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict([(<span class="string">'two'</span>, <span class="number">2</span>), (<span class="string">'one'</span>, <span class="number">1</span>), (<span class="string">'three'</span>, <span class="number">3</span>)])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = dict(&#123;<span class="string">'three'</span>: <span class="number">3</span>, <span class="string">'one'</span>: <span class="number">1</span>, <span class="string">'two'</span>: <span class="number">2</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a == b == c == d == e</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="dict-comprehension"><a href="#dict-comprehension" class="headerlink" title="dict comprehension"></a>dict comprehension</h3><p> A dictcomp builds a dict instance by producing key:value pair from any iterable. </p><h3 id="dict-setdefault"><a href="#dict-setdefault" class="headerlink" title="dict.setdefault"></a>dict.setdefault</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">WORD_RE = re.compile(<span class="string">'\w+'</span>)</span><br><span class="line">index = &#123;&#125;</span><br><span class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">1</span>], encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line"> <span class="keyword">for</span> line_no, line <span class="keyword">in</span> enumerate(fp, <span class="number">1</span>):</span><br><span class="line"> <span class="keyword">for</span> match <span class="keyword">in</span> WORD_RE.finditer(line):</span><br><span class="line"> word = match.group()</span><br><span class="line"> column_no = match.start()+<span class="number">1</span></span><br><span class="line"> location = (line_no, column_no)</span><br><span class="line"> <span class="comment"># this is ugly; coded like this to make a point</span></span><br><span class="line"> occurrences = index.get(word, [])</span><br><span class="line"> occurrences.append(location)</span><br><span class="line"> index[word] = occurrences </span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> sorted(index, key=str.upper):</span><br><span class="line"> print(word, index[word])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">1</span>], encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line"> <span class="keyword">for</span> line_no, line <span class="keyword">in</span> enumerate(fp, <span class="number">1</span>):</span><br><span class="line"> <span class="keyword">for</span> match <span class="keyword">in</span> WORD_RE.finditer(line):</span><br><span class="line"> word = match.group()</span><br><span class="line"> column_no = match.start()+<span class="number">1</span></span><br><span class="line"> location = (line_no, column_no)</span><br><span class="line"> index.setdefault(word, []).append(location) </span><br><span class="line"><span class="comment">#Get the list of occurrences for word, or set it to [ ] if not found; setdefault returns the value, so it can be </span></span><br><span class="line"><span class="comment">#updated without requiring a second search.</span></span><br></pre></td></tr></table></figure><h3 id="collections-defaultdict"><a href="#collections-defaultdict" class="headerlink" title="collections.defaultdict"></a>collections.defaultdict</h3><p>A defaultdict is configured to create items on demand whenever a missing key is searched.</p><p>When instantiating a defaultdict, you provide a callable that is used to produce a default value whenever<br>__getitem__ is passed a nonexistent key argument.</p><p>given an empty defaultdict created as dd = defaultdict(list), if ‘new-key’ is not in dd, the expression<br>dd[‘new-key’] does the following steps: Calls list() to create a new list. Inserts the list into dd using ‘new-<br>key’ as key. Returns a reference to that list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line">word_re=re.compile(<span class="string">'\w+'</span>)</span><br><span class="line"></span><br><span class="line">index=collections.defaultdict(list) <span class="comment">#Create a defaultdict with the list constructor as default_factory.If no default_factory is provided, the usual KeyError is raised for missing keys.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">1</span>],encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="keyword">for</span> line_no, line  <span class="keyword">in</span> enumerate(fp,<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> match <span class="keyword">in</span> word_re.finditer(line):</span><br><span class="line">            word=match.group()</span><br><span class="line">            column_no=match.start()+<span class="number">1</span></span><br><span class="line">            location=(line_no,column_no)</span><br><span class="line">            index[word].append(location) </span><br><span class="line"><span class="comment">#If word is not initially in the index, the default_factory is called to produce the missing value, which in this </span></span><br><span class="line"><span class="comment">#case is an empty list that is then assigned to index[word] and returned, so the .append(location) </span></span><br><span class="line"><span class="comment">#operation always succeeds.</span></span><br></pre></td></tr></table></figure><h3 id="missing"><a href="#missing" class="headerlink" title="__missing__"></a>__missing__</h3><p>If you subclass dict and provide a __missing__ method, the standard dict.<strong>getitem</strong>will call it<br>whenever a key is not found, instead of raising KeyError.</p><p>The __missing__ method is just called by __getitem__ (i.e., forthe d[k] operator). The presence of a __missing__ method has no effect on the behavior of other methods that look up keys, such as get or<br>__contains__ (which implements the in operator). This is why the default_factory of defaultdict works<br>only with__getitem__,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrKeyDict0</span><span class="params">(dict)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span><span class="params">(self,key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(key, str):</span><br><span class="line">            <span class="keyword">raise</span> KeyError(key)</span><br><span class="line">        <span class="keyword">return</span> self[str(key)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,key,default=None)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self[key]</span><br><span class="line">        <span class="comment">#The get method delegates to __getitem__ by using the self[key] notation; that gives the opportunity for our __missing__ to act.</span></span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="keyword">return</span> default</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self,key)</span>:</span></span><br><span class="line">        <span class="comment">#we do not check for the key in the usual Pythonic way—k in my_dict—becausestr(key) in self would recursively call __contains__. We avoid this by explicitly looking up the key in self.keys().</span></span><br><span class="line">        <span class="keyword">return</span> key <span class="keyword">in</span> self.keys() <span class="keyword">or</span> str(key) <span class="keyword">in</span> self.keys()</span><br></pre></td></tr></table></figure><h3 id="collections-OrderedDict-collections-ChainMap-collections-Counter-collections-UserDict"><a href="#collections-OrderedDict-collections-ChainMap-collections-Counter-collections-UserDict" class="headerlink" title="collections.OrderedDict collections.ChainMap collections.Counter collections.UserDict"></a>collections.OrderedDict collections.ChainMap collections.Counter collections.UserDict</h3><h4 id="UserDict"><a href="#UserDict" class="headerlink" title="UserDict"></a>UserDict</h4><p> it’s preferable to subclass from UserDict rather than from dict is that the built-in has some<br>implementation shortcuts that end up forcing us to override methods that we can just inherit from<br>UserDict with no problems.</p><p>Note that UserDict does not inherit from dict, but has an internal dict instance, called data, which holds<br>the actual items. This avoids undesired recursion when coding special methods like __setitem__, and<br>simplifies the coding of __contains__.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StrKeyDict</span><span class="params">(collections.UserDict)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span><span class="params">(self,key)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(key, str):</span><br><span class="line">            <span class="keyword">raise</span> KeyError(key)</span><br><span class="line">        <span class="keyword">return</span> self[str(key)]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(key) <span class="keyword">in</span> self.data</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, item)</span>:</span></span><br><span class="line">        self.data[str(key)] = item</span><br></pre></td></tr></table></figure></p><p>UserDict subclasses MutableMapping, the remaining methods that make StrKeyDict a full-fledged<br>mapping are inherited from UserDict, MutableMapping, or Mapping. The latter have several useful<br>concrete methods, in spite of being abstract base classes (ABCs). The following methods are worth noting:</p><ul><li><em>MutableMapping.update</em></li></ul><p>This powerful method can be called directly but is also used by __init__ to load the instance from other mappings, from iterables of (key, value) pairs, and keyword arguments. Because it uses self[key] = value to add items, it ends up calling our implementation of __setitem__.</p><ul><li><em>Mapping.get</em></li></ul><p>In StrKeyDict0 (Example 3-7), we had to code our own get to obtain results con‐<br>sistent with <strong>getitem</strong>, but in Example 3-8 we inherited Mapping.get, which is<br>implemented exactly like StrKeyDict0.get (see Python source code).</p><h3 id="MappingProxyType"><a href="#MappingProxyType" class="headerlink" title="MappingProxyType"></a>MappingProxyType</h3><p>The <em>types</em> module provides a wrapper class called MappingProxyType, which, given a mapping, returns a<br>mappingproxy instance that is a read-only but dynamic view of the original mapping. This means that<br>updates to the original mapping can be seen in the mappingproxy, but changes cannot be made through<br>it. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> types <span class="keyword">import</span> MappingProxyType</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;<span class="number">1</span>: <span class="string">'A'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxy = MappingProxyType(d)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxy</span><br><span class="line">mappingproxy(&#123;<span class="number">1</span>: <span class="string">'A'</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxy[<span class="number">1</span>] <span class="comment"># Items in d can be seen through d_proxy.</span></span><br><span class="line"><span class="string">'A'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxy[<span class="number">2</span>] = <span class="string">'x'</span> <span class="comment"># Changes cannot be made through d_proxy.</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">'mappingproxy'</span> object does <span class="keyword">not</span> support item assignment</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="number">2</span>] = <span class="string">'B'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxy <span class="comment"># d_proxy is dynamic: any change in d is reflected</span></span><br><span class="line">mappingproxy(&#123;<span class="number">1</span>: <span class="string">'A'</span>, <span class="number">2</span>: <span class="string">'B'</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d_proxy[<span class="number">2</span>]</span><br><span class="line"><span class="string">'B'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;hashable&quot;&gt;&lt;a href=&quot;#hashable&quot; class=&quot;headerlink&quot; title=&quot;hashable&quot;&gt;&lt;/a&gt;hashable&lt;/h3&gt;&lt;p&gt;An object is hashable if it has a hash value which never changes during its lifetime (it needs a &lt;strong&gt;hash&lt;/strong&gt;()&lt;br&gt;method), and can be compared to other objects (it needs an &lt;strong&gt;eq&lt;/strong&gt;() method). Hashable objects which&lt;br&gt;compare equal must have the same hash value.&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C_deque</title>
    <link href="blog.whistlestop.ml/2018/04/22/C-deque/"/>
    <id>blog.whistlestop.ml/2018/04/22/C-deque/</id>
    <published>2018-04-22T13:32:53.000Z</published>
    <updated>2018-04-22T13:33:18.830Z</updated>
    
    <content type="html"><![CDATA[<p>Inserting and removing from the left of a list (the 0-index end) is costly because the entire list must be shifted.</p><p>The class collections.deque is a thread-safe double-ended queue designed for fast inserting and removing<br>from both ends. It is also the way to go if you need to keep a list of “last seen items” or something like that, because a deque can be bounded—i.e., created with a maximum length—and then, when it is full, it<br>discards items from the opposite end when you append new ones.<br><a id="more"></a><br>The append and popleft operations are atomic, so deque is safe to use as a LIFO queue in multithreaded<br>applications without the need for using locks.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq = deque(range(<span class="number">10</span>), maxlen=<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq</span><br><span class="line">deque([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>], maxlen=<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq.rotate(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq</span><br><span class="line">deque([<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], maxlen=<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq.rotate(<span class="number">-4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq</span><br><span class="line">deque([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>], maxlen=<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq.appendleft(<span class="number">-1</span>) <span class="comment">#Appending to a deque that is full discards items from the other end</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq</span><br><span class="line">deque([<span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>], maxlen=<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq.extend([<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq</span><br><span class="line">deque([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>], maxlen=<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq.extendleft([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dq</span><br><span class="line">deque([<span class="number">40</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], maxlen=<span class="number">10</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Inserting and removing from the left of a list (the 0-index end) is costly because the entire list must be shifted.&lt;/p&gt;
&lt;p&gt;The class collections.deque is a thread-safe double-ended queue designed for fast inserting and removing&lt;br&gt;from both ends. It is also the way to go if you need to keep a list of “last seen items” or something like that, because a deque can be bounded—i.e., created with a maximum length—and then, when it is full, it&lt;br&gt;discards items from the opposite end when you append new ones.&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C02_Array, Memory Views</title>
    <link href="blog.whistlestop.ml/2018/04/22/C02-Array-Memory-Views/"/>
    <id>blog.whistlestop.ml/2018/04/22/C02-Array-Memory-Views/</id>
    <published>2018-04-22T13:31:57.000Z</published>
    <updated>2018-04-22T13:32:25.374Z</updated>
    
    <content type="html"><![CDATA[<p>An array does not actually hold full-fledged float objects, but only the packed bytes representing their<br>machine values—just like an array in the C language. On the other hand, if you are constantly adding and<br>removing items from the ends of a list as a FIFO or LIFO data structure, a deque (double-ended queue)<br>works faster.<br><a id="more"></a></p><h3 id="array-array"><a href="#array-array" class="headerlink" title="array.array"></a>array.array</h3><p>If the list will only contain numbers, an array.array is more efficient than a list: it supports all mutable<br>sequence operations (including .pop, .insert, and .extend), and additional methods for fast loading and<br>saving such as .frombytes and .tofile.</p><p>When creating an array, you provide a typecode,<br>A letter to determine the underlying C type used to store each item in the array. For example, b is the<br>typecode for signed char. If you create an array(‘b’), then each item will be stored in a single byte and<br>interpreted as an integer from –128 to 127. For large sequences of numbers, this saves a lot of memory.<br>And Python will not let you put any number that does not match the type for the array.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> random <span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>floats = array(<span class="string">'d'</span>, (random() <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>**<span class="number">7</span>)))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>floats[<span class="number">-1</span>]</span><br><span class="line"><span class="number">0.07802343889111107</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fp = open(<span class="string">'floats.bin'</span>, <span class="string">'wb'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>floats.tofile(fp)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fp.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>floats2 = array(<span class="string">'d'</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fp = open(<span class="string">'floats.bin'</span>, <span class="string">'rb'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>floats2.fromfile(fp, <span class="number">10</span>**<span class="number">7</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fp.close()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>floats2[<span class="number">-1</span>]</span><br><span class="line"><span class="number">0.07802343889111107</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>floats2 == floats</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><p>As of Python 3.4, the array type does not have an in-place sort method like list.sort(). If you need to sort<br>an array, use the sorted function to rebuild it sorted:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=array.array(typecode, sorted(a))</span><br></pre></td></tr></table></figure></p><h3 id="memoryview"><a href="#memoryview" class="headerlink" title="memoryview"></a>memoryview</h3><p>A memoryview is essentially a generalized NumPy array structure in Python itself (without the math). It<br>allows you to share memory between data-structures (things like PIL images, SQLlite databases, NumPy<br>arrays, etc.) without first copying. This is very important for large data sets.</p><p>memoryview.cast method lets you change the way multiple bytes are read or written as units without<br>moving bits around (just like the C cast operator). memoryview.cast returns yet another memoryview<br>object, always sharing the same memory</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;An array does not actually hold full-fledged float objects, but only the packed bytes representing their&lt;br&gt;machine values—just like an array in the C language. On the other hand, if you are constantly adding and&lt;br&gt;removing items from the ends of a list as a FIFO or LIFO data structure, a deque (double-ended queue)&lt;br&gt;works faster.&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C02_list.sort and the sorted Built-In Function, bisect</title>
    <link href="blog.whistlestop.ml/2018/04/22/C02-list-sort-and-the-sorted-Built-In-Function-bisect/"/>
    <id>blog.whistlestop.ml/2018/04/22/C02-list-sort-and-the-sorted-Built-In-Function-bisect/</id>
    <published>2018-04-22T13:31:00.000Z</published>
    <updated>2018-04-22T13:31:36.189Z</updated>
    
    <content type="html"><![CDATA[<h3 id="list-sort-and-sorted"><a href="#list-sort-and-sorted" class="headerlink" title="list.sort and sorted"></a>list.sort and sorted</h3><p>The list.sort method sorts a list in place—that is, without making a copy. It returns None to remind us that it<br>changes the target object, and does not create a new list. This is an important Python API convention:<br>functions or methods that change an object in place should return None to make it clear to the caller that<br>the object itself was changed, and no new object was created.<br><a id="more"></a><br>The built-in function sorted creates a new list and returns it. In fact, itaccepts any iterable object as an<br>argument, including immutable sequences and generators. Regardless of the type of iterable given to sorted, it always returns a newly created list</p><p>Both list.sort and sorted take two optional, keyword-only arguments:<br><em>reverse</em>:</p><ul><li>If True, the items are returned in descending order (i.e., by reversing the comparison of the items). The default is False.</li></ul><p><em>key</em>:</p><ul><li>A one-argument function that will be applied to each item to produce its sorting key. For example, when sorting a list of strings, key=str.lower can be used to perform a case-insensitive sort, and key=len will sort the strings by character length. The default is the identity function (i.e., the items themselves are compared).<h3 id="bisect"><a href="#bisect" class="headerlink" title="bisect"></a>bisect</h3>The bisect module offers two main functions—bisect and insort.</li></ul><p>bisect(haystack, needle) does a binary search for needle in haystack—which must be a sorted sequence.You could use the result of bisect(haystack, needle) as the index argument to haystack.insert(index, needle)—however, using insort does both steps, and is faster.</p><h4 id="bisect-finds-insertion-points-for-items-in-a-sorted-sequence"><a href="#bisect-finds-insertion-points-for-items-in-a-sorted-sequence" class="headerlink" title="bisect finds insertion points for items in a sorted sequence"></a>bisect finds insertion points for items in a sorted sequence</h4><p>bisect_right returns an insertion point after the existing item, and bisect_left returns the position of the<br>existing item, so insertion would occur before it.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">HAYSTACK=[<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">29</span>, <span class="number">30</span>]</span><br><span class="line"></span><br><span class="line">NEEDLES=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>]</span><br><span class="line"></span><br><span class="line">ROW_FMT=<span class="string">'&#123;0:2d&#125; @ &#123;1:2d&#125;    &#123;2&#125;&#123;0:&lt;2d&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo</span><span class="params">(bisect_fn)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> needle <span class="keyword">in</span> reversed(NEEDLES):</span><br><span class="line">        positioin=bisect_fn(HAYSTACK, needle) <span class="comment">#Use the chosen bisect function to get the insertion point.</span></span><br><span class="line"></span><br><span class="line">        offset=positioin * <span class="string">'  |'</span></span><br><span class="line">        print(ROW_FMT.format(needle, positioin, offset))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> sys.argv[<span class="number">-1</span>] ==<span class="string">'left'</span>:</span><br><span class="line">        bisect_fn=bisect.bisect_left</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bisect_fn=bisect.bisect</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'DEMO:'</span>, bisect_fn.__name__)</span><br><span class="line">    print(<span class="string">'haystack -&gt;'</span>,<span class="string">' '</span>.join(<span class="string">'%2d'</span>% n <span class="keyword">for</span> n <span class="keyword">in</span> HAYSTACK ))</span><br><span class="line">    demo(bisect_fn)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> bisect</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">grade</span><span class="params">(score, breakpoints=[<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>,<span class="number">90</span>],grades=<span class="string">'FDCBA'</span>)</span>:</span></span><br><span class="line"><span class="meta">... </span>    i=bisect.bisect(breakpoints, score)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> grades[i]</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[grade(score) <span class="keyword">for</span> score <span class="keyword">in</span> [<span class="number">33</span>, <span class="number">99</span>, <span class="number">77</span>, <span class="number">70</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">100</span>]]</span><br><span class="line">[<span class="string">'F'</span>, <span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'C'</span>, <span class="string">'B'</span>, <span class="string">'A'</span>, <span class="string">'A'</span>]</span><br></pre></td></tr></table></figure><h4 id="Inserting-with-bisect-insort"><a href="#Inserting-with-bisect-insort" class="headerlink" title="Inserting with bisect.insort"></a>Inserting with bisect.insort</h4><p>insort(seq, item) inserts item into seq so as to keep seq in ascending order<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">SIZE=<span class="number">7</span></span><br><span class="line"></span><br><span class="line">random.seed(<span class="number">1729</span>)</span><br><span class="line"></span><br><span class="line">my_list=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(SIZE):</span><br><span class="line">    new_item = random.randrange(SIZE*<span class="number">2</span>)</span><br><span class="line">    bisect.insort(my_list, new_item)</span><br><span class="line">    print(<span class="string">'%2d -&gt;'</span> % new_item, my_list)</span><br><span class="line"><span class="comment">#10 -&gt; [10]</span></span><br><span class="line"><span class="comment">#0 -&gt; [0, 10]</span></span><br><span class="line"><span class="comment">#6 -&gt; [0, 6, 10]</span></span><br><span class="line"><span class="comment">#8 -&gt; [0, 6, 8, 10]</span></span><br><span class="line"><span class="comment">#7 -&gt; [0, 6, 7, 8, 10]</span></span><br><span class="line"><span class="comment">#2 -&gt; [0, 2, 6, 7, 8, 10]</span></span><br><span class="line"><span class="comment">#10 -&gt; [0, 2, 6, 7, 8, 10, 10]</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;list-sort-and-sorted&quot;&gt;&lt;a href=&quot;#list-sort-and-sorted&quot; class=&quot;headerlink&quot; title=&quot;list.sort and sorted&quot;&gt;&lt;/a&gt;list.sort and sorted&lt;/h3&gt;&lt;p&gt;The list.sort method sorts a list in place—that is, without making a copy. It returns None to remind us that it&lt;br&gt;changes the target object, and does not create a new list. This is an important Python API convention:&lt;br&gt;functions or methods that change an object in place should return None to make it clear to the caller that&lt;br&gt;the object itself was changed, and no new object was created.&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C02_Sequence Assignment +=, *=</title>
    <link href="blog.whistlestop.ml/2018/04/22/C02-Sequence-Assignment/"/>
    <id>blog.whistlestop.ml/2018/04/22/C02-Sequence-Assignment/</id>
    <published>2018-04-22T13:30:11.000Z</published>
    <updated>2018-04-22T13:30:42.446Z</updated>
    
    <content type="html"><![CDATA[<p>#The augmented assignment operators += and *= behave very differently depending on the first operand. </p><p>The special method that makes += work is <strong>iadd</strong> (for “in-place addition”). However, if <strong>iadd</strong> is not<br>implemented, Python falls back to calling <strong>add</strong>.<br><a id="more"></a><br>If a implements  <strong>iadd</strong>,  a += b will be called. In the case of mutable sequences (e.g., list, bytearray,<br>array.array), a will be changed in place (i.e., the effect will be similar to a.extend(b)). However, when a does<br>not implement <strong>iadd</strong>, the expression a += b has the same effect as a = a + b: the expression a + b is<br>evaluated first, producing a new object, which is then bound to a.</p><p>In general, for mutable sequences, it is a good bet that <strong>iadd</strong> is implemented and that += happens in<br>place. For immutable sequences, clearly there is no way for that to happen.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(l)</span><br><span class="line"><span class="number">4311953800</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l *= <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(l)</span><br><span class="line"><span class="number">4311953800</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(t)</span><br><span class="line"><span class="number">4312681568</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t *= <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>id(t)</span><br><span class="line"><span class="number">4301348296</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#The augmented assignment operators += and *= behave very differently depending on the first operand. &lt;/p&gt;
&lt;p&gt;The special method that makes += work is &lt;strong&gt;iadd&lt;/strong&gt; (for “in-place addition”). However, if &lt;strong&gt;iadd&lt;/strong&gt; is not&lt;br&gt;implemented, Python falls back to calling &lt;strong&gt;add&lt;/strong&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C02_Slice Objects</title>
    <link href="blog.whistlestop.ml/2018/04/22/C02-Slice-Objects/"/>
    <id>blog.whistlestop.ml/2018/04/22/C02-Slice-Objects/</id>
    <published>2018-04-22T13:29:13.000Z</published>
    <updated>2018-04-22T13:29:42.661Z</updated>
    
    <content type="html"><![CDATA[<p>The notation a :b :c is only valid within [ ] when used as the indexing or subscript operator, and it produces a<br>slice object: slice(a, b, c).<br>To evaluate the expression seq[start:stop:step], Python calls seq.<strong>getitem</strong>(slice(start, stop, step)). </p><h3 id="Assign-to-slices"><a href="#Assign-to-slices" class="headerlink" title="Assign to slices"></a>Assign to slices</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>l=list(range(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l[<span class="number">2</span>:<span class="number">5</span>]=[<span class="number">20</span>,<span class="number">30</span>] </span><br><span class="line"><span class="comment">#When the target of the assignment is a slice, the right side must be an iterable object, even if it has just one item.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> l[<span class="number">5</span>:<span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>l</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Building-Lists-of-Lists"><a href="#Building-Lists-of-Lists" class="headerlink" title="Building Lists of Lists"></a>Building Lists of Lists</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>board = [[<span class="string">'_'</span>] * <span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>board</span><br><span class="line">[[<span class="string">'_'</span>, <span class="string">'_'</span>, <span class="string">'_'</span>], [<span class="string">'_'</span>, <span class="string">'_'</span>, <span class="string">'_'</span>], [<span class="string">'_'</span>, <span class="string">'_'</span>, <span class="string">'_'</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>board[<span class="number">1</span>][<span class="number">2</span>] = <span class="string">'X'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>board</span><br><span class="line">[[<span class="string">'_'</span>, <span class="string">'_'</span>, <span class="string">'_'</span>], [<span class="string">'_'</span>, <span class="string">'_'</span>, <span class="string">'X'</span>], [<span class="string">'_'</span>, <span class="string">'_'</span>, <span class="string">'_'</span>]]</span><br></pre></td></tr></table></figure><p>Equivalent to:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>board = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line"><span class="meta">... </span>row = [<span class="string">'_'</span>] * <span class="number">3</span> <span class="comment">#</span></span><br><span class="line"><span class="meta">... </span>board.append(row)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>board</span><br><span class="line">[[<span class="string">'_'</span>, <span class="string">'_'</span>, <span class="string">'_'</span>], [<span class="string">'_'</span>, <span class="string">'_'</span>, <span class="string">'_'</span>], [<span class="string">'_'</span>, <span class="string">'_'</span>, <span class="string">'_'</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>board[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">'X'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>board <span class="comment">#</span></span><br><span class="line">[[<span class="string">'_'</span>, <span class="string">'_'</span>, <span class="string">'_'</span>], [<span class="string">'_'</span>, <span class="string">'_'</span>, <span class="string">'_'</span>], [<span class="string">'X'</span>, <span class="string">'_'</span>, <span class="string">'_'</span>]]</span><br></pre></td></tr></table></figure></p><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>weird_board = [[<span class="string">'_'</span>] * <span class="number">3</span>] * <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>weird_board</span><br><span class="line">[[<span class="string">'_'</span>, <span class="string">'_'</span>, <span class="string">'_'</span>], [<span class="string">'_'</span>, <span class="string">'_'</span>, <span class="string">'_'</span>], [<span class="string">'_'</span>, <span class="string">'_'</span>, <span class="string">'_'</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>weird_board[<span class="number">1</span>][<span class="number">2</span>] = <span class="string">'O'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>weird_board</span><br><span class="line">[[<span class="string">'_'</span>, <span class="string">'_'</span>, <span class="string">'O'</span>], [<span class="string">'_'</span>, <span class="string">'_'</span>, <span class="string">'O'</span>], [<span class="string">'_'</span>, <span class="string">'_'</span>, <span class="string">'O'</span>]]</span><br></pre></td></tr></table></figure><p>Equivalent to:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">row = [<span class="string">'_'</span>] * <span class="number">3</span></span><br><span class="line">board = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line"> board.append(row)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The notation a :b :c is only valid within [ ] when used as the indexing or subscript operator, and it produces a&lt;br&gt;slice object: slice(a, b, c).&lt;br&gt;To evaluate the expression seq[start:stop:step], Python calls seq.&lt;strong&gt;getitem&lt;/strong&gt;(slice(start, stop, step)). &lt;/p&gt;
&lt;h3 id=&quot;Assign-to-slices&quot;&gt;&lt;a href=&quot;#Assign-to-slices&quot; class=&quot;headerlink&quot; title=&quot;Assign to slices&quot;&gt;&lt;/a&gt;Assign to slices&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l=list(range(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]=[&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#When the target of the assignment is a slice, the right side must be an iterable object, even if it has just one item.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;del&lt;/span&gt; l[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="book notes" scheme="blog.whistlestop.ml/categories/book-notes/"/>
    
    
      <category term="fluent python" scheme="blog.whistlestop.ml/tags/fluent-python/"/>
    
      <category term="python" scheme="blog.whistlestop.ml/tags/python/"/>
    
  </entry>
  
</feed>
